<?xml version="1.0"?>
<doc>
    <assembly>
        <name>lgspBackend</name>
    </assembly>
    <members>
        <member name="T:de.unika.ipd.grGen.expression.ExpressionOrYielding">
            <summary>
            Base class of expressions and yieldings
            which allows to emit code and to iterate over the contained children
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.expression.ExpressionOrYielding.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            emits c# code implementing the construct into the source builder
            to be implemented by concrete subclasses
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.expression.ExpressionOrYielding.GetEnumerator">
            <summary>
            returns an enumerator over the contained children of this construct
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.expression.ExpressionOrYielding.SetNeedForParallelizedVersion(System.Boolean)">
            <summary>
            sets for the very node the parallelized flag (does not recurse)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.expression.ExpressionOrYielding.SetNeedForProfiling(System.Boolean)">
            <summary>
            sets for the very node the profiling flag (does not recurse)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Expression">
            <summary>
            Base class of expressions used in conditions to constrain the pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.expression.Expression.Copy(System.String)">
            <summary>
            copies the expression, renaming all variables with the given suffix
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Operator">
            <summary>
            Base class of operator expressions
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BinInfixOperator">
            <summary>
            Class representing an binary infix operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BinFuncOperator">
            <summary>
            Class representing an binary prefix operator in function notation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.COND">
            <summary>
            Class representing a conditional operator (a ? b : c).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LOG_OR">
            <summary>
            Class representing a logical or.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LOG_AND">
            <summary>
            Class representing a logical and.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_OR">
            <summary>
            Class representing a bitwise or.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_BIT_OR">
            <summary>
            Class representing the set/map union operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_BIT_AND">
            <summary>
            Class representing the set/map intersection operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_EXCEPT">
            <summary>
            Class representing the set/map except operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_XOR">
            <summary>
            Class representing a bitwise xor.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_AND">
            <summary>
            Class representing a bitwise and.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EQ">
            <summary>
            Class representing an equality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.NE">
            <summary>
            Class representing an inequality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LT">
            <summary>
            Class representing a less than comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LE">
            <summary>
            Class representing a less than or equal comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GT">
            <summary>
            Class representing a greater than comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GE">
            <summary>
            Class representing a greater than or equal comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.STRING_LT">
            <summary>
            Class representing a less than comparison on strings.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.STRING_LE">
            <summary>
            Class representing a less than or equal comparison on strings.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.STRING_GT">
            <summary>
            Class representing a greater than comparison on strings.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.STRING_GE">
            <summary>
            Class representing a greater than or equal comparison on strings.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EXTERNAL_EQ">
            <summary>
            Class representing an equality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EXTERNAL_NE">
            <summary>
            Class representing an inequality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EXTERNAL_LT">
            <summary>
            Class representing a less than comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EXTERNAL_LE">
            <summary>
            Class representing a less than or equal comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EXTERNAL_GT">
            <summary>
            Class representing a greater than comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EXTERNAL_GE">
            <summary>
            Class representing a greater than or equal comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_EQ">
            <summary>
            Class representing set/map equality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_NE">
            <summary>
            Class representing set/map inequality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_LT">
            <summary>
            Class representing proper subset/map comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_LE">
            <summary>
            Class representing subset/map comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_GT">
            <summary>
            Class representing proper superset comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DICT_GE">
            <summary>
            Class representing superset comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LIST_EQ">
            <summary>
            Class representing array equality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LIST_NE">
            <summary>
            Class representing array inequality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LIST_LT">
            <summary>
            Class representing proper subarray comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LIST_LE">
            <summary>
            Class representing subarray comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LIST_GT">
            <summary>
            Class representing proper superarray comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LIST_GE">
            <summary>
            Class representing superarray comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DEQUE_EQ">
            <summary>
            Class representing deque equality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DEQUE_NE">
            <summary>
            Class representing deque inequality comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DEQUE_LT">
            <summary>
            Class representing proper subdeque comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DEQUE_LE">
            <summary>
            Class representing subdeque comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DEQUE_GT">
            <summary>
            Class representing proper superdeque comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DEQUE_GE">
            <summary>
            Class representing superdeque comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GRAPH_EQ">
            <summary>
            Class representing a graph is-isomorph comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GRAPH_NE">
            <summary>
            Class representing a graph is-not-isomorph comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GRAPH_SE">
            <summary>
            Class representing a graph is-structural-equal (isomorph disregarding attributes) comparison.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SHL">
            <summary>
            Class representing a shift left expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SHR">
            <summary>
            Class representing an arithmetic shift right expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_SHR">
            <summary>
            Class representing a bit shift right expression, i.e. 0-extending, not sign-extending.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ADD">
            <summary>
            Class representing an addition.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LIST_ADD">
            <summary>
            Class representing an array concatenation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DEQUE_ADD">
            <summary>
            Class representing a Deque concatenation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SUB">
            <summary>
            Class representing a subtraction.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MUL">
            <summary>
            Class representing a multiplication.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DIV">
            <summary>
            Class representing a division.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MOD">
            <summary>
            Class representing a modulo expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LOG_NOT">
            <summary>
            Class representing a logical negation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BIT_NOT">
            <summary>
            Class representing a bitwise negation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.NEG">
            <summary>
            Class representing an arithmetic negation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IN">
            <summary>
            Class representing a container or string inclusion query.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Cast">
            <summary>
            Class representing cast expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Constant">
            <summary>
            Class representing constant expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ConstantEnumExpression">
            <summary>
            Class representing enum constant expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GraphEntityExpression">
            <summary>
            Class representing graph entity expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Nameof">
            <summary>
            Class representing nameof expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Uniqueof">
            <summary>
            Class representing unique id expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ExistsFileExpression">
            <summary>
            Class representing exists file expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ImportExpression">
            <summary>
            Class representing import expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CopyExpression">
            <summary>
            Class representing copy expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Count">
            <summary>
            Class representing count of instances of an iterated pattern expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Qualification">
            <summary>
            Class representing qualification expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GlobalVariableQualification">
            <summary>
            Class representing global variable qualification expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CastQualification">
            <summary>
            Class representing qualification after cast expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Typeof">
            <summary>
            Class representing typeof expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.VariableExpression">
            <summary>
            Class representing variable expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.GlobalVariableExpression">
            <summary>
            Class representing global variable expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Visited">
            <summary>
            Class representing visited expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Random">
            <summary>
            Class representing random expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.This">
            <summary>
            Class representing this expression
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringLength">
            <summary>
            Class representing a string length expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringToUpper">
            <summary>
            Class representing a string to uppercase expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringToLower">
            <summary>
            Class representing a string to lowercase expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringSubstring">
            <summary>
            Class representing a substring expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringIndexOf">
            <summary>
            Class representing a string indexOf expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringLastIndexOf">
            <summary>
            Class representing a string lastIndexOf expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringStartsWith">
            <summary>
            Class representing a string starts with expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringEndsWith">
            <summary>
            Class representing a string ends with expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringReplace">
            <summary>
            Class representing a string replace expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StringAsArray">
            <summary>
            Class representing a string as array expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapAccess">
            <summary>
            Class representing a map access expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayAccess">
            <summary>
            Class representing an array access expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeAccess">
            <summary>
            Class representing a deque access expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IncidenceCountIndexAccess">
            <summary>
            Class representing an incidence count index access expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapSize">
            <summary>
            Class representing a map size expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapEmpty">
            <summary>
            Class representing a map empty expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapPeek">
            <summary>
            Class representing a map peek expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapDomain">
            <summary>
            Class representing a map domain expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapRange">
            <summary>
            Class representing a map range expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapAsArray">
            <summary>
            Class representing a map as array expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetSize">
            <summary>
            Class representing a set size expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetEmpty">
            <summary>
            Class representing a set empty expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetPeek">
            <summary>
            Class representing a set peek expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetAsArray">
            <summary>
            Class representing a set as array expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArraySize">
            <summary>
            Class representing an array size expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayEmpty">
            <summary>
            Class representing an array empty expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayPeek">
            <summary>
            Class representing an array peek expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayIndexOf">
            <summary>
            Class representing an array index of expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayIndexOfBy">
            <summary>
            Class representing an array index of by attribute expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayIndexOfOrdered">
            <summary>
            Class representing an array index of ordered expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayIndexOfOrderedBy">
            <summary>
            Class representing an array index of ordered by attribute expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayLastIndexOf">
            <summary>
            Class representing an array last index of expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayLastIndexOfBy">
            <summary>
            Class representing an array last index of by expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArraySubarray">
            <summary>
            Class representing an array subarray expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayOrderAscending">
            <summary>
            Class representing an array sort expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayOrderAscendingBy">
            <summary>
            Class representing an array sort by expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayReverse">
            <summary>
            Class representing an array reverse expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayAsSet">
            <summary>
            Class representing an array as set expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayAsMap">
            <summary>
            Class representing an array as map expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayAsDeque">
            <summary>
            Class representing an array as deque expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayAsString">
            <summary>
            Class representing an array as string expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeSize">
            <summary>
            Class representing a deque size expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeEmpty">
            <summary>
            Class representing a deque empty expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequePeek">
            <summary>
            Class representing a deque peek expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeIndexOf">
            <summary>
            Class representing a deque index of expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeLastIndexOf">
            <summary>
            Class representing a deque last index of expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeSubdeque">
            <summary>
            Class representing a deque subdeque expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeAsSet">
            <summary>
            Class representing a deque as set expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeAsArray">
            <summary>
            Class representing a deque as array expression.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StaticMap">
            <summary>
            Class representing a constant rule-local map, available as initalized static class member.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StaticSet">
            <summary>
            Class representing a constant rule-local set, available as initialized static class member.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StaticArray">
            <summary>
            Class representing a constant rule-local array, available as initialized static class member.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.StaticDeque">
            <summary>
            Class representing a constant rule-local deque, available as initialized static class member.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapConstructor">
            <summary>
            Class representing a rule-local map to be filled with the given map items.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapItem">
            <summary>
            Class representing a map item.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetConstructor">
            <summary>
            Class representing a rule-local set to be filled with the given set items.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetItem">
            <summary>
            Class representing a set item.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayConstructor">
            <summary>
            Class representing a rule-local array to be filled with the given array items.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayItem">
            <summary>
            Class representing an array item.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeConstructor">
            <summary>
            Class representing a rule-local deque to be filled with the given deque items.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeItem">
            <summary>
            Class representing a deque item.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.FunctionInvocation">
            <summary>
            Class representing a function invocation (of an internal attribute evaluation function).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ExternalFunctionInvocation">
            <summary>
            Class representing a function invocation (of an external attribute evaluation function).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.FunctionMethodInvocation">
            <summary>
            Class representing a function method invocation (of an internal attribute evaluation function method).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ExternalFunctionMethodInvocation">
            <summary>
            Class representing a function method invocation (of an external attribute evaluation function method).
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Nodes">
            <summary>
            Class representing expression returning the nodes of a node type (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Edges">
            <summary>
            Class representing expression returning the edges of an edge type (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountNodes">
            <summary>
            Class representing expression returning the count of nodes of a node type
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountEdges">
            <summary>
            Class representing expression returning the count of edges of an edge type
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Now">
            <summary>
            Class representing expression returning the current time, measured as windows file time
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Empty">
            <summary>
            Class representing expression returning whether the graph is empty
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Size">
            <summary>
            Class representing expression returning the number of graph elements
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Source">
            <summary>
            Class representing expression returning the source node of an edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Target">
            <summary>
            Class representing expression returning the target node of an edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Opposite">
            <summary>
            Class representing expression returning the opposite node of an edge and a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.NodeByName">
            <summary>
            Class representing expression returning the node for a name (or null)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EdgeByName">
            <summary>
            Class representing expression returning the edge for a name (or null)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.NodeByUnique">
            <summary>
            Class representing expression returning the node for a unique id(or null)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EdgeByUnique">
            <summary>
            Class representing expression returning the edge for a unique id(or null)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Outgoing">
            <summary>
            Class representing expression returning the outgoing edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Incoming">
            <summary>
            Class representing expression returning the incoming edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Incident">
            <summary>
            Class representing expression returning the incident edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountOutgoing">
            <summary>
            Class representing expression returning the count of the outgoing edges of a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountIncoming">
            <summary>
            Class representing expression returning the count of the incoming edges of a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountIncident">
            <summary>
            Class representing expression returning the count of the incident edges of a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.AdjacentOutgoing">
            <summary>
            Class representing expression returning the adjacent nodes of a node (as set) reachable via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.AdjacentIncoming">
            <summary>
            Class representing expression returning the adjacent nodes of a node (as set) reachable via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Adjacent">
            <summary>
            Class representing expression returning the adjacent nodes of a node (as set) reachable via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountAdjacentOutgoing">
            <summary>
            Class representing expression returning the count of the adjacent nodes of a node reachable via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountAdjacentIncoming">
            <summary>
            Class representing expression returning the count of the adjacent nodes of a node reachable via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountAdjacent">
            <summary>
            Class representing expression returning the count of the adjacent nodes of a node reachable via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsAdjacentOutgoing">
            <summary>
            Class representing expression returning whether the end node is adjacent to the start node with an outgoing edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsAdjacentIncoming">
            <summary>
            Class representing expression returning whether the end node is adjacent to the start node with an incoming edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsAdjacent">
            <summary>
            Class representing expression returning whether the end node is adjacent to the start node with an incident edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsOutgoing">
            <summary>
            Class representing expression returning whether the end edge is incident to the start node with an outgoing edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsIncoming">
            <summary>
            Class representing expression returning whether the end edge is incident to the start node with an incoming edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsIncident">
            <summary>
            Class representing expression returning whether the end edge is incident to the start node with an incident edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ReachableEdgesOutgoing">
            <summary>
            Class representing expression returning the reachable edges via outgoing edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ReachableEdgesIncoming">
            <summary>
            Class representing expression returning the reachable edges via incoming edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ReachableEdges">
            <summary>
            Class representing expression returning the reachable edges via incident edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountReachableEdgesOutgoing">
            <summary>
            Class representing expression returning the count of the reachable edges via outgoing edges of a node 
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountReachableEdgesIncoming">
            <summary>
            Class representing expression returning the count of the reachable edges via incoming edges of a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountReachableEdges">
            <summary>
            Class representing expression returning the count of the reachable edges via incident edges of a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ReachableOutgoing">
            <summary>
            Class representing expression returning the reachable nodes of a node (as set) reachable via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ReachableIncoming">
            <summary>
            Class representing expression returning the reachable nodes of a node (as set) reachable via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Reachable">
            <summary>
            Class representing expression returning the reachable nodes of a node (as set) reachable via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountReachableOutgoing">
            <summary>
            Class representing expression returning the count of the reachable nodes of a node reachable via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountReachableIncoming">
            <summary>
            Class representing expression returning the count of the reachable nodes of a node reachable via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountReachable">
            <summary>
            Class representing expression returning the count of the reachable nodes of a node reachable via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachableEdgesOutgoing">
            <summary>
            Class representing expression returning the reachable edges within the given depth via outgoing edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachableEdgesIncoming">
            <summary>
            Class representing expression returning the reachable edges within the given depth via incoming edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachableEdges">
            <summary>
            Class representing expression returning the reachable edges within the given depth via incident edges of a node (as set)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountBoundedReachableEdgesOutgoing">
            <summary>
            Class representing expression returning the count of the reachable edges within the given depth via outgoing edges of a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountBoundedReachableEdgesIncoming">
            <summary>
            Class representing expression returning the count of the reachable edges within the given depth via incoming edges of a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountBoundedReachableEdges">
            <summary>
            Class representing expression returning the count of the reachable edges within the given depth via incident edges of a node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachableOutgoing">
            <summary>
            Class representing expression returning the reachable nodes within the given depth of a node (as set) reachable via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachableIncoming">
            <summary>
            Class representing expression returning the reachable nodes within the given depth of a node (as set) reachable via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachable">
            <summary>
            Class representing expression returning the reachable nodes within the given depth of a node (as set) reachable via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountBoundedReachableOutgoing">
            <summary>
            Class representing expression returning the count of the reachable nodes within the given depth of a node reachable via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountBoundedReachableIncoming">
            <summary>
            Class representing expression returning the count of the reachable nodes within the given depth of a node reachable via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CountBoundedReachable">
            <summary>
            Class representing expression returning the count of the reachable nodes within the given depth of a node reachable via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachableWithRemainingDepthOutgoing">
            <summary>
            Class representing expression returning the reachable nodes within the given depth of a node (as map including the remaining depth) reachable via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachableWithRemainingDepthIncoming">
            <summary>
            Class representing expression returning the reachable nodes within the given depth of a node (as map including the remaining depth) reachable via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BoundedReachableWithRemainingDepth">
            <summary>
            Class representing expression returning the reachable nodes within the given depth of a node (as map including the remaining depth) reachable via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsReachableOutgoing">
            <summary>
            Class representing expression returning whether the end node is reachable from the start node via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsReachableIncoming">
            <summary>
            Class representing expression returning whether the end node is reachable from the start node via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsReachable">
            <summary>
            Class representing expression returning whether the end node is reachable from the start node via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsReachableEdgesOutgoing">
            <summary>
            Class representing expression returning whether the end edge is reachable from the start node via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsReachableEdgesIncoming">
            <summary>
            Class representing expression returning whether the end edge is reachable from the start node via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsReachableEdges">
            <summary>
            Class representing expression returning whether the end edge is reachable from the start node via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsBoundedReachableOutgoing">
            <summary>
            Class representing expression returning whether the end node is reachable from the start node within the given depth via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsBoundedReachableIncoming">
            <summary>
            Class representing expression returning whether the end node is reachable from the start node within the given depth via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsBoundedReachable">
            <summary>
            Class representing expression returning whether the end node is reachable from the start node within the given depth via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsBoundedReachableEdgesOutgoing">
            <summary>
            Class representing expression returning whether the end edge is reachable from the start node within the given depth via outgoing edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsBoundedReachableEdgesIncoming">
            <summary>
            Class representing expression returning whether the end edge is reachable from the start node within the given depth via incoming edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IsBoundedReachableEdges">
            <summary>
            Class representing expression returning whether the end edge is reachable from the start node within the given depth via incident edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.InducedSubgraph">
            <summary>
            Class representing expression returning the induced subgraph from the given set of nodes
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DefinedSubgraph">
            <summary>
            Class representing expression returning the defined subgraph from the given set of edges
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EqualsAny">
            <summary>
            Class representing expression returning whether the given subgraph is equal to any of the given set of subgraphs
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Max">
            <summary>
            Class representing the max operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Min">
            <summary>
            Class representing the min operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Abs">
            <summary>
            Class representing expression returning the absolute value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Sgn">
            <summary>
            Class representing expression returning the signum
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Pi">
            <summary>
            Class representing expression returning pi
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.E">
            <summary>
            Class representing expression returning e
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ByteMin">
            <summary>
            Class representing expression returning the minimum value of type byte
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ByteMax">
            <summary>
            Class representing expression returning the maximum value of type byte
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ShortMin">
            <summary>
            Class representing expression returning the minimum value of type short
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ShortMax">
            <summary>
            Class representing expression returning the maximum value of type short
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IntMin">
            <summary>
            Class representing expression returning the minimum value of type int
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IntMax">
            <summary>
            Class representing expression returning the maximum value of type int
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LongMin">
            <summary>
            Class representing expression returning the minimum value of type long
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.LongMax">
            <summary>
            Class representing expression returning the maximum value of type long
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.FloatMin">
            <summary>
            Class representing expression returning the minimum value of type float
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.FloatMax">
            <summary>
            Class representing expression returning the maximum value of type float
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DoubleMin">
            <summary>
            Class representing expression returning the minimum value of type double
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DoubleMax">
            <summary>
            Class representing expression returning the maximum value of type double
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Ceil">
            <summary>
            Class representing expression returning the ceil value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Floor">
            <summary>
            Class representing expression returning the floor value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Round">
            <summary>
            Class representing expression returning the rounded value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Truncate">
            <summary>
            Class representing expression returning the truncated value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Sin">
            <summary>
            Class representing expression returning the sinus value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Cos">
            <summary>
            Class representing expression returning the cosinus value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Tan">
            <summary>
            Class representing expression returning the tangens value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArcSin">
            <summary>
            Class representing expression returning the arcus sinus value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArcCos">
            <summary>
            Class representing expression returning the arcus cosinus value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArcTan">
            <summary>
            Class representing expression returning the arcus tangens value
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Canonize">
            <summary>
            Class representing expression returning a canonical string representation of a graph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Log">
            <summary>
            Class representing the logarithm function.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Pow">
            <summary>
            Class representing the to-the-power-of operator.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.AreAttributesEqual">
            <summary>
            Class representing a comparison of all the attributes.
            Is not generated into code, does not exist at source level.
            An internal thing only used for the interpretation plan, isomorphy checking.
            (todo: Makes sense to offer sth like this at source level, too?)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Yielding">
            <summary>
            Base class of yielding in assignments and expressions
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.expression.Yielding.Copy(System.String)">
            <summary>
            copies the yielding, renaming all variables with the given suffix
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.YieldAssignment">
            <summary>
            Class representing a yielding assignment executed after the match was found
            writing a value computed from the right expression into the left def variable
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.YieldAssignmentIndexed">
            <summary>
            Class representing a yielding indexed assignment executed after the match was found
            writing a value computed from the right expression
            into the position at the given index of the left def variable
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.YieldChangeAssignment">
            <summary>
            Class representing a yielding change assignment executed after the match was found
            writing the information whether the right yield method changed the set/map it operates upon
            to the left def variable
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.YieldChangeConjunctionAssignment">
            <summary>
            Class representing a yielding change conjunction assignment executed after the match was found
            writing the information whether the right yield method changed the set/map it operates upon
            and'ed with the left def variable to the left def variable
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.YieldChangeDisjunctionAssignment">
            <summary>
            Class representing a yielding change disjunction assignment executed after the match was found
            writing the information whether the right yield method changed the set/map it operates upon
            or'ed with the left def variable to the left def variable
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.YieldMethod">
            <summary>
            Class representing a yielding method call executed after the match was found
            writing a value computed from the right expression into the left def variable
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetMapRemove">
            <summary>
            Class representing a remove from set or map
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayRemove">
            <summary>
            Class representing a remove from an array
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeRemove">
            <summary>
            Class representing a remove from a deque
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.Clear">
            <summary>
            Class representing a clearing of a set or a map or an array or a deque
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetAdd">
            <summary>
            Class representing an add to set
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MapAdd">
            <summary>
            Class representing an add to map
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ArrayAdd">
            <summary>
            Class representing an add to an array
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DequeAdd">
            <summary>
            Class representing an add to a deque
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetMapUnion">
            <summary>
            Class representing a change set or map by union with another one
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetMapIntersect">
            <summary>
            Class representing a change set or map by intersection with another one
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SetMapExcept">
            <summary>
            Class representing a change set or map by subtracting another one
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IteratedAccumulationYield">
            <summary>
            Class representing an iterated accumulation yield executed after the match was found
            accumulating the values matched by a nested iterated with chosen statements
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ContainerAccumulationYield">
            <summary>
            Class representing an container accumulation yield, accumulating the values in a container with chosen statements
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.IntegerRangeIterationYield">
            <summary>
            Class representing an integer range iteration yield
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ForFunction">
            <summary>
            Class representing an iteration over helper function results (nodes/edgse/incident/adjacent/reachable stuff)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ForIndexAccessEquality">
            <summary>
            Class representing an iteration over index based on equality comparison
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ForIndexAccessOrdering">
            <summary>
            Class representing an iteration over index based on ordering comparison
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ConditionStatement">
            <summary>
            Class representing an if statement, maybe with else part
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.SwitchStatement">
            <summary>
            Class representing a switch statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.CaseStatement">
            <summary>
            Class representing a case statement within a switch
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.WhileStatement">
            <summary>
            Class representing while statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DoWhileStatement">
            <summary>
            Class representing do while statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.MultiStatement">
            <summary>
            Class representing multi statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DefDeclaration">
            <summary>
            Class representing a def declaration (variable or graph entity), potentially including initialization
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.BreakStatement">
            <summary>
            Class representing a break statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.ContinueStatement">
            <summary>
            Class representing a continue statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.EmitStatement">
            <summary>
            Class representing an emit statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DebugAddStatement">
            <summary>
            Class representing a debug add (entry) statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DebugRemStatement">
            <summary>
            Class representing a debug rem (exit) statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DebugEmitStatement">
            <summary>
            Class representing a debug emit statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DebugHaltStatement">
            <summary>
            Class representing a debug halt statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.DebugHighlightStatement">
            <summary>
            Class representing a debug highlight statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.expression.RecordStatement">
            <summary>
            Class representing a record statement
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GraphComparisonMatcher">
            <summary>
            Interface implemented by the compiled graph matchers
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GraphComparisonMatcher.IsIsomorph(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.LGSPGraph,System.Boolean)">
            <summary>
            Returns whether the graph which resulted in thisPattern is isomorph to the graph given.        
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GraphComparisonMatcher.IsIsomorph(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.LGSPGraph,System.Boolean,System.Int32)">
            <summary>
            Returns whether the graph which resulted in thisPattern is isomorph to the graph given, using the parallel is matched flags array of the given thread id.        
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.GraphComparisonMatcher.Name">
            <summary>
            Returns the name of the compiled matcher, same as the name of the interpretation plan.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GraphMatchingState">
            <summary>
            Helper class with stuff needed for IsIsomorph checking of graphs
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GraphMatchingState.patternGraph">
            <summary>
            A pattern graph created out of the original graph, for isomorphy checking
            not null if/after comparing type counts and vstructs was insufficient
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GraphMatchingState.interpretationPlan">
            <summary>
            The interpretation plan used for isomorphy checking, built from the pattern graph
            not null if/after comparing type counts and vstructs was insufficient
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GraphMatchingState.changesCounterAtInterpretationPlanBuilding">
            <summary>
            The changes counter of the graph when the interpretation plan was built
            (the compiled matcher depends on this, too)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GraphMatchingState.compiledMatcher">
            <summary>
            The compiled graph comparison matcher, built from the interpretation plan
            not null if/after the interpretation plan was emitted and compiled
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GraphMatchingState.numMatchings">
             <summary>
            Tells how many matches were carried out with this interpretation plan or compiled matcher
             </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GraphMatchingState.candidatesForCompilation">
            <summary>
            The graphs which were matched so often they gained the status of a candidate 
            for the next compilation run
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GraphMatchingState.MATCHES_NEEDED_TO_BECOME_A_CANDIDATE_FOR_COMPILATION">
            <summary>
            We gather the oftenly compared "hot" graphs in a candidate set 
            for getting isomorphy-checked with a compiled matcher instead of an interpreted matcher
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GraphMatchingState.TOTAL_CANDIDATE_MATCHES_NEEDED_TO_START_A_COMPILATION">
            <summary>
            And when the candidates were compared often enough, we compile them.
            We can't do this often cause compilation is very expensive.
            Using ILGenerator to build a dynamic method would be much better, but is much harder, too :(
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.FoundMatch">
            <summary>
            A helper class containing a match found by iteration plan execution
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.FoundMatch.nodes">
            <summary>
            The nodes found, linked to their corresponding pattern nodes in the pattern graph by index
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.FoundMatch.edges">
            <summary>
            The edges found, linked to their corresponding pattern edges in the pattern graph by index
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlan">
            <summary>
            Base class of the interpretation plan data structure,
            which consists of a linked list of matching operations
            (Benefits compared to scheduled search plan:
              - stores matched graph elements
              - connectedness checking with bidirectional matching is complicated enough it should be computed statically before execution)
            The interpretation plan is only used in isomorphy checking.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlan.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            dumps interpretation plan operation (as string) into source builder
            to be implemented by concrete subclasses
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlan.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder,System.Boolean)">
            <summary>
            emits the interpretation plan operation (as c# code string) into source builder
            to be implemented by concrete subclasses
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlan.Execute(de.unika.ipd.grGen.lgsp.LGSPGraph,System.Boolean,System.Collections.Generic.List{de.unika.ipd.grGen.lgsp.FoundMatch})">
            <summary>
            Executes the interpretation plan (starting with this operation)
            </summary>
            <param name="graph">The graph over which the plan is to be interpreted</param>
            <param name="includingAttributes">Whether to check for isomorphy including attributes or without them (== vs ~~)</param>
            <param name="matches">If not null, the list is filled with the matches; only in this case are all matches iterated</param>
            <returns>true if execution succeeded, i.e. a match was found; false otherwise</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlan.Execute(de.unika.ipd.grGen.lgsp.LGSPGraph,System.Boolean,System.Collections.Generic.List{de.unika.ipd.grGen.lgsp.FoundMatch},System.Int32)">
            <summary>
            Executes the interpretation plan (starting with this operation)
            </summary>
            <param name="graph">The graph over which the plan is to be interpreted</param>
            <param name="includingAttributes">Whether to check for isomorphy including attributes or without them (== vs ~~)</param>
            <param name="matches">If not null, the list is filled with the matches; only in this case are all matches iterated</param>
            <param name="threadId">The id of the thread that is executing this interpretation plan (used for accessing the flags for isomorphy checking)</param>
            <returns>true if execution succeeded, i.e. a match was found; false otherwise</returns>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.InterpretationPlan.next">
            <summary>
            The next interpretation plan operation
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.InterpretationPlan.prev">
            <summary>
            The previous interpretation plan operation
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "F:de.unika.ipd.grGen.lgsp.InterpretationPlan.Id" ignoriert -->
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanNodeMatcher">
            <summary>
            An interpretation plan operation which matches a node
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.InterpretationPlanNodeMatcher.node">
            <summary>
            The node matched by this interpretation plan operation during execution
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.InterpretationPlanNodeMatcher.planNodeNode">
            <summary>
            The node representation in the search plan; the elementID - 1 is the index in the nodes array of the pattern graph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanEdgeMatcher">
            <summary>
            An interpretation plan operation which matches an edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.InterpretationPlanEdgeMatcher.edge">
            <summary>
            The edge matched by this interpretation plan operation during execution
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.InterpretationPlanEdgeMatcher.planEdgeNode">
            <summary>
            The edge representation in the search plan; the elementID - 1 is the index in the edges array of the pattern graph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanDirectionVariable">
            <summary>
            An interpretation plan operation which stores a direction decision
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.InterpretationPlanDirectionVariable.direction">
            <summary>
            The direction decided upon by this interpretation plan operation during execution
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanStart">
            <summary>
            Interpretation plan operation which work as an anchor for an interpretation plan without own functionality
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanLookupNode">
            <summary>
            Interpretation plan operation which looks up a node in the graph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanLookupEdge">
            <summary>
            Interpretation plan operation which looks up an edge in the graph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanBothDirections">
            <summary>
            Interpretation plan operation which iterates both directions,
            needed for matching bidirectional edges in both directions
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanIncoming">
            <summary>
            Interpretation plan operation which retrieves an incoming edge from a source node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanOutgoing">
            <summary>
            Interpretation plan operation which retrieves an outgoing edge from a source node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanIncomingOrOutgoing">
            <summary>
            Interpretation plan operation which retrieves an edge to be matched bidirectionally from a source node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanImplicitTarget">
            <summary>
            Interpretation plan operation which retrieves the target node of an edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanImplicitSource">
            <summary>
            Interpretation plan operation which retrieves the source node of an edge
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanImplicitSourceOrTarget">
            <summary>
            Interpretation plan operation which retrieves the source or target node of an edge
            depending on the current direction to be matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanImplicitTheOther">
            <summary>
            Interpretation plan operation which retrieves the source or target node of an edge
            depending on the other node already matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanCheckConnectednessSource">
            <summary>
            Interpretation plan operation which checks the source node of an edge to be identical to a given node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanCheckConnectednessTarget">
            <summary>
            Interpretation plan operation which checks the target node of an edge to be identical to a given node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanCheckConnectednessSourceOrTarget">
            <summary>
            Interpretation plan operation which checks the source or target node of an edge to be identical to a given node,
            depending on the current direction to be matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanCheckConnectednessTheOther">
            <summary>
            Interpretation plan operation which checks the source or target node of an edge to be identical to a given node,
            depending on the other node already matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanCheckCondition">
            <summary>
            Interpretation plan operation which checks the AreAttribuesEqual condition
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanMatchComplete">
            <summary>
            Interpretation plan operation which completes a match;
            no own functionality, it just succeeds when execution reaches it
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder">
            <summary>
            A class for building the interpretation plan data structure from a scheduled search plan
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.#ctor(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,de.unika.ipd.grGen.lgsp.SearchPlanGraph,de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Creates an interpretation plan builder for the given scheduled search plan.
            Only a limited amount of search operations is supported, the ones needed for isomorphy checking.
            </summary>
            <param name="ssp">the scheduled search plan to build an interpretation plan for</param>
            <param name="spg">the search plan graph for determining the pattern element needed for attribute checking</param>
            <param name="model">the model over which the patterns are to be searched</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.BuildInterpretationPlan(System.String)">
            <summary>
            Builds interpretation plan from scheduled search plan.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.BuildInterpretationPlan(de.unika.ipd.grGen.lgsp.InterpretationPlan,System.Int32)">
            <summary>
            Recursively assembles interpretation plan from scheduled search plan, beginning at index 0.
            Decides which specialized build procedure is to be called.
            The specialized build procedure then calls this procedure again, 
            in order to process the next search plan operation at the following index.
            The insertionPoint is the lastly built operation;
            the next operation built is inserted into the next link of it, 
            then it becomes the current insertionPoint.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.buildLookup(de.unika.ipd.grGen.lgsp.InterpretationPlan,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode)">
            <summary>
            Interpretation plan operations implementing the
            Lookup node search plan operation
            are created and inserted into the interpretation plan at the insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.buildLookup(de.unika.ipd.grGen.lgsp.InterpretationPlan,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            Interpretation plan operations implementing the
            Lookup edge search plan operation
            are created and inserted into the interpretation plan at the insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.buildImplicit(de.unika.ipd.grGen.lgsp.InterpretationPlan,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.ImplicitNodeType)">
            <summary>
            Interpretation plan operations implementing the
            Implicit Source|Target|SourceOrTarget search plan operation
            are created and inserted into the interpretation plan at the insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.buildIncident(de.unika.ipd.grGen.lgsp.InterpretationPlan,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.IncidentEdgeType)">
            <summary>
            Interpretation plan operations implementing the
            Extend Incoming|Outgoing|IncomingOrOutgoing search plan operation
            are created and inserted into the interpretation plan at the insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.buildCondition(de.unika.ipd.grGen.lgsp.InterpretationPlan,System.Int32,de.unika.ipd.grGen.lgsp.PatternCondition)">
            <summary>
            Interpretation plan operations implementing the
            CheckCondition search plan operation
            are created and inserted into the interpretation plan at the insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.buildMatchComplete(de.unika.ipd.grGen.lgsp.InterpretationPlan)">
            <summary>
            The closing matching completed interpretation plan operation is added at the insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.insertImplicitNodeFromEdge(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.ImplicitNodeType)">
            <summary>
            Inserts code to get an implicit node from an edge
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.insertIncidentEdgeFromNode(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.IncidentEdgeType)">
            <summary>
            Inserts code to get an incident edge from some node
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.decideOnAndInsertCheckConnectednessOfNodeFromLookup(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode)">
            <summary>
            Decides which check connectedness operations are needed for the given node just determined by lookup
            and inserts them into the interpretation plan
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.decideOnAndInsertCheckConnectednessOfImplicitNodeFromEdge(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode)">
            <summary>
            Decides which check connectedness operations are needed for the given node just drawn from edge
            and inserts them into the interpretation plan
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.decideOnAndInsertCheckConnectednessOfNodeFixedDirection(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.CheckCandidateForConnectednessType)">
            <summary>
            Decides which check connectedness operations are needed for the given node and edge of fixed direction
            and inserts them into the interpretation plan
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.decideOnAndInsertCheckConnectednessOfNodeBothDirections(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            Decides which check connectedness operations are needed for the given node and edge in both directions
            and inserts them into the interpretation plan
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.decideOnAndInsertCheckConnectednessOfEdgeFromLookup(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            Decides which check connectedness operations are needed for the given edge determined by lookup
            and inserts them into the interpretation plan
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.decideOnAndInsertCheckConnectednessOfIncidentEdgeFromNode(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,System.Boolean)">
            <summary>
            Decides which check connectedness operations are needed for the given edge determined from incident node
            and inserts them into the interpretation plan
            receives insertion point, returns new insertions point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.decideOnAndInsertCheckConnectednessOfEdgeFixedDirection(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.CheckCandidateForConnectednessType)">
            <summary>
            Decides which check connectedness operations are needed for the given edge of fixed direction
            and inserts them into the interpretation plan
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.decideOnAndInsertCheckConnectednessOfEdgeBothDirections(de.unika.ipd.grGen.lgsp.InterpretationPlan,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,System.Boolean)">
            <summary>
            Decides which check connectedness operations are needed for the given edge in both directions
            and inserts them into the interpretation plan
            receives insertion point, returns new insertion point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.currentNodeIsFirstIncidentNodeOfEdge(de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if the node which gets currently determined in the schedule
            is the first incident node of the edge which gets connected to it
            only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.currentNodeIsSecondIncidentNodeOfEdge(de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if the node which gets currently determined in the schedule
            is the second incident node of the edge which gets connected to it
            only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.currentEdgeConnectsOnlyToFirstIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if only one incident node of the edge which gets currently determined in the schedule
            was already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.currentEdgeConnectsToFirstIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if at least one incident node of the edge which gets currently determined in the schedule
            was already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.InterpretationPlanBuilder.currentEdgeConnectsToSecondIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if both incident nodes of the edge which gets currently determined in the schedule
            were already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPActionExecutionEnvironment">
            <summary>
            An implementation of the IGraphProcessingEnvironment, to be used with LGSPGraphs.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPDeferredSequencesManager">
            <summary>
            A class for managing deferred sequence execution.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPDeferredSequencesManager.toBeExecuted">
            <summary>
            A global stack of queues with the sequences to be executed after execution of the current rule/test.
            These are sequences with their needed environment, used from within subpatterns/alternatives/iterateds.
            For every exec entry a queue is pushed, for every exit popped, to ensure that the exec processing
            of a nested rule is not executing the execs of the calling rule.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPElemFlags">
            <summary>
            Flags for graph elements.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.MAX_ISO_SPACE">
            <summary>
            Maximum iso space number which can be handled by the flags (i.e. max. number of independent isomorphy spaces).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.NUM_SUPPORTED_VISITOR_IDS">
            <summary>
            Number of visitors which can be handled by the flags.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.IS_MATCHED_BY_SOME_ENCLOSING_PATTERN">
            <summary>
            This element has already been matched within some enclosing pattern
            during the current matching process, needed for patternpath checks.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.IS_MATCHED_BY_ENCLOSING_PATTERN">
            <summary>
            This element has already been matched within an pattern
            of this iso space during the current matching process.
            This mask must be shifted left by the current iso space/level.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.IS_MATCHED">
            <summary>
            This element has already been matched within the local pattern
            during the current matching process.
            This mask must be shifted left by the current iso space/level.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.HAS_VARIABLES">
            <summary>
            Some variable contains this element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.IS_VISITED">
            <summary>
            This element has already been visited by a visitor.
            This mask must be shifted left by the according visitor ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlags.IS_VISITED_INTERNALLY">
            <summary>
            This element has already been visited by the single internal visitor.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPElemFlagsParallel">
            <summary>
            Flags for graph elements, for parallel matching;
            stored outside of the graph elements themselves, in an array per thread.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlagsParallel.MAX_ISO_SPACE">
            <summary>
            Maximum iso space number which can be handled by the flags (i.e. max. number of independent isomorphy spaces).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlagsParallel.IS_MATCHED_BY_SOME_ENCLOSING_PATTERN">
            <summary>
            This element has already been matched within some enclosing pattern
            during the current matching process, needed for patternpath checks.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlagsParallel.IS_MATCHED_BY_ENCLOSING_PATTERN">
            <summary>
            This element has already been matched within an pattern
            of this iso space during the current matching process.
            This mask must be shifted left by the current iso space/level.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlagsParallel.IS_MATCHED">
            <summary>
            This element has already been matched within the local pattern
            during the current matching process.
            This mask must be shifted left by the current iso space/level.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPElemFlagsParallel.IS_VISITED_INTERNALLY">
            <summary>
            This element has already been visited by the single internal visitor.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPGraphModel">
            <summary>
            A model of a GrGen graph, base class from implementation.
            Defines a thin layer above IGraphModel, enriched with index creating functionality, the real stuff is generated.
            It allows the generic LGSPGraph to create and bind the index set when it is configured with the graph model.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment">
            <summary>
            An implementation of the IGraphProcessingEnvironment, to be used with LGSPGraphs.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.GetLGSPNodeVarValue(System.String)">
            <summary>
            Retrieves the LGSPNode for a variable name or null, if the variable isn't set yet or anymore.
            A InvalidCastException is thrown, if the variable is set and does not point to an LGSPNode object.
            </summary>
            <param name="varName">The variable name to lookup.</param>
            <returns>The according LGSPNode or null.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.GetLGSPEdgeVarValue(System.String)">
            <summary>
            Retrieves the LGSPEdge for a variable name or null, if the variable isn't set yet or anymore.
            A InvalidCastException is thrown, if the variable is set and does not point to an LGSPEdge object.
            </summary>
            <param name="varName">The variable name to lookup.</param>
            <returns>The according LGSPEdge or null.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.DetachVariableFromElement(de.unika.ipd.grGen.libGr.Variable)">
            <summary>
            Detaches the specified variable from the according graph element.
            If it was the last variable pointing to the element, the variable list for the element is removed.
            This function may only called on variables pointing to graph elements.
            </summary>
            <param name="var">Variable to detach.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.AddNode(de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Adds an existing LGSPNode object to the graph and assigns it to the given variable.
            The node must not be part of any graph, yet!
            The node may not be connected to any other elements!
            </summary>
            <param name="node">The node to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.AddINode(de.unika.ipd.grGen.libGr.NodeType,System.String)">
            <summary>
            Adds a new node to the graph.
            TODO: Slow but provides a better interface...
            </summary>
            <param name="nodeType">The node type for the new node.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.AddLGSPNode(de.unika.ipd.grGen.libGr.NodeType,System.String)">
            <summary>
            Adds a new LGSPNode to the graph and assigns it to the given variable.
            </summary>
            <param name="nodeType">The node type for the new node.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.AddEdge(de.unika.ipd.grGen.libGr.IEdge,System.String)">
            <summary>
            Adds an existing IEdge object to the graph and assigns it to the given variable.
            The edge must not be part of any graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.AddEdge(de.unika.ipd.grGen.lgsp.LGSPEdge,System.String)">
            <summary>
            Adds an existing LGSPEdge object to the graph and assigns it to the given variable.
            The edge must not be part of any graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
            <param name="varName">The name of the variable.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode,System.String)">
            <summary>
            Adds a new edge to the graph and assigns it to the given variable.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Adds a new edge to the graph and assigns it to the given variable.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <param name="varName">The name of the variable.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics">
            <summary>
            A class for analyzing a graph and storing the statistics about the graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.nodeCounts">
            <summary>
            The number of compatible nodes in the graph for each type at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.edgeCounts">
            <summary>
            The number of compatible edges in the graph for each type at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.outCounts">
            <summary>
            The number of edges going out for each node type at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.inCounts">
            <summary>
            The number of edges coming in for each node type at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.meanOutDegree">
            <summary>
            The mean out degree (independent of edge types) of the nodes of a graph for each node type
            at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.meanInDegree">
            <summary>
            The mean in degree (independent of edge types) of the nodes of a graph for each node type
            at the time of the last analysis.
            It is null, if no analysis has been executed, yet.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.#ctor(de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Create the statistics class, binding it to the graph model
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.Copy(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Copy constructor helper.
            </summary>
            <param name="dataSource">The LGSPGraph object to get the data from</param>
            <param name="newName">Name of the copied graph.</param>
            <param name="oldToNewMap">A map of the old elements to the new elements after cloning,
            just forget about it if you don't need it.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.AnalyzeGraph(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Analyzes the graph.
            The calculated data is used to generate good searchplans for the current graph.
            To be called from the graph, not directly, to ensure the changes counter is correctly set.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.Parse(System.String)">
            <summary>
            Reads the statistics from the specified file path (inverse of Serialize).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.Serialize(System.String)">
            <summary>
            Writes the statistics to the specified file path (inverse of Parse).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraphStatistics.FixDirectorySeparators(System.String)">
            <summary>
            Returns a string where all "wrong" directory separator chars are replaced by the ones used by the system
            </summary>
            <param name="path">The original path string potentially with wrong chars</param>
            <returns>The corrected path string</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPGrGen">
            <summary>
            The C#-part of the GrGen.NET frontend.
            It is responsible for generating initial actions with static search plans.
            (and compiling the XGRSs of the exec statements vie LGSPSequenceGenerator)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.#ctor(de.unika.ipd.grGen.libGr.ProcessSpecFlags)">
            <summary>
            Constructs an LGSPGrGen object.
            </summary>
            <param name="flags">Flags specifying how the specification should be processed.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.FixDirectorySeparators(System.String)">
            <summary>
            Returns a string where all "wrong" directory separator chars are replaced by the ones used by the system 
            </summary>
            <param name="path">The original path string potentially with wrong chars</param>
            <returns>The corrected path string</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.GenerateStaticPlanGraph(de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{de.unika.ipd.grGen.lgsp.PatternElement,de.unika.ipd.grGen.libGr.SetValueType})">
            <summary>
            Generate plan graph for given pattern graph with costs from initial static schedule handed in with graph elements.
            Plan graph contains nodes representing the pattern elements (nodes and edges)
            and edges representing the matching operations to get the elements by.
            Edges in plan graph are given in the nodes by incoming list, as needed for MSA computation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.GenerateScheduledSearchPlans(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.LGSPGraphStatistics,de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator,System.Boolean,System.Boolean,de.unika.ipd.grGen.lgsp.ScheduledSearchPlan)">
            <summary>
            Generates scheduled search plans needed for matcher code generation for action compilation
            out of static schedule information given by rulePattern elements, 
            or out of statistics stemming from loading previously serialized statistics 
            utilizing code of the lgsp matcher generator.
            The scheduled search plans are added to the main and the nested pattern graphs.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.ProcessSpecification(System.String,System.String,System.String,System.String,de.unika.ipd.grGen.libGr.ProcessSpecFlags,System.String[])">
            <summary>
            Processes the given rule specification file and generates a model and actions library.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <param name="destDir">The directory, where the generated libraries are to be placed.</param>
            <param name="intermediateDir">A directory, where intermediate files can be placed.</param>
            <param name="statisticsPath">Optional path to a file containing the graph statistics to be used for building the matchers.</param>
            <param name="flags">Specifies how the specification is to be processed.</param>
            <param name="externalAssemblies">External assemblies to reference</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGrGen.ProcessSpecification(System.String,System.String,de.unika.ipd.grGen.libGr.ProcessSpecFlags,System.String[])">
            <summary>
            Processes the given rule specification file and generates a model and actions library in the same directory as the specification file.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <param name="statisticsPath">Optional path to a file containing the graph statistics to be used for building the matchers.</param>
            <param name="flags">Specifies how the specification is to be processed.</param>
            <param name="externalAssemblies">External assemblies to reference</param>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPAction">
            <summary>
            An object representing an executable rule of the LGSPBackend.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPAction.rulePattern">
            <summary>
            The LGSPRulePattern object from which this LGSPAction object has been created.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPAction.patternGraph">
            <summary>
            The PatternGraph object of the main graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPAction.ReturnArray">
            <summary>
            Performance optimization: saves us usage of new for the return array or the return arrays. 
            In the object/string-style modify/apply methods of the action interface implementation.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPAction.Name">
            <summary>
            The name of the action (without prefixes)
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPAction.Package">
            <summary>
            null if this is a global type, otherwise the package the type is contained in.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPAction.PackagePrefixedName">
            <summary>
            The name of the type in case of a global type,
            the name of the type prefixed by the name of the package otherwise.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPActions">
            <summary>
            A container of rules also managing some parts of rule application with sequences.
            Abstract base class with empty actions, the derived classes fill the actions dictionary.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Constructs a new LGSPActions instance.
            </summary>
            <param name="lgspgraph">The associated graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.String)">
            <summary>
            Constructs a new LGSPActions instance.
            This constructor is deprecated.
            </summary>
            <param name="lgspgraph">The associated graph.</param>
            <param name="modelAsmName">The name of the model assembly.</param>
            <param name="actionsAsmName">The name of the actions assembly.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.LoadActions(System.String,de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Loads a LGSPActions instance from the given file.
            If the file is a ".cs" file it will be compiled first.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPActions.Graph">
            <summary>
            The associated graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPActions.StatisticsPath">
            <summary>
            The statistics file used for generating the matchers, null if none was used.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GenerateAction(de.unika.ipd.grGen.lgsp.LGSPAction)">
            <summary>
            Replaces the given action by a new action instance with a search plan adapted
            to the current analysis data of the associated graph.
            </summary>
            <param name="action">The action to be replaced.</param>
            <returns>The new action instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GenerateAction(System.String)">
            <summary>
            Replaces the given action by a new action instance with a search plan adapted
            to the current analysis data of the associated graph.
            </summary>
            <param name="actionName">The name of the action to be replaced.</param>
            <returns>The new action instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GenerateActions(de.unika.ipd.grGen.lgsp.LGSPAction[])">
            <summary>
            Replaces the given actions by new action instances with a search plan adapted
            to the current analysis data of the associated graph.
            </summary>
            <param name="oldActions">An array of actions to be replaced.</param>
            <returns>An array with the new action instances.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GenerateActions(System.String[])">
            <summary>
            Replaces the given actions by new action instances with a search plan adapted
            to the current analysis data of the associated graph.
            </summary>
            <param name="actionNames">An array of names of actions to be replaced.</param>
            <returns>An array with the new action instances.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.ReplaceAction(System.String,de.unika.ipd.grGen.lgsp.LGSPAction)">
            <summary>
            Replaces a given action by another one.
            For internal use.
            </summary>
            <param name="actionName">The name of the action to be replaced.</param>
            <param name="newAction">The new action.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.Custom(System.Object[])">
            <summary>
            Does action-backend dependent stuff.
            </summary>
            <param name="args">Any kind of parameters for the stuff to do</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPActions.Actions">
            <summary>
            Enumerates all actions managed by this LGSPActions instance.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPActions.GetAction(System.String)">
            <summary>
            Gets the action with the given name.
            </summary>
            <param name="name">The name of the action.</param>
            <returns>The action with the given name, or null, if no such action exists.</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction">
            <summary>
            Abstract base class for generated subpattern matching actions
            each object of an inheriting class represents a subpattern matching tasks
            which might be stored on the open tasks stack and executed later on.
            In addition to user-specified subpatterns, alternatives are mapped to subpattern actions, too.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.patternGraph">
            <summary>
            The PatternGraph object from which this matching task object has been created
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.patternGraphs">
            <summary>
            The PatternGraph objects from which this matching task object has been created
            (non-null in case of an alternative, contains the pattern graphs of the alternative cases then)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.actionEnv">
            <summary>
            The action execution environment which contains the host graph in which to search for matches
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.openTasks">
            <summary>
            The subpattern actions which have to be executed until a full match is found
            The inheriting class contains the preset subpattern connection elements
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.matchOfNestingPattern">
            <summary>
            Entry point to the temporary match object stack representing the pattern nesting from innermost outwards.
            Needed for patternpath checking in negatives/independents, used as attachment point / is top of stack.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.lastMatchAtPreviousNestingLevel">
            <summary>
            Last match at the previous nesting level in the temporary match object stack representing the pattern nesting from innermost outwards.
            Needed for patternpath checking in negatives/independents, used as starting point of patternpath isomorphy checks.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.searchPatternpath">
            <summary>
            Tells whether this subpattern has to search the pattern path when matching
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.myMatch(System.Collections.Generic.List{System.Collections.Generic.Stack{de.unika.ipd.grGen.libGr.IMatch}},System.Int32,System.Int32)">
            <summary>
            Searches for the subpattern as specified by RulePattern.
            Takes care of search state as given by found partial matches, isoSpace to search in
            and maximum number of matches to search for (zero = find all matches)
            (and open tasks via this).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSubpatternAction.myMatch_parallelized(System.Collections.Generic.List{System.Collections.Generic.Stack{de.unika.ipd.grGen.libGr.IMatch}},System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches for the subpattern as specified by RulePattern,
            with a matcher that can be called from a parallelized rule matcher.
            Maps to the normal matcher if the subpattern is not used from any parallelized rule.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternpathIsomorphyChecker">
            <summary>
            Class containing global functions for checking whether node/edge is matched on patternpath
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPBackend">
            <summary>
            A helper class for backend independent graph and rule handling.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateGraph(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Creates a new LGSPGraph or LGSPNamedGraph backend instance with the graph model provided by the graph model file and a name.
            </summary>
            <param name="modelFilename">Filename of a graph model file.</param>
            <param name="graphName">Name of the graph.</param>
            <param name="named">Returns a named graph if true otherwise a non-named graph. You must cast the LGSPGraph returned to the inherited LGSPNamedGraph if named=true.</param>
            <param name="parameters">Backend specific parameters.</param>
            <returns>The new IGraph backend instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.IgnoreRest(de.unika.ipd.grGen.libGr.sequenceParser.SimpleCharStream,System.Char)">
            <summary>
            Ignores the rest of a string.
            </summary>
            <param name="charStream">The SimpleCharStream object.</param>
            <param name="curChar">The last character read. Set to '\0' to ignore.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.MatchStringOrIgnoreOther(de.unika.ipd.grGen.libGr.sequenceParser.SimpleCharStream,System.String)">
            <summary>
            Tries to match a string at the current position of a SimpleCharStream.
            If the string at the current position does not match, it is skipped.
            Here all characters other than A-Z, a-z, 0-9, _, and # are skipped.
            </summary>
            <param name="charStream">The char stream.</param>
            <param name="str">The string to be matched.</param>
            <returns>True, iff the string was found.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.FixDirectorySeparators(System.String)">
            <summary>
            Returns a string where all "wrong" directory separator chars are replaced by the ones used by the system
            </summary>
            <param name="path">The original path string potentially with wrong chars</param>
            <returns>The corrected path string</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.GetDir(System.String)">
            <summary>
            Retrieves the directory path from a given file path.
            Any slashes or backslashes are converted to the correct directory
            separator chars for the current platform.
            </summary>
            <param name="path">A path to a file.</param>
            <returns>A path to the directory containing the file.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.GetPathBaseName(System.String)">
            <summary>
            Returns the base name of a path name (i.e. no path and no extension).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateFromSpec(System.String,System.String,System.String,de.unika.ipd.grGen.libGr.ProcessSpecFlags,System.Collections.Generic.List{System.String},System.Boolean,System.Int32,de.unika.ipd.grGen.lgsp.LGSPGraph@,de.unika.ipd.grGen.lgsp.LGSPActions@)">
            <summary>
            Creates a new LGSPGraph or LGSPNamedGraph and LGSPActions instance from the specified specification file.
            If the according dlls do not exist or are out of date, the needed processing steps are performed automatically.
            </summary>
            <param name="grgFilename">Filename of the rule specification file (.grg).</param>
            <param name="graphName">Name of the new graph.</param>
            <param name="statisticsPath">Optional path to a file containing the graph statistics to be used for building the matchers.</param>
            <param name="flags">Specifies how the specification is to be processed; only KeepGeneratedFiles and CompileWithDebug are taken care of!</param>
            <param name="externalAssemblies">List of external assemblies to reference.</param>
            <param name="named">Returns a named graph if true otherwise a non-named graph. You must cast the LGSPGraph returned to the inherited LGSPNamedGraph if named=true.</param>
            <param name="capacity">The initial capacity for the name maps, only used if named (performance optimization, use 0 if unsure).</param>
            <param name="newGraph">Returns the new graph.</param>
            <param name="newActions">Returns the new BaseActions object.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateFromSpec(System.String,System.String,de.unika.ipd.grGen.lgsp.LGSPGraph@,de.unika.ipd.grGen.lgsp.LGSPActions@)">
            <summary>
            Creates a new LGSPGraph and LGSPActions instance from the specified specification file.
            If the according dlls do not exist or are out of date, the needed processing steps are performed automatically.
            A name for the graph is automatically generated.
            </summary>
            <param name="grgFilename">Filename of the rule specification file (.grg).</param>
            <param name="statisticsPath">Optional path to a file containing the graph statistics to be used for building the matchers.</param>
            <param name="newGraph">Returns the new graph.</param>
            <param name="newActions">Returns the new BaseActions object.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateNamedFromSpec(System.String,System.String,System.Int32,de.unika.ipd.grGen.lgsp.LGSPNamedGraph@,de.unika.ipd.grGen.lgsp.LGSPActions@)">
            <summary>
            Creates a new LGSPNamedGraph and LGSPActions instance from the specified specification file.
            If the according dlls do not exist or are out of date, the needed processing steps are performed automatically.
            A name for the graph is automatically generated.
            </summary>
            <param name="grgFilename">Filename of the rule specification file (.grg).</param>
            <param name="statisticsPath">Optional path to a file containing the graph statistics to be used for building the matchers.</param>
            <param name="capacity">The initial capacity for the name maps (performance optimization, use 0 if unsure).</param>
            <param name="newGraph">Returns the new named graph.</param>
            <param name="newActions">Returns the new BaseActions object.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateFromSpec(System.String,System.String,System.String,de.unika.ipd.grGen.libGr.ProcessSpecFlags,System.Collections.Generic.List{System.String},System.Boolean,System.Int32)">
            <summary>
            Creates a new LGSPGraph or LGSPNamedGraph instance from the specified specification file.
            If the according dll does not exist or is out of date, the needed processing steps are performed automatically.
            </summary>
            <param name="gmFilename">Filename of the model specification file (.gm).</param>
            <param name="graphName">Name of the new graph.</param>
            <param name="statisticsPath">Optional path to a file containing the graph statistics to be used for building the matchers.</param>
            <param name="flags">Specifies how the specification is to be processed; only KeepGeneratedFiles and CompileWithDebug are taken care of!</param>
            <param name="externalAssemblies">List of external assemblies to reference.</param>
            <param name="named">Returns a named graph if true otherwise a non-named graph. You must cast the LGSPGraph returned to the inherited LGSPNamedGraph if named=true.</param>
            <param name="capacity">The initial capacity for the name maps (performance optimization, use 0 if unsure).</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
            <returns>The new LGSPGraph or LGSPNamedGraph instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateFromSpec(System.String)">
            <summary>
            Creates a new LGSPGraph instance from the specified specification file.
            If the according dll does not exist or is out of date, the needed processing steps are performed automatically.
            A name for the graph is automatically generated.
            </summary>
            <param name="gmFilename">Filename of the model specification file (.gm).</param>
            <param name="newGraph">Returns the new graph.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
            <returns>The new LGSPGraph instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.CreateNamedFromSpec(System.String,System.Int32)">
            <summary>
            Creates a new LGSPNamedGraph instance from the specified specification file.
            If the according dll does not exist or is out of date, the needed processing steps are performed automatically.
            A name for the graph is automatically generated.
            </summary>
            <param name="gmFilename">Filename of the model specification file (.gm).</param>
            <param name="capacity">The initial capacity for the name maps (performance optimization, use 0 if unsure).</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown, when a needed specification file does not exist.</exception>
            <exception cref="T:System.Exception">Thrown, when something goes wrong.</exception>
            <returns>The new LGSPNamedGraph instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.ProcessSpecification(System.String,System.String,System.String,System.String,de.unika.ipd.grGen.libGr.ProcessSpecFlags,System.String[])">
            <summary>
            Processes the given rule specification file and generates a model and actions library.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <param name="destDir">The directory, where the generated libraries are to be placed.</param>
            <param name="intermediateDir">A directory, where intermediate files can be placed.</param>
            <param name="statisticsPath">Optional path to a file containing the graph statistics to be used for building the matchers.</param>
            <param name="flags">Specifies how the specification is to be processed.</param>
            <param name="externalAssemblies">External assemblies to reference</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPBackend.ProcessSpecification(System.String)">
            <summary>
            Processes the given rule specification file and generates a model and actions library in the same directory as the specification file.
            </summary>
            <param name="specPath">The path to the rule specification file (.grg).</param>
            <exception cref="T:System.Exception">Thrown, when an error occurred.</exception>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPGraph">
            <summary>
            An implementation of the IGraph interface.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.ReuseOptimization">
            <summary>
            If true (the default case), elements deleted during a rewrite
            may be reused in the same rewrite.
            As a result new elements may not be discriminable anymore from
            already deleted elements using object equality, hash maps, etc.
            In cases where this is needed this optimization should be disabled.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.ChangesCounter">
            <summary>
            Returns a counter of the number of changes that occured since the graph was created.
            If it's different since last time you visited, the graph has changed (but it may be back again in the original state).
            Only graph structure changes are counted, attribute changes are not included.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.statistics">
            <summary>
            Stores the statistics about the last analyze pass of the graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AnalyzeGraph">
            <summary>
            Analyzes the graph.
            The calculated data is used to generate good searchplans for the current graph.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.matchingState">
            <summary>
            Normally null, contains some data which allows for efficient graph comparison,
            in case this is a constant graph which was used for isomorphy checking
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.nodesByTypeHeads">
            <summary>
            An array containing one head of a doubly-linked ring-list for each node type indexed by the type ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.nodesByTypeCounts">
            <summary>
            The number of nodes for each node type indexed by the type ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.edgesByTypeHeads">
            <summary>
            An array containing one head of a doubly-linked ring-list for each edge type indexed by the type ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.edgesByTypeCounts">
            <summary>
            The number of edges for each edge type indexed by the type ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.inIsoSpaceMatchedElements">
            <summary>
            a list with the isomorphy spaces, each contains in a dictionary the elements matched locally 
            used in case the is-matched-bits in the graph elements are not sufficient (during non-parallel matching)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.inIsoSpaceMatchedElementsGlobal">
            <summary>
            a list with the isomorphy spaces, each contains in a dictionary the elements matched globally 
            used in case the is-matched-bits in the graph elements are not sufficient (during non-parallel matching)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.flagsPerThreadPerElement">
            <summary>
            a list which stores for each parallel matcher thread, per graph element the flags with the matching state
            each flag encodes a bounded amount of the is-matched-bits for the lowest isomorphy spaces,
            the flag is a reduced version of the flags bitvector available in each graph element in case of single threaded matching
            (the unique id of the graph elements is used as index into the flags array)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.perThreadInIsoSpaceMatchedElements">
            <summary>
            a list which stores for each matcher thread the isomorphy spaces, each contains in a dictionary the elements matched locally 
            used in case the is-matched-bits in the per-thread flags array are not sufficient, employed during parallelized matching
            the outermost list is read concurrently, so its dimension/content must be fixed before matching begins
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.perThreadInIsoSpaceMatchedElementsGlobal">
            <summary>
            a list which stores for each matcher thread the isomorphy spaces, each contains in a dictionary the elements matched globally
            used in case the is-matched-bits in the per-thread flags array are not sufficient, employed during parallelized matching
            the outermost list is read concurrently, so its dimension/content must be fixed before matching begins
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Constructs an LGSPGraph object with the given model and an automatically generated name.
            </summary>
            <param name="grmodel">The graph model.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPBackend)">
            <summary>
            Constructs an LGSPGraph object with the given model and backend, and an automatically generated name.
            </summary>
            <param name="grmodel">The graph model.</param>
            <param name="lgspBackend">The responsible backend object, needed for import from the sequences.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel,System.String)">
            <summary>
            Constructs an LGSPGraph object with the given model and name.
            </summary>
            <param name="grmodel">The graph model.</param>
            <param name="grname">The name for the graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPBackend,System.String)">
            <summary>
            Constructs an LGSPGraph object with the given model, backend, and name.
            </summary>
            <param name="grmodel">The graph model.</param>
            <param name="lgspBackend">The responsible backend object, needed for import from the sequences.</param>
            <param name="grname">The name for the graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPBackend,de.unika.ipd.grGen.libGr.IGraphModel,System.String,System.String)">
            <summary>
            Constructs an LGSPGraph object.
            Deprecated.
            </summary>
            <param name="lgspBackend">The responsible backend object.</param>
            <param name="grmodel">The graph model.</param>
            <param name="grname">The name for the graph.</param>
            <param name="modelassemblyname">The name of the model assembly.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(System.String)">
            <summary>
            Constructs an LGSPGraph object without initializing it.
            </summary>
            <param name="grname">The name for the graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.Collections.Generic.IDictionary{de.unika.ipd.grGen.libGr.IGraphElement,de.unika.ipd.grGen.libGr.IGraphElement}@)">
            <summary>
            Copy constructor.
            </summary>
            <param name="dataSource">The LGSPGraph object to get the data from</param>
            <param name="newName">Name of the copied graph.</param>
            <param name="oldToNewMap">A map of the old elements to the new elements after cloning.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String)">
            <summary>
            Copy constructor.
            </summary>
            <param name="dataSource">The LGSPGraph object to get the data from</param>
            <param name="newName">Name of the copied graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Copy(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.Collections.Generic.IDictionary{de.unika.ipd.grGen.libGr.IGraphElement,de.unika.ipd.grGen.libGr.IGraphElement}@)">
            <summary>
            Copy constructor helper.
            </summary>
            <param name="dataSource">The LGSPGraph object to get the data from</param>
            <param name="newName">Name of the copied graph.</param>
            <param name="oldToNewMap">A map of the old elements to the new elements after cloning,
            just forget about it if you don't need it.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.InitializeGraph(de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Initializes the graph with the given model.
            </summary>
            <param name="grmodel">The model for this graph.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.Name">
            <summary>
            A name associated with the graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.Model">
            <summary>
            The model associated with the graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.Indices">
            <summary>
            The indices associated with the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNumExactNodes(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Returns the number of nodes with the exact given node type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNumExactEdges(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns the number of edges with the exact given edge type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetExactNodes(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Enumerates all nodes with the exact given node type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetExactEdges(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Enumerates all edges with the exact given edge type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNumCompatibleNodes(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Returns the number of nodes compatible to the given node type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNumCompatibleEdges(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns the number of edges compatible to the given edge type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetCompatibleNodes(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Enumerates all nodes compatible to the given node type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetCompatibleEdges(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Enumerates all edges compatible to the given edge type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetGraphElement(System.Int32)">
            <summary>
            Gets the graph element for the given unique id.
            Only available if the unique index was declared in the model.
            </summary>
            <param name="unique">The unique if of a graph element.</param>
            <returns>The graph element for the given unique id or null, if there is no graph element with this unique id.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetNode(System.Int32)">
            <summary>
            Gets the node for the given unique id.
            Only available if the unique index was declared in the model.
            </summary>
            <param name="unique">The unique if of a node.</param>
            <returns>The node for the given unique id or null, if there is no node with this unique id.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetEdge(System.Int32)">
            <summary>
            Gets the edge for the given id.
            Only available if the unique index was declared in the model.
            </summary>
            <param name="unique">The unique if of a edge.</param>
            <returns>The edge for the given unique id or null, if there is no edge with this unique id.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.MoveHeadAfter(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Moves the type list head of the given node after the given node.
            Part of the "list trick".
            </summary>
            <param name="elem">The node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.MoveHeadAfter(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Moves the type list head of the given edge after the given edge.
            Part of the "list trick".
            </summary>
            <param name="elem">The edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNodeWithoutEvents(de.unika.ipd.grGen.lgsp.LGSPNode,System.Int32)">
            <summary>
            Adds an existing node to this graph.
            The graph may not already contain the node!
            The edge may not be connected to any other elements!
            Intended only for undo, clone, retyping and internal use!
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdgeWithoutEvents(de.unika.ipd.grGen.lgsp.LGSPEdge,System.Int32)">
            <summary>
            Adds an existing edge to this graph.
            The graph may not already contain the edge!
            The edge may not be connected to any other elements!
            Intended only for undo, clone, retyping and internal use!
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddNode(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Adds an existing LGSPNode object to the graph.
            The node must not be part of any graph, yet!
            The node may not be connected to any other elements!
            </summary>
            <param name="node">The node to be added.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddLGSPNode(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Creates a new LGSPNode according to the given type and adds
            it to the graph.
            </summary>
            <param name="nodeType">The type for the new node.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Adds an existing LGSPEdge object to the graph.
            The edge must not be part of any graph, yet!
            Source and target of the edge must already be part of the graph.
            </summary>
            <param name="edge">The edge to be added.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AddEdge(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Adds a new edge to the graph.
            </summary>
            <param name="edgeType">The edge type for the new edge.</param>
            <param name="source">The source of the edge.</param>
            <param name="target">The target of the edge.</param>
            <returns>The newly created edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Remove(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Removes the given node from the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Remove(de.unika.ipd.grGen.libGr.IEdge)">
            <summary>
            Removes the given edge from the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RemoveEdges(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Removes all edges from the given node.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Clear">
            <summary>
            Removes all nodes and edges (including any variables pointing to them) from the graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Retypes a node by creating a new node of the given type.
            All incident edges as well as all attributes from common super classes are kept.
            </summary>
            <param name="node">The node to be retyped.</param>
            <param name="newNodeType">The new type for the node.</param>
            <returns>The new node object representing the retyped node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Retype(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Retypes an edge by replacing it by a new edge of the given type.
            Source and target node as well as all attributes from common super classes are kept.
            </summary>
            <param name="edge">The edge to be retyped.</param>
            <param name="newEdgeType">The new type for the edge.</param>
            <returns>The new edge object representing the retyped edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReplaceNode(de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Replaces a given node by another one.
            All incident edges and variables are transferred to the new node.
            The attributes are not touched.
            This function is used for retyping.
            </summary>
            <param name="oldNode">The node to be replaced.</param>
            <param name="newNode">The replacement for the node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReplaceEdge(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Replaces a given edge by another one.
            Source and target node are transferred to the new edge,
            but the new edge must already have source and target set to these nodes.
            The new edge is added to the graph, the old edge is removed.
            A SettingEdgeType event is generated before.
            The attributes are not touched.
            This function is used for retyping.
            </summary>
            <param name="oldEdge">The edge to be replaced.</param>
            <param name="newEdge">The replacement for the edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Merge(de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Merges the source node into the target node,
            i.e. all edges incident to the source node are redirected to the target node, then the source node is deleted.
            </summary>
            <param name="target">The node which remains after the merge.</param>
            <param name="source">The node to be merged.</param>
            <param name="sourceName">The name of the node to be merged (used for debug display of redirected edges).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Merge(de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode,System.String)">
            <summary>
            Merges the source node into the target node,
            i.e. all edges incident to the source node are redirected to the target node, then the source node is deleted.
            </summary>
            <param name="target">The node which remains after the merge.</param>
            <param name="source">The node to be merged.</param>
            <param name="sourceName">The name of the node to be merged (used for debug display of redirected edges).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RedirectSource(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Changes the source node of the edge from the old source to the given new source.
            </summary>
            <param name="edge">The edge to redirect.</param>
            <param name="newSource">The new source node of the edge.</param>
            <param name="oldSourceName">The name of the old source node (used for debug display of the new edge).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RedirectSource(de.unika.ipd.grGen.libGr.IEdge,de.unika.ipd.grGen.libGr.INode,System.String)">
            <summary>
            Changes the source node of the edge from the old source to the given new source.
            </summary>
            <param name="edge">The edge to redirect.</param>
            <param name="newSource">The new source node of the edge.</param>
            <param name="oldSourceName">The name of the old source node (used for debug display of the new edge).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RedirectTarget(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.lgsp.LGSPNode,System.String)">
            <summary>
            Changes the target node of the edge from the old target to the given new target.
            </summary>
            <param name="edge">The edge to redirect.</param>
            <param name="newTarget">The new target node of the edge.</param>
            <param name="oldTargetName">The name of the old target node (used for debug display of the new edge).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RedirectTarget(de.unika.ipd.grGen.libGr.IEdge,de.unika.ipd.grGen.libGr.INode,System.String)">
            <summary>
            Changes the target node of the edge from the old target to the given new target.
            </summary>
            <param name="edge">The edge to redirect.</param>
            <param name="newTarget">The new target node of the edge.</param>
            <param name="oldTargetName">The name of the old target node (used for debug display of the new edge).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RedirectSourceAndTarget(de.unika.ipd.grGen.lgsp.LGSPEdge,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode,System.String,System.String)">
            <summary>
            Changes the source of the edge from the old source to the given new source,
            and changes the target node of the edge from the old target to the given new target.
            </summary>
            <param name="edge">The edge to redirect.</param>
            <param name="newSource">The new source node of the edge.</param>
            <param name="newTarget">The new target node of the edge.</param>
            <param name="oldSourceName">The name of the old source node (used for debug display of the new edge).</param>
            <param name="oldTargetName">The name of the old target node (used for debug display of the new edge).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.RedirectSourceAndTarget(de.unika.ipd.grGen.libGr.IEdge,de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode,System.String,System.String)">
            <summary>
            Changes the source of the edge from the old source to the given new source,
            and changes the target node of the edge from the old target to the given new target.
            </summary>
            <param name="edge">The edge to redirect.</param>
            <param name="newSource">The new source node of the edge.</param>
            <param name="newTarget">The new target node of the edge.</param>
            <param name="oldSourceName">The name of the old source node (used for debug display of the new edge).</param>
            <param name="oldTargetName">The name of the old target node (used for debug display of the new edge).</param>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.VisitorData.NodesMarked">
            <summary>
            Specifies whether this visitor has already marked any nodes.
            This is unused, if the dictionary is used for this visitor ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.VisitorData.EdgesMarked">
            <summary>
            Specifies whether this visitor has already marked any edges.
            This is unused, if the dictionary is used for this visitor ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.VisitorData.VisitedElements">
            <summary>
            A hash map containing all visited elements (in the keys, the dictionary values are not used).
            This is unused (and thus null), if the graph element flags are used for this visitor ID.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.VisitorData.IsReserved">
            <summary>
            Tells whether this flag was reserved by the transaction manager,
            preventing it from getting handed out in a valloc again
            (because the flag was freed during a transaction,
            and might not be allocatable again during transaction rollback without reservation.)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPGraph.VisitorData.ToBeUnreserved">
            <summary>
            Tells whether the reserved flag is to be unreserved again.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.AllocateVisitedFlag">
            <summary>
            Allocates a visited flag on the graph elements.
            </summary>
            <returns>A visitor ID to be used in
            visited conditions in patterns ("if { !elem.visited[id]; }"),
            visited expressions in evals ("elem.visited[id] = true; b.flag = elem.visited[id] || c.flag; "}
            and calls to other visitor functions.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.FreeVisitedFlag(System.Int32)">
            <summary>
            Frees a visited flag.
            This is a safe but O(n) operation, as it resets the visited flag in the graph.
            </summary>
            <param name="visitorID">The ID of the visited flag to be freed.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.FreeVisitedFlagNonReset(System.Int32)">
            <summary>
            Frees a clean visited flag.
            This is an O(1) but potentially unsafe operation.
            Attention! A marked element stays marked, so a later allocation hands out a dirty visited flag! 
            Use only if you can ensure that all elements of that flag are unmarked before calling.
            </summary>
            <param name="visitorID">The ID of the visited flag to be freed.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ResetVisitedFlag(System.Int32)">
            <summary>
            Resets the visited flag with the given ID on all graph elements, if necessary.
            </summary>
            <param name="visitorID">The ID of the visited flag.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.SetVisited(de.unika.ipd.grGen.libGr.IGraphElement,System.Int32,System.Boolean)">
            <summary>
            Sets the visited flag of the given graph element.
            </summary>
            <param name="elem">The graph element whose flag is to be set.</param>
            <param name="visitorID">The ID of the visited flag.</param>
            <param name="visited">True for visited, false for not visited.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.IsVisited(de.unika.ipd.grGen.libGr.IGraphElement,System.Int32)">
            <summary>
            Returns whether the given graph element has been visited.
            </summary>
            <param name="elem">The graph element to be examined.</param>
            <param name="visitorID">The ID of the visited flag.</param>
            <returns>True for visited, false for not visited.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.GetAllocatedVisitedFlags">
            <summary>
            Returns the ids of the allocated visited flags.
            </summary>
            <returns>A dynamic array of the visitor ids allocated.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReserveVisitedFlag(System.Int32)">
            <summary>
            Called by the transaction manager just when it gets notified about a vfree.
            The visited flag freed must be reserved until the transaction finished,
            cause otherwise it might be impossible for the transaction manager to roll the vfree back with a valloc;
            that may happen if the flag is handed out again in a succeeding valloc, during a transaction pause.
            </summary>
            <param name="visitorID"></param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.UnreserveVisitedFlag(System.Int32)">
            <summary>
            Called by the transaction manager on flags it reserved from getting handed out again during valloc,
            when the transaction finished and it is safe to return those flags again on valloc.
            </summary>
            <param name="visitorID"></param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.ReallocateVisitedFlag(System.Int32)">
            <summary>
            Called by the transaction manager on flags it reserved from getting handed out again during valloc,
            when the transaction is rolled back, and the vfree is undone by a realloc.
            </summary>
            <param name="visitorID"></param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.SetInternallyVisited(de.unika.ipd.grGen.libGr.IGraphElement,System.Boolean)">
            <summary>
            Sets the internal-use visited flag of the given graph element.
            (Used for computing reachability.)
            </summary>
            <param name="elem">The graph element whose flag is to be set.</param>
            <param name="visited">True for visited, false for not visited.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.IsInternallyVisited(de.unika.ipd.grGen.libGr.IGraphElement)">
            <summary>
            Returns whether the given graph element has been internally visited.
            (Used for computing reachability.)
            </summary>
            <param name="elem">The graph element whose flag is to be retrieved.</param>
            <returns>True for visited, false for not visited.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.SetInternallyVisited(de.unika.ipd.grGen.libGr.IGraphElement,System.Boolean,System.Int32)">
            <summary>
            Sets the internal-use visited flag of the given graph element.
            (Used for computing reachability when employed from a parallelized matcher executed by the thread pool.)
            </summary>
            <param name="elem">The graph element whose flag is to be set.</param>
            <param name="visited">True for visited, false for not visited.</param>
            <param name="threadId">The id of the thread which marks the graph element.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.IsInternallyVisited(de.unika.ipd.grGen.libGr.IGraphElement,System.Int32)">
            <summary>
            Returns whether the given graph element has been internally visited.
            (Used for computing reachability when employed from a parallelized matcher executed by the thread pool.)
            </summary>
            <param name="elem">The graph element whose flag is to be retrieved.</param>
            <param name="threadId">The id of the thread which queries the marking of the graph element.</param>
            <returns>True for visited, false for not visited.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CheckEmptyFlags">
            <summary>
            Checks if the matching state flags in the graph are not set, as they should be in case no matching is undereway
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CheckNodeAlreadyInTypeRinglist(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Checks if the given node is already available in its type ringlist
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CheckEdgeAlreadyInTypeRinglist(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Checks if the given edge is already available in its type ringlist
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CheckTypeRinglistBroken(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Checks whether the type ringlist starting at the given head node is broken.
            Use for debugging purposes.
            </summary>
            <param name="node">The node head to be checked.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CheckTypeRinglistBroken(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Checks whether the type ringlist starting at the given head edge is broken.
            Use for debugging purposes.
            </summary>
            <param name="node">The edge head to be checked.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CheckTypeRinglistsBroken">
            <summary>
            Checks whether the type ringlists are broken.
            Use for debugging purposes.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CheckInOutRinglistsBroken(de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Checks whether the incoming or outgoing ringlists of the given node are broken.
            Use for debugging purposes.
            </summary>
            <param name="node">The node to be checked.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Custom(System.Object[])">
            <summary>
            Does graph-backend dependent stuff.
            </summary>
            <param name="args">Any kind of paramteres for the stuff to do</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPGraph.Backend">
            <summary>
            The backend that created the graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Clone(System.String)">
            <summary>
            Duplicates a graph.
            The new graph will use the same model and backend as the other
            Open transaction data will not be cloned.
            </summary>
            <param name="newName">Name of the new graph.</param>
            <returns>A new graph with the same structure as this graph.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CloneAndAssignNames">
            <summary>
            Duplicates a graph, assigning names.
            The new graph will use the same model and backend as the other
            Open transaction data will not be cloned.
            </summary>
            <returns>A new named graph with the same structure as this graph.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.CreateEmptyEquivalent(System.String)">
            <summary>
            Creates an empty graph using the same model and backend as the other.
            </summary>
            <param name="newName">Name of the new graph.</param>
            <returns>A new empty graph of the same model.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.IsIsomorph(de.unika.ipd.grGen.libGr.IGraph)">
            <summary>
            Returns whether this graph is isomorph to that graph (including the attribute values)
            If a graph changed only in attribute values since the last comparison, results will be wrong!
            (Do a fake node insert and removal to ensure the graph is recognized as having changed.)
            </summary>
            <param name="that">The other graph we check for isomorphy against</param>
            <returns>true if that is isomorph to this, false otherwise</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.IsIsomorph(System.Collections.Generic.IDictionary{de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.SetValueType})">
            <summary>
            Returns whether this graph is isomorph to any of the set of graphs given (including the attribute values)
            If a graph changed only in attribute values since the last comparison, results will be wrong!
            (Do a fake node insert and removal to ensure the graph is recognized as having changed.)
            Don't call from a parallelized matcher!
            </summary>
            <param name="graphsToCheckAgainst">The other graphs we check for isomorphy against</param>
            <returns>true if any of the graphs given is isomorph to this, false otherwise</returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:de.unika.ipd.grGen.lgsp.LGSPGraph.HasSameStructure(de.unika.ipd.grGen.libGr.IGraph)" ignoriert -->
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.HasSameStructure(System.Collections.Generic.IDictionary{de.unika.ipd.grGen.libGr.IGraph,de.unika.ipd.grGen.libGr.SetValueType})">
            <summary>
            Returns whether this graph is isomorph to any of the set of graphs given, neglecting the attribute values, only structurally
            Don't call from a parallelized matcher!
            </summary>
            <param name="graphsToCheckAgainst">The other graphs we check for isomorphy against, neglecting attribute values</param>
            <returns>true if any of the graphs given is isomorph (regarding structure) to this, false otherwise</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPGraph.Canonize">
            <summary>
            Returns a canonical representation of the graph as a string
            </summary>
            <returns>a canonical representation of the graph as a string</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPNode">
            <summary>
            Class implementing nodes in the libGr search plan backend
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.lgspType">
            <summary>
            The node type of the node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.lgspFlags">
            <summary>
            contains some booleans coded as bitvector
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.uniqueId">
            <summary>
            contains a unique id if uniqueness was declared
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.lgspTypePrev">
            <summary>
            Previous and next node in the list containing all the nodes of one type.
            The node is not part of a graph, iff typePrev is null.
            If typePrev is null and typeNext is not null, this node has been retyped and typeNext
            points to the new node.
            These special cases are neccessary to handle the following situations:
            "delete node + return edge", "hom + delete + return", "hom + retype + return", "hom + retype + delete",
            "hom + retype + delete + return".
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.lgspTypeNext">
            <summary>
            Previous and next node in the list containing all the nodes of one type.
            The node is not part of a graph, iff typePrev is null.
            If typePrev is null and typeNext is not null, this node has been retyped and typeNext
            points to the new node.
            These special cases are neccessary to handle the following situations:
            "delete node + return edge", "hom + delete + return", "hom + retype + return", "hom + retype + delete",
            "hom + retype + delete + return".
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.lgspOuthead">
            <summary>
            Entry node into the outgoing edges list - not of type edge head, real edge or null
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPNode.lgspInhead">
            <summary>
            Entry node into the incoming edges list - not of type edge head, real edge or null
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.#ctor(de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Instantiates an LGSPNode object.
            </summary>
            <param name="nodeType">The node type.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Valid">
            <summary>
            This is true, if this node is a valid graph element, i.e. it is part of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.ReplacedByElement">
            <summary>
            The element which replaced this element (Valid is false in this case)
            or null, if this element has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.ReplacedByNode">
            <summary>
            The node which replaced this node (Valid is false in this case)
            or null, if this node has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.de#unika#ipd#grGen#libGr#INode#ReplacedByNode">
            <summary>
            The node which replaced this node (Valid is false in this case)
            or null, if this node has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetCompatibleOutgoing(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges with the same type or a subtype of the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetCompatibleIncoming(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges with the same type or a subtype of the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetCompatibleIncident(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incident edges with the same type or a subtype of the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetExactOutgoing(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges with exactly the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetExactIncoming(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges with exactly the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetExactIncident(de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incident edges with exactly the given type
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Outgoing">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all outgoing edges
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Incoming">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incoming edges
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Incident">
            <summary>
            Returns an IEnumerable&lt;IEdge&gt; over all incident edges
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.MoveOutHeadAfter(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Moves the head of the outgoing list after the given edge.
            Part of the "list trick".
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.MoveInHeadAfter(de.unika.ipd.grGen.lgsp.LGSPEdge)">
            <summary>
            Moves the head of the incoming list after the given edge.
            Part of the "list trick".
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.Type">
            <summary>
            The NodeType of the node.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPNode.de#unika#ipd#grGen#libGr#IGraphElement#Type">
            <summary>
            The GrGenType of the node.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.InstanceOf(de.unika.ipd.grGen.libGr.GrGenType)">
            <summary>
            Returns true, if the graph element is compatible to the given type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetUniqueId">
            <summary>
            Gets the unique id of the node.
            Only available if unique ids for nodes and edges were declared in the model
            (or implicitely switched on by parallelization or the declaration of some index).
            </summary>
            <returns>The unique id of the graph element (an arbitrary number in case uniqueness was not requested).</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.GetAttribute(System.String)">
            <summary>
            Returns the graph element attribute with the given attribute name.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the graph element attribute with the given attribute name to the given value.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
            <param name="attrName">The name of the attribute.</param>
            <param name="value">The new value for the attribute. It must have the correct type.
            Otherwise a TargetException is thrown.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.ResetAllAttributes">
            <summary>
            Resets all graph element attributes to their initial values.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.Clone">
            <summary>
            Creates a copy of this node.
            All attributes will be transfered to the new node.
            The node will not be associated to a graph, yet.
            So it will not have any incident edges nor any assigned variables.
            </summary>
            <returns>A copy of this node.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.AreAttributesEqual(de.unika.ipd.grGen.libGr.IGraphElement)">
            <summary>
            Returns whether the attributes of this element and that are equal.
            If types are unequal the result is false, otherwise the conjunction of equality comparison of the attributes.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.ApplyFunctionMethod(de.unika.ipd.grGen.libGr.IActionExecutionEnvironment,de.unika.ipd.grGen.libGr.IGraph,System.String,System.Object[])">
            <summary>
            Executes the function method given by its name.
            Throws an exception if the method does not exists or the parameters are of wrong types.
            </summary>
            <param name="actionEnv">The current action execution environment.</param>
            <param name="graph">The current graph.</param>
            <param name="name">The name of the function method to apply.</param>
            <param name="arguments">An array with the arguments to the method.</param>
            <returns>The return value of function application.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.ApplyProcedureMethod(de.unika.ipd.grGen.libGr.IActionExecutionEnvironment,de.unika.ipd.grGen.libGr.IGraph,System.String,System.Object[])">
            <summary>
            Executes the procedure method given by its name.
            Throws an exception if the method does not exists or the parameters are of wrong types.
            </summary>
            <param name="actionEnv">The current action execution environment.</param>
            <param name="graph">The current graph.</param>
            <param name="name">The name of the procedure method to apply.</param>
            <param name="arguments">An array with the arguments to the method.</param>
            <returns>An array with the return values of procedure application. Only valid until the next call of this method.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.Recycle">
            <summary>
            Recycles this node. This may pool the node or just ignore it.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNode.ToString">
            <summary>
            Returns the name of the type of this node.
            </summary>
            <returns>The name of the type of this node.</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPNodeHead">
            <summary>
            Special head node of the lists containing all the nodes of one type
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPEdge">
            <summary>
            Class implementing edges in the libGr search plan backend
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspType">
            <summary>
            The EdgeType of the edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspFlags">
            <summary>
            contains some booleans coded as bitvector
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.uniqueId">
            <summary>
            contains a unique id if uniqueness was declared
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspTypeNext">
            <summary>
            Previous and next edge in the list containing all the edges of one type.
            The node is not part of a graph, iff typePrev is null.
            If typePrev is null and typeNext is not null, this node has been retyped and typeNext
            points to the new node.
            These special cases are neccessary to handle the following situations:
            "delete node + return edge", "hom + delete + return", "hom + retype + return", "hom + retype + delete",
            "hom + retype + delete + return".
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspTypePrev">
            <summary>
            Previous and next edge in the list containing all the edges of one type.
            The node is not part of a graph, iff typePrev is null.
            If typePrev is null and typeNext is not null, this node has been retyped and typeNext
            points to the new node.
            These special cases are neccessary to handle the following situations:
            "delete node + return edge", "hom + delete + return", "hom + retype + return", "hom + retype + delete",
            "hom + retype + delete + return".
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspSource">
            <summary>
            source and target nodes of this edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspTarget">
            <summary>
            source and target nodes of this edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspInNext">
            <summary>
            previous and next edge in the incoming list of the target node containing all of it's incoming edges
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspInPrev">
            <summary>
            previous and next edge in the incoming list of the target node containing all of it's incoming edges
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspOutNext">
            <summary>
            previous and next edge in the outgoing list of the source node containing all of it's outgoing edges
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPEdge.lgspOutPrev">
            <summary>
            previous and next edge in the outgoing list of the source node containing all of it's outgoing edges
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.#ctor(de.unika.ipd.grGen.libGr.EdgeType,de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Instantiates an LGSPEdge object.
            </summary>
            <param name="edgeType">The edge type.</param>
            <param name="sourceNode">The source node.</param>
            <param name="targetNode">The target node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.SetSourceAndTarget(de.unika.ipd.grGen.lgsp.LGSPNode,de.unika.ipd.grGen.lgsp.LGSPNode)">
            <summary>
            Sets source and target to the LGSPEdge object instantiated before with source and target being null.
            </summary>
            <param name="sourceNode">The source node.</param>
            <param name="targetNode">The target node.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Valid">
            <summary>
            This is true, if this edge is a valid graph element, i.e. it is part of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.ReplacedByElement">
            <summary>
            The element which replaced this element (Valid is false in this case)
            or null, if this element has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.ReplacedByEdge">
            <summary>
            The edge which replaced this edge (Valid is false in this case)
            or null, if this edge has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.de#unika#ipd#grGen#libGr#IEdge#ReplacedByEdge">
            <summary>
            The edge which replaced this edge (Valid is false in this case)
            or null, if this edge has not been replaced or is still a valid member of a graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Source">
            <summary>
            The source node of the edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Target">
            <summary>
            The target node of the edge.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.Opposite(de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Retrieves the other incident node of this edge.
            </summary>
            <remarks>If the given node is not the source, the source will be returned.</remarks>
            <param name="sourceOrTarget">One node of this edge.</param>
            <returns>The other node of this edge.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.Type">
            <summary>
            The EdgeType of the edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPEdge.de#unika#ipd#grGen#libGr#IGraphElement#Type">
            <summary>
            The GrGenType of the edge.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.InstanceOf(de.unika.ipd.grGen.libGr.GrGenType)">
            <summary>
            Returns true, if the graph element is compatible to the given type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.GetUniqueId">
            <summary>
            Gets the unique id of the edge.
            Only available if unique ids for nodes and edges were declared in the model
            (or implicitely switched on by parallelization or the declaration of some index).
            </summary>
            <returns>The unique id of the graph element (an arbitrary number in case uniqueness was not requested).</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.GetAttribute(System.String)">
            <summary>
            Returns the graph element attribute with the given attribute name.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the graph element attribute with the given attribute name to the given value.
            If the graph element type doesn't have an attribute with this name, a NullReferenceException is thrown.
            </summary>
            <param name="attrName">The name of the attribute.</param>
            <param name="value">The new value for the attribute. It must have the correct type.
            Otherwise a TargetException is thrown.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.ResetAllAttributes">
            <summary>
            Resets all graph element attributes to their initial values.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.Clone(de.unika.ipd.grGen.libGr.INode,de.unika.ipd.grGen.libGr.INode)">
            <summary>
            Creates a copy of this edge.
            All attributes will be transfered to the new edge.
            The edge will not be associated to a graph, yet.
            So it will not have any assigned variables.
            </summary>
            <param name="newSource">The new source node for the new edge.</param>
            <param name="newTarget">The new target node for the new edge.</param>
            <returns>A copy of this edge.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.AreAttributesEqual(de.unika.ipd.grGen.libGr.IGraphElement)">
            <summary>
            Returns whether the attributes of this element and that are equal.
            If types are unequal the result is false, otherwise the conjunction of equality comparison of the attributes.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.ApplyFunctionMethod(de.unika.ipd.grGen.libGr.IActionExecutionEnvironment,de.unika.ipd.grGen.libGr.IGraph,System.String,System.Object[])">
            <summary>
            Executes the function method given by its name.
            Throws an exception if the method does not exists or the parameters are of wrong types.
            </summary>
            <param name="actionEnv">The current action execution environment.</param>
            <param name="graph">The current graph.</param>
            <param name="name">The name of the function method to apply.</param>
            <param name="arguments">An array with the arguments to the method.</param>
            <returns>The return value of function application.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.ApplyProcedureMethod(de.unika.ipd.grGen.libGr.IActionExecutionEnvironment,de.unika.ipd.grGen.libGr.IGraph,System.String,System.Object[])">
            <summary>
            Executes the procedure method given by its name.
            Throws an exception if the method does not exists or the parameters are of wrong types.
            </summary>
            <param name="actionEnv">The current action execution environment.</param>
            <param name="graph">The current graph.</param>
            <param name="name">The name of the procedure method to apply.</param>
            <param name="arguments">An array with the arguments to the method.</param>
            <returns>An array with the return values of procedure application. Only valid until the next call of this method.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.Recycle">
            <summary>
            Recycles this edge. This may pool the edge or just ignore it.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEdge.ToString">
            <summary>
            Returns the name of the type of this edge.
            </summary>
            <returns>The name of the type of this edge.</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPEdgeHead">
            <summary>
            Special head edge of the lists containing all the edges of one type
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator">
            <summary>
            Class generating matcher programs out of rules.
            A PatternGraphAnalyzer must run before the matcher generator is used,
            so that the analysis data is written the pattern graphs of the matching patterns to generate code for.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.model">
            <summary>
            The model for which the matcher functions shall be generated.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.CommentSourceCode">
            <summary>
            If true, the generated matcher functions are commented to improve understanding the source code.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DumpDynSourceCode">
            <summary>
            If true, the source code of dynamically generated matcher functions are dumped to a file in the current directory.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DumpSearchPlan">
            <summary>
            If true, generated search plans are dumped in VCG and TXT files in the current directory.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.LazyNegativeIndependentConditionEvaluation">
            <summary>
            If true, the negatives, independents, and evaluations are inserted at the end of the schedule
            instead of as early as possible; this is likely less efficient but allows to use checks 
            which require that they are only called after a structural match was found
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.InlineIndependents">
            <summary>
            If true, the independents are to be inlined
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.Profile">
            <summary>
            If true, profiling information is to be collected, i.e. some statistics about search steps executed
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.#ctor(de.unika.ipd.grGen.libGr.IGraphModel)">
            <summary>
            Instantiates a new instance of LGSPMatcherGenerator with the given graph model.
            A PatternGraphAnalyzer must run before the matcher generator is used,
            so that the analysis data is written the pattern graphs of the matching patterns to generate code for.
            </summary>
            <param name="model">The model for which the matcher functions shall be generated.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.BuildPatternGraph(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Builds a pattern graph out of the graph.
            The pattern graph retains links to the original graph elements and uses them for attribute comparison.
            </summary>
            <param name="graph">The graph which is to be transfered into a pattern</param>
            <returns></returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GeneratePlanGraph(de.unika.ipd.grGen.lgsp.LGSPGraphStatistics,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{de.unika.ipd.grGen.lgsp.PatternElement,de.unika.ipd.grGen.libGr.SetValueType})">
            <summary>
            Generate plan graph for given pattern graph with costs from the analyzed host graph.
            Plan graph contains nodes representing the pattern elements (nodes and edges)
            and edges representing the matching operations to get the elements by.
            Edges in plan graph are given in the nodes by incoming list, as needed for MSA computation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.MarkMinimumSpanningArborescence(de.unika.ipd.grGen.lgsp.PlanGraph,System.String)">
            <summary>
            Marks the minimum spanning arborescence of a plan graph by setting the IncomingMSAEdge
            fields for all nodes
            </summary>
            <param name="planGraph">The plan graph to be marked</param>
            <param name="dumpName">Names the dump targets if dump compiler flags are set</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateSearchPlanGraph(de.unika.ipd.grGen.lgsp.PlanGraph)">
            <summary>
            Generate search plan graph out of the plan graph,
            search plan graph only contains edges chosen by the MSA algorithm.
            Edges in search plan graph are given in the nodes by outgoing list, as needed for scheduling,
            in contrast to incoming list in plan graph, as needed for MSA computation.
            </summary>
            <param name="planGraph">The source plan graph</param>
            <returns>A new search plan graph</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.ScheduleSearchPlan(de.unika.ipd.grGen.lgsp.SearchPlanGraph,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Generates a scheduled search plan for a given search plan graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.AppendHomomorphyInformation(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan)">
            <summary>
            Appends homomorphy information to each operation of the scheduled search plan
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.DetermineAndAppendHomomorphyChecks(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,System.Int32)">
            <summary>
            Determines which homomorphy check operations are necessary 
            at the operation of the given position within the scheduled search plan
            and appends them.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.FillInGlobalHomomorphyPatternElements(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,System.Int32)">
            <summary>
            fill in globally homomorphic elements as exception to global isomorphy check
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.MergeNegativeAndIndependentSchedulesIntoEnclosingSchedules(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Negative/Independent schedules are merged as an operation into their enclosing schedules,
            at a position determined by their costs but not before all of their needed elements were computed
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.InsertNegativesAndIndependentsIntoSchedule(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Inserts schedules of negative and independent pattern graphs into the schedule of the enclosing pattern graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.InsertNegativesAndIndependentsIntoSchedule(de.unika.ipd.grGen.lgsp.PatternGraph,System.Int32)">
            <summary>
            Inserts schedules of negative and independent pattern graphs into the schedule of the enclosing pattern graph
            for the schedule with the given array index
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.InsertConditionsIntoSchedule(de.unika.ipd.grGen.lgsp.PatternCondition[],System.Collections.Generic.List{de.unika.ipd.grGen.lgsp.SearchOperation})">
            <summary>
            Inserts conditions into the schedule given by the operations list at their earliest possible position
            todo: set/map operations are potentially expensive, 
            they shouldn't be insertes asap, but depending an weight, 
            derived from statistics over set/map size for graph elements, quiet well known for anonymous rule sets
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.InsertInlinedVariableAssignmentsIntoSchedule(de.unika.ipd.grGen.lgsp.PatternGraph,System.Collections.Generic.List{de.unika.ipd.grGen.lgsp.SearchOperation})">
            <summary>
            Inserts inlined variable assignments into the schedule given by the operations list at their earliest possible position
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.ParallelizeAsNeeded(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Parallelize the scheduled search plan if it is to be parallelized.
            An action to be parallelized is split at the first loop into a header part and a body part,
            all subpatterns and nested patterns to be parallelized are switched to non- is-matched-flag-based isomorphy checking.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.ParallelizeHeadBody(de.unika.ipd.grGen.lgsp.LGSPRulePattern)">
            <summary>
            Parallelize the scheduled search plan to the branching factor,
            splitting it at the first loop into a header part and a body part
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.Parallelize(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Parallelize the scheduled search plan for usage from a parallelized matcher
            (non- is-matched-flag-based isomorphy checking)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.ParallelizeAlternativeIterated(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Non- is-matched-flag-based isomorphy checking for nested alternative cases/iterateds
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.ParallelizeNegativeIndependent(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan)">
            <summary>
            Non- is-matched-flag-based isomorphy checking for nested negatives/independents, 
            patch into already cloned parallel ssp
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateActionAndMatcher(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,System.Boolean)">
            <summary>
            Generates the action interface plus action implementation including the matcher source code 
            for the given rule pattern into the given source builder
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateActionAndMatcherOfAlternative(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative,System.Boolean)">
            <summary>
            Generates the action interface plus action implementation including the matcher source code 
            for the given alternative into the given source builder
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateActionAndMatcherOfIterated(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Generates the action interface plus action implementation including the matcher source code 
            for the given iterated pattern into the given source builder
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateActionAndMatcherOfNestedPatterns(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Generates the action interface plus action implementation including the matcher source code 
            for the alternatives/iterateds nested within the given negative/independent pattern graph into the given source builder
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateActionInterface(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPRulePattern)" ignoriert -->
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateActionImplementation(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPRulePattern)" ignoriert -->
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateSearchProgram(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Generates the search program(s) for the pattern graph of the given rule
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateParallelizedSearchProgramAsNeeded(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Generates the parallelized search program(s) for the pattern graph of the given rule
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateSearchProgramAlternative(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative)">
            <summary>
            Generates the search program for the given alternative 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateParallelizedSearchProgramAlternativeAsNeeded(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative)">
            <summary>
            Generates the parallelized search program for the given alternative 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateSearchProgramIterated(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Generates the search program for the given iterated pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateParallelizedSearchProgramIteratedAsNeeded(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Generates the parallelized search program for the given iterated pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateFileHeaderForActionsFile(de.unika.ipd.grGen.lgsp.SourceBuilder,System.String,System.String)">
            <summary>
            Generates file header for actions file into given source builer
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassHeadAction(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPRulePattern,System.Boolean,de.unika.ipd.grGen.lgsp.SearchProgram)">
            <summary>
            Generates matcher class head source code for the pattern of the rulePattern into given source builder
            isInitialStatic tells whether the initial static version or a dynamic version after analyze is to be generated.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassHeadSubpattern(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,System.Boolean)">
            <summary>
            Generates matcher class head source code for the subpattern of the rulePattern into given source builder
            isInitialStatic tells whether the initial static version or a dynamic version after analyze is to be generated.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassHeadAlternative(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative,System.Boolean)">
            <summary>
            Generates matcher class head source code for the given alternative into given source builder
            isInitialStatic tells whether the initial static version or a dynamic version after analyze is to be generated.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassHeadIterated(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Generates matcher class head source code for the given iterated pattern into given source builder
            isInitialStatic tells whether the initial static version or a dynamic version after analyze is to be generated.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateIndependentsMatchObjects(de.unika.ipd.grGen.lgsp.SourceBuilder,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Generates match objects of independents (one pre-allocated is part of action class)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateTasksMemoryPool(de.unika.ipd.grGen.lgsp.SourceBuilder,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Generates memory pooling code for matching tasks of class given by it's name
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateMatcherClassTail(de.unika.ipd.grGen.lgsp.SourceBuilder,System.Boolean)">
            <summary>
            Generates matcher class tail source code
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateScheduledSearchPlans(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.LGSPGraph,System.Boolean,System.Boolean,de.unika.ipd.grGen.lgsp.ScheduledSearchPlan)">
            <summary>
            Generates scheduled search plans needed for matcher code generation for action compilation
            out of graph with analyze information, 
            The scheduled search plans are added to the main and the nested pattern graphs.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GetDynCompilerSetup(System.String,System.String)">
            <summary>
            Setup of compiler parameters for recompilation of actions at runtime taking care of analyze information
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateAction(de.unika.ipd.grGen.lgsp.ScheduledSearchPlan,de.unika.ipd.grGen.lgsp.LGSPAction,System.String,System.String,System.String)">
            <summary>
            Generates an LGSPAction object for the given scheduled search plan.
            </summary>
            <param name="action">Needed for the rule pattern and the name</param>
            <param name="sourceOutputFilename">null if no output file needed</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.FillInStaticSearchPlans(de.unika.ipd.grGen.lgsp.LGSPGraphStatistics,System.Boolean,de.unika.ipd.grGen.lgsp.LGSPAction[])">
            <summary>
            Do the static search planning again so we can explain the search plan
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateActions(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.String,de.unika.ipd.grGen.lgsp.LGSPAction[])">
            <summary>
            Generate new actions for the given actions, doing the same work, 
            but hopefully faster by taking graph analysis information into account
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatcherGenerator.GenerateAction(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.String,de.unika.ipd.grGen.lgsp.LGSPAction)">
            <summary>
            Generate a new action for the given action, doing the same work, 
            but hopefully faster by taking graph analysis information into account
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Nodes_Enumerable">
            <summary>
            enumerable returning enumerator over nodes in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Nodes_Enumerator">
            <summary>
            enumerator over nodes in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Edges_Enumerable">
            <summary>
            enumerable returning enumerator over edges in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Edges_Enumerator">
            <summary>
            enumerator over edges in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Variables_Enumerable">
            <summary>
            enumerable returning enumerator over variables in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Variables_Enumerator">
            <summary>
            enumerator over variables in match
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.EmbeddedGraphs_Enumerable">
            <summary>
            enumerable returning enumerator over submatches due to subpatterns
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.EmbeddedGraphs_Enumerator">
            <summary>
            enumerator over submatches due to subpatterns
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Alternatives_Enumerable">
            <summary>
            enumerable returning enumerator over submatches due to alternatives
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Alternatives_Enumerator">
            <summary>
            enumerator over submatches due to alternatives
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Iterateds_Enumerable">
            <summary>
            enumerable returning enumerator over submatches due to iterateds,
            with every submatch being a list of matches of the iterated-pattern
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Iterateds_Enumerator">
            <summary>
            enumerator over submatches due to iterateds,
            with every submatch being a list of matches of the iterated-pattern
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Independents_Enumerable">
            <summary>
            enumerable returning enumerator over submatches due to independents
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Independents_Enumerator">
            <summary>
            enumerator over submatches due to independents
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ListElement`1">
            <summary>
            Element of invasive linked list of T
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.ListElement`1.next">
            <summary>
            The next element in the linked list.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2">
            <summary>
            An object representing a (possibly empty) set of matches in a graph before the rewrite has been applied.
            It is returned by IAction.Match() and given to the OnMatched, OnFinishing and OnFinished event.
            Generic to be instantiated with the exact interface and the exact implementation type of the match object
            Every generated Action contains a LGSPMatchesList,
            the matches contain one LGSPMatchesList per iterated pattern.
            A matches list stores the matches found by the last application of the action,
            the matches objects within the list are recycled by the next application of the action,
            only their content gets updated.
            The purpose of this list is to act as a memory manager
            to save new/garbage collection cycles and improve cache footprint.
            Additionally this list is used for storing the results of an iteration in the matches objects, Producer being null in this case.
            Then it is just used as a container for already allocated elements.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.GetEnumeratorExact">
            <summary>
            Returns an enumerator over all found matches with exact match interface type
            </summary>
            <returns></returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FirstExact">
            <summary>
            Returns the first match of exact type (null if no match exists).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FirstImplementation">
            <summary>
            Returns the first match of exact type (null if no match exists).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.GetMatchExact(System.Int32)">
            <summary>
            Returns the match of exact type with the given index. Invalid indices cause an exception.
            This may be slow. If you want to iterate over the elements the MatchesExact IEnumerable should be used.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.RemoveMatchExact(System.Int32)">
            <summary>
            Removes the match of exact type at the given index and returns it.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.GetEnumerator">
            <summary>
            Returns an enumerator over all found matches with inexact match interface type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a non-generic enumerator over all found matches.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.Producer">
            <summary>
            The action object used to generate this LGSPMatchesList object
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.Count">
            <summary>
            The number of matches in this list.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.GetMatch(System.Int32)">
            <summary>
            Returns the match with the given index. Invalid indices cause an exception.
            This may be slow. If you want to iterate over the elements the Matches IEnumerable should be used.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is invalid.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.RemoveMatch(System.Int32)">
            <summary>
            Removes the match at the given index and returns it.
            </summary>
            <param name="index">The index of the match to be removed.</param>
            <returns>The removed match.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is invalid.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.Clone">
            <summary>
            Clone the matches
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.#ctor(de.unika.ipd.grGen.libGr.IAction)">
            <summary>
            Constructs a new LGSPMatchesList instance.
            </summary>
            <param name="producer">The action object used to generate this LGSPMatchesList object; null if this is the matches list of an iteration</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.GetNextUnfilledPosition">
            <summary>
            returns an empty match object from the matches list
            to be filled by the matching action with the found nodes, edges and subpatterns.
            unless PositionWasFilledFixIt is called you always get the same element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.PositionWasFilledFixIt">
            <summary>
            the match object returned by GetNextUnfilledPosition was filled,
            now fix it within the list, so that the next call to GetNextUnfilledPosition returns a new element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.Add(`0)">
            <summary>
            adds a match object to the end of the list; only applicable if this is the match of an iteration, not an action
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.RemoveFirst">
            <summary>
            removes the first match object from the the list
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.First">
            <summary>
            The first match of this list.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.Root">
            <summary>
            The root element of the list.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.Clear">
            <summary>
            remove all filled and committed elements from the list
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.Item(System.Int32)">
            <summary>
            Returns the match with the given index.
            This may be slow. If you want to iterate over the elements the Matches IEnumerable should be used.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is invalid.</exception>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.ToList">
            <summary>
            Returns the content of the current matches list in form of an array which can be efficiently indexed and reordered.
            The array is destroyed when this method is called again, the content is destroyed when the rule is matched again (there is only one array existing).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FromList">
            <summary>
            Reincludes the array handed out with ToList, REPLACING the current matches with the ones from the list.
            The list might have been reordered, matches might have been removed, or even added.
            Elements which were null-ed count as deleted; this gives an O(1) mechanism to remove from the array.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FilterKeepFirstFraction(System.Double)">
            <summary>
            For filtering with the auto-supplied filter keepFirstFraction
            </summary>
            <param name="fraction">The fraction of matches to keep</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FilterKeepLastFraction(System.Double)">
            <summary>
            For filtering with the auto-supplied filter keepLastFraction
            </summary>
            <param name="fraction">The fraction of matches to keep</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FilterKeepFirst(System.Int32)">
            <summary>
            For filtering with the auto-supplied filter keepFirst
            </summary>
            <param name="count">The number of matches to keep</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FilterKeepLast(System.Int32)">
            <summary>
            For filtering with the auto-supplied filter keepLast
            </summary>
            <param name="count">The number of matches to keep</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FilterRemoveFirstFraction(System.Double)">
            <summary>
            For filtering with the auto-supplied filter removeFirstFraction
            </summary>
            <param name="fraction">The fraction of matches to remove</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FilterRemoveLastFraction(System.Double)">
            <summary>
            For filtering with the auto-supplied filter removeLastFraction
            </summary>
            <param name="fraction">The fraction of matches to remove</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FilterRemoveFirst(System.Int32)">
            <summary>
            For filtering with the auto-supplied filter removeFirst
            </summary>
            <param name="count">The number of matches to remove</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.FilterRemoveLast(System.Int32)">
            <summary>
            For filtering with the auto-supplied filter removeLast
            </summary>
            <param name="count">The number of matches to remove</param>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.producer">
            <summary>
            the action object used to generate this LGSPMatchesList object
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.root">
            <summary>
            head of list
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.last">
            <summary>
            logically last element of list, not necessarily physically the last element
            as previously generated matches are kept and recycled
            denotes the next point of logical insertion i.e. physical update
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.count">
            <summary>
            number of found matches in the list
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchesList`2.array">
            <summary>
            the array returned in a call of ToList
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPNamedGraph">
            <summary>
            An implementation of the INamedGraph interface.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel,System.Int32)">
            <summary>
            Constructs an LGSPNamedGraph object with the given model and capacity, and an automatically generated name.
            </summary>
            <param name="grmodel">The graph model.</param>
            <param name="capacity">The initial capacity for the name maps (performance optimization, use 0 if unsure).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPBackend,System.Int32)">
            <summary>
            Constructs an LGSPNamedGraph object with the given model, backend, and capacity, and an automatically generated name.
            </summary>
            <param name="grmodel">The graph model.</param>
            <param name="backend">The backend.</param>
            <param name="capacity">The initial capacity for the name maps (performance optimization, use 0 if unsure).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel,System.String,System.Int32)">
            <summary>
            Constructs an LGSPNamedGraph object with the given model, name, and capacity.
            </summary>
            <param name="grmodel">The graph model.</param>
            <param name="grname">The name for the graph.</param>
            <param name="capacity">The initial capacity for the name maps (performance optimization, use 0 if unsure).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPBackend,System.String,System.Int32)">
            <summary>
            Constructs an LGSPNamedGraph object with the given model, backend, name, and capacity.
            </summary>
            <param name="grmodel">The graph model.</param>
            <param name="backend">The backend.</param>
            <param name="grname">The name for the graph.</param>
            <param name="capacity">The initial capacity for the name maps (performance optimization, use 0 if unsure).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPBackend,de.unika.ipd.grGen.libGr.IGraphModel,System.String,System.String,System.Int32)">
            <summary>
            Constructs an LGSPNamedGraph object.
            Deprecated.
            </summary>
            <param name="lgspBackend">The responsible backend object.</param>
            <param name="grmodel">The graph model.</param>
            <param name="grname">The name for the graph.</param>
            <param name="modelassemblyname">The name of the model assembly.</param>
            <param name="capacity">The initial capacity for the name maps (performance optimization, use 0 if unsure).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(System.String)">
            <summary>
            Constructs an LGSPNameGraph object without initializing it.
            </summary>
            <param name="grname">The name for the graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPNamedGraph,System.String,System.Collections.Generic.IDictionary{de.unika.ipd.grGen.libGr.IGraphElement,de.unika.ipd.grGen.libGr.IGraphElement}@)">
            <summary>
            Copy constructor.
            </summary>
            <param name="dataSource">The LGSPNamedGraph object to get the data from</param>
            <param name="newName">Name of the copied graph.</param>
            <param name="oldToNewMap">A map of the old elements to the new elements after cloning.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPNamedGraph,System.String)">
            <summary>
            Copy constructor.
            </summary>
            <param name="dataSource">The LGSPNamedGraph object to get the data from</param>
            <param name="newName">Name of the copied graph.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.CopyNames(de.unika.ipd.grGen.lgsp.LGSPNamedGraph,System.Collections.Generic.IDictionary{de.unika.ipd.grGen.libGr.IGraphElement,de.unika.ipd.grGen.libGr.IGraphElement})">
            <summary>
            Copy constructor helper.
            </summary>
            <param name="dataSource">The LGSPNamedGraph object to get the data from</param>
            <param name="oldToNewMap">A map of the old elements to the new elements after cloning.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.Collections.Generic.IDictionary{de.unika.ipd.grGen.libGr.IGraphElement,de.unika.ipd.grGen.libGr.IGraphElement}@)">
            <summary>
            Copy and extend constructor, creates a named graph from a normal graph.
            Initializes the name maps with anonymous names in the form "$" + GetNextName()
            </summary>
            <param name="graph">The graph to be used named</param>
            <param name="oldToNewMap">A map of the old elements to the new elements after cloning</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Copy and extend constructor, creates a named graph from a normal graph.
            Initializes the name maps with anonymous names in the form "$" + GetNextName()
            </summary>
            <param name="graph">The graph to be used named</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.DoName">
            <summary>
            Initializes the name maps with anonymous names in the form "$" + GetNextName()
            </summary>
            <param name="graph">The graph to be used named</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String,System.Collections.Generic.IDictionary{de.unika.ipd.grGen.libGr.IGraphElement,de.unika.ipd.grGen.libGr.IGraphElement}@)">
            <summary>
            Copy and extend constructor, creates a named graph from a normal graph.
            Initializes the name maps with the names provided in a given attribute each graph element must have
            </summary>
            <param name="graph">The graph to be used named</param>
            <param name="nameAttributeName">The name of the attribute to be used for naming</param>
            <param name="oldToNewMap">A map of the old elements to the new elements after cloning</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.#ctor(de.unika.ipd.grGen.lgsp.LGSPGraph,System.String)">
            <summary>
            Copy and extend constructor, creates a named graph from a normal graph.
            Initializes the name maps with the names provided in a given attribute each graph element must have
            </summary>
            <param name="graph">The graph to be used named</param>
            <param name="nameAttributeName">The name of the attribute to be used for naming</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.DoName(System.String)">
            <summary>
            </summary>
            <param name="nameAttributeName">The name of the attribute to be used for naming</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.DifferentElementWithName(de.unika.ipd.grGen.libGr.IGraphElement,System.String)">
            <summary>
            returns whether another element than the one given already bears the name
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPNamedGraph.AddElemName(de.unika.ipd.grGen.libGr.IGraphElement,System.String)">
            <summary>
            Tries to set the name of an element.
            If the name is already used by another element, the element is removed from the graph and
            an ArgumentException is thrown.
            </summary>
            <param name="elem"></param>
            <param name="name"></param>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternGraph">
            <summary>
            Representation of the pattern to search for, 
            containing nested alternative, iterated, negative, and independent-patterns, 
            plus references to the rules of the used subpatterns.
            Accessible via IPatternGraph as meta information to the user about the matching action.
            Skeleton data structure for the matcher generation pipeline which stores intermediate results here, 
            which saves us from representing the nesting structure again and again in the pipeline's data structures
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Name">
            <summary>
            The name of the pattern graph
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Package">
            <summary>
            null if this is a global pattern graph, otherwise the package the pattern graph is contained in.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.PackagePrefixedName">
            <summary>
            The name of the pattern graph in case of a global type,
            the name of the pattern graph is prefixed by the name of the package otherwise (package "::" name).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Nodes">
            <summary>
            An array of all pattern nodes.
            </summary>        
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Edges">
            <summary>
            An array of all pattern edges.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Variables">
            <summary>
            An array of all pattern variables.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetSource(de.unika.ipd.grGen.libGr.IPatternEdge)">
            <summary>
            Returns the source pattern node of the given edge, null if edge dangles to the left
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetTarget(de.unika.ipd.grGen.libGr.IPatternEdge)">
            <summary>
            Returns the target pattern node of the given edge, null if edge dangles to the right
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.HomomorphicNodes">
            <summary>
            A two-dimensional array describing which pattern node may be matched non-isomorphic to which pattern node.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.HomomorphicEdges">
            <summary>
            A two-dimensional array describing which pattern edge may be matched non-isomorphic to which pattern edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.HomomorphicNodesGlobal">
            <summary>
            A two-dimensional array describing which pattern node may be matched non-isomorphic to which pattern node globally,
            i.e. the nodes are contained in different, but locally nested patterns (alternative cases, iterateds).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.HomomorphicEdgesGlobal">
            <summary>
            A two-dimensional array describing which pattern edge may be matched non-isomorphic to which pattern edge globally,
            i.e. the edges are contained in different, but locally nested patterns (alternative cases, iterateds).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.TotallyHomomorphicNodes">
            <summary>
            A one-dimensional array telling which pattern node is to be matched non-isomorphic against any other node.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.TotallyHomomorphicEdges">
            <summary>
            A one-dimensional array telling which pattern edge is to be matched non-isomorphic against any other edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.EmbeddedGraphs">
            <summary>
            An array with subpattern embeddings, i.e. subpatterns and the way they are connected to the pattern
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Alternatives">
            <summary>
            An array of alternatives, each alternative contains in its cases the subpatterns to choose out of.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.Iterateds">
            <summary>
            An array of iterateds, each iterated is matched as often as possible within the specified bounds.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.NegativePatternGraphs">
            <summary>
            An array of negative pattern graphs which make the search fail if they get matched
            (NACs - Negative Application Conditions).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.IndependentPatternGraphs">
            <summary>
            An array of independent pattern graphs which must get matched in addition to the main pattern
            (PACs - Positive Application Conditions).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraph.EmbeddingGraph">
            <summary>
            The pattern graph which contains this pattern graph, null if this is a top-level-graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.name">
            <summary>
            The name of the pattern graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.pathPrefix">
            <summary>
            Prefix for name from nesting path
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.package">
            <summary>
            null if this is a global pattern graph, otherwise the package the pattern graph is contained in.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.packagePrefixedName">
            <summary>
            The name of the pattern graph in case of a global type,
            the name of the pattern graph is prefixed by the name of the package otherwise (package "::" name).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.isPatternpathLocked">
            <summary>
            Tells whether the elements from the parent patterns (but not sibling patterns)
            should be isomorphy locked, i.e. not again matchable, even in negatives/independents,
            which are normally hom to all. This allows to match paths without a specified end,
            eagerly, i.e. as long as a successor exists, even in case of a cycles in the graph.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.isIterationBreaking">
            <summary>
            If this pattern graph is a negative or independent nested inside an iterated,
            it breaks the iterated instead of only the current iterated case (if true).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.nodes">
            <summary>
            An array of all pattern nodes.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.nodesPlusInlined">
            <summary>
            An array of all pattern nodes plus the nodes inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.correspondingNodes">
            <summary>
            Normally null. In case this is a pattern created from a graph,
            an array of all nodes which created the pattern nodes in nodes, coupled by position.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edges">
            <summary>
            An array of all pattern edges.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edgesPlusInlined">
            <summary>
            An array of all pattern edges plus the edges inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.correspondingEdges">
            <summary>
            Normally null. In case this is a pattern created from a graph,
            an array of all edges which created the pattern edges in edges, coupled by position.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.variables">
            <summary>
            An array of all pattern variables.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.variablesPlusInlined">
            <summary>
            An array of all pattern variables plus the variables inlined into this pattern.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetSource(de.unika.ipd.grGen.lgsp.PatternEdge)">
            <summary>
            Returns the source pattern node of the given edge, null if edge dangles to the left.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetSourcePlusInlined(de.unika.ipd.grGen.lgsp.PatternEdge)">
            <summary>
            Returns the source pattern node of the given edge, null if edge dangles to the left.
            Taking inlined stuff into account.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetTarget(de.unika.ipd.grGen.lgsp.PatternEdge)">
            <summary>
            Returns the target pattern node of the given edge, null if edge dangles to the right.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.GetTargetPlusInlined(de.unika.ipd.grGen.lgsp.PatternEdge)">
            <summary>
            Returns the target pattern node of the given edge, null if edge dangles to the right.
            Taking inlined stuff into account.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edgeToSourceNode">
            <summary>
            Contains the source node of the pattern edges in this graph if specified.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edgeToSourceNodePlusInlined">
            <summary>
            Contains the source node of the pattern edges in this graph if specified.
            Plus the additional information from inlined stuff.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edgeToTargetNode">
            <summary>
            Contains the target node of the pattern edges in this graph if specified.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.edgeToTargetNodePlusInlined">
            <summary>
            Contains the target node of the pattern edges in this graph if specified.
            Plus the additional information from inlined stuff.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.homomorphicNodes">
            <summary>
            A two-dimensional array describing which pattern node may be matched non-isomorphic to which pattern node.
            Including the additional information from inlined stuff.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.homomorphicEdges">
            <summary>
            A two-dimensional array describing which pattern edge may be matched non-isomorphic to which pattern edge.
            Including the additional information from inlined stuff.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.homomorphicNodesGlobal">
            <summary>
            A two-dimensional array describing which pattern node may be matched non-isomorphic to which pattern node globally,
            i.e. the nodes are contained in different, but locally nested patterns (alternative cases, iterateds).
            Including the additional information from inlined stuff.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.homomorphicEdgesGlobal">
            <summary>
            A two-dimensional array describing which pattern edge may be matched non-isomorphic to which pattern edge globally,
            i.e. the edges are contained in different, but locally nested patterns (alternative cases, iterateds).
            Including the additional information from inlined stuff.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.totallyHomomorphicNodes">
            <summary>
            An array telling which pattern node is to be matched non-isomorphic(/independent) against any other node.
            Including the additional information from inlined stuff.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.totallyHomomorphicEdges">
            <summary>
            An array telling which pattern edge is to be matched non-isomorphic(/independent) against any other edge.
            Including the additional information from inlined stuff.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.embeddedGraphs">
            <summary>
            An array with subpattern embeddings, i.e. subpatterns and the way they are connected to the pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.embeddedGraphsPlusInlined">
            <summary>
            An array of all embedded graphs plus the embedded graphs inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.alternatives">
            <summary>
            An array of alternatives, each alternative contains in its cases the subpatterns to choose out of.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.alternativesPlusInlined">
            <summary>
            An array of all alternatives plus the alternatives inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.iterateds">
            <summary>
            An array of iterateds, each iterated is matched as often as possible within the specified bounds.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.iteratedsPlusInlined">
            <summary>
            An array of all iterateds plus the iterateds inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.negativePatternGraphs">
            <summary>
            An array of negative pattern graphs which make the search fail if they get matched
            (NACs - Negative Application Conditions).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.negativePatternGraphsPlusInlined">
            <summary>
            An array of all negative pattern graphs plus the negative pattern graphs inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.independentPatternGraphs">
            <summary>
            An array of independent pattern graphs which must get matched in addition to the main pattern
            (PACs - Positive Application Conditions).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.independentPatternGraphsPlusInlined">
            <summary>
            An array of all independent pattern graphs plus the pattern graphs inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.embeddingGraph">
            <summary>
            The pattern graph which contains this pattern graph, null if this is a top-level-graph 
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.Conditions">
            <summary>
            The conditions used in this pattern graph or it's nested graphs
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.ConditionsPlusInlined">
            <summary>
            An array of all conditions plus the conditions inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.Yieldings">
            <summary>
            The yielding assignments used in this pattern graph or it's nested graphs
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.YieldingsPlusInlined">
            <summary>
            An array of all yielding assignments plus the yielding assignments inlined into this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.isDefEntityExisting">
            <summary>
            Tells whether a def entity (node, edge, variable) is existing in this pattern graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.isDefEntityExistingPlusInlined">
            <summary>
            Tells whether a def entity (node, edge, variable) is existing in this pattern graph after inlining
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.isNonLocalDefEntityExisting">
            <summary>
            Tells whether a non local def entity (node, edge, variable) is existing in this pattern graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.isNonLocalDefEntityExistingPlusInlined">
            <summary>
            Tells whether a non local def entity (node, edge, variable) is existing in this pattern graph after inlining
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.originalPatternGraph">
            <summary>
            Links to the original pattern graph in case this pattern graph was inlined, otherwise null;
            the embeddingGraph of the original pattern graph references the original containing pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.originalSubpatternEmbedding">
            <summary>
            Links to the original subpattern embedding which was inlined in case this (negative or independent) pattern graph was inlined, otherwise null.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.PrepareInline">
            <summary>
            Copies all the elements in the pattern graph to the XXXPlusInlined attributes.
            This duplicates the pattern, the duplicate is used for the computing and emitting the real code,
            whereas the original version is retained as interface to the user (and used in generating the match building).
            When subpatterns/embedded graphs get inlined, only the duplicate is changed.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.#ctor(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraph,System.String,System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternNode,de.unika.ipd.grGen.lgsp.PatternNode},System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternEdge,de.unika.ipd.grGen.lgsp.PatternEdge},System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternVariable,de.unika.ipd.grGen.lgsp.PatternVariable})">
            <summary>
            Instantiates a new PatternGraph object as a copy from an original pattern graph, used for inlining.
            We create the inlined elements as clones from the original stuff so a maybe already done inlining pass inside a subpattern does not influence us when we inline that subpattern.
            </summary>
            <param name="original">The original pattern graph to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="newHost">The pattern graph the new pattern element will be contained in.</param>
            <param name="nameSuffix">The suffix to be added to the name of the pattern graph and its elements (to avoid name collisions).</param>
            Elements might have been already copied in the containing pattern(s), their copies have to be reused in this case.
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraph.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,de.unika.ipd.grGen.lgsp.PatternNode[],de.unika.ipd.grGen.lgsp.PatternEdge[],de.unika.ipd.grGen.lgsp.PatternVariable[],de.unika.ipd.grGen.lgsp.PatternGraphEmbedding[],de.unika.ipd.grGen.lgsp.Alternative[],de.unika.ipd.grGen.lgsp.Iterated[],de.unika.ipd.grGen.lgsp.PatternGraph[],de.unika.ipd.grGen.lgsp.PatternGraph[],de.unika.ipd.grGen.lgsp.PatternCondition[],de.unika.ipd.grGen.lgsp.PatternYielding[],System.Boolean[0:,0:],System.Boolean[0:,0:],System.Boolean[0:,0:],System.Boolean[0:,0:],System.Boolean[],System.Boolean[])">
            <summary>
            Constructs a PatternGraph object.
            </summary>
            <param name="name">The name of the pattern graph.</param>
            <param name="pathPrefix">Prefix for name from nesting path.</param>
            <param name="package">null if this is a global pattern graph, otherwise the package the pattern graph is contained in.</param>
            <param name="packagePrefixedName">The name of the pattern graph in case of a global type,
            the name of the pattern graph is prefixed by the name of the package otherwise (package "::" name).</param>
            <param name="isPatternpathLocked"> Tells whether the elements from the parent patterns (but not sibling patterns)
            should be isomorphy locked, i.e. not again matchable, even in negatives/independents,
            which are normally hom to all. This allows to match paths without a specified end,
            eagerly, i.e. as long as a successor exists, even in case of a cycles in the graph.</param>
            <param name="isIterationBreaking"> If this pattern graph is a negative or independent nested inside an iterated,
            it breaks the iterated instead of only the current iterated case (if true).</param>
            <param name="nodes">An array of all pattern nodes.</param>
            <param name="edges">An array of all pattern edges.</param>
            <param name="variables">An array of all pattern variables.</param>
            <param name="embeddedGraphs">An array with subpattern embeddings,
            i.e. subpatterns and the way they are connected to the pattern.</param>
            <param name="alternatives">An array of alternatives, each alternative contains
            in its cases the subpatterns to choose out of.</param>
            <param name="iterateds">An array of iterated patterns, each iterated is matched as often as possible within the specified bounds.</param>
            <param name="negativePatternGraphs">An array of negative pattern graphs which make the
            search fail if they get matched (NACs - Negative Application Conditions).</param>
            <param name="independentPatternGraphs">An array of independent pattern graphs which make the
            search fail if they don't get matched (PACs - Positive Application Conditions).</param>
            <param name="conditions">The conditions used in this pattern graph or its nested graphs.</param>
            <param name="yieldings">The yieldings used in this pattern graph or its nested graphs.</param>
            <param name="homomorphicNodes">A two-dimensional array describing which pattern node may
            be matched non-isomorphic to which pattern node.</param>
            <param name="homomorphicEdges">A two-dimensional array describing which pattern edge may
            be matched non-isomorphic to which pattern edge.</param>
            <param name="homomorphicNodesGlobal">A two-dimensional array describing which pattern node
            may be matched non-isomorphic to which pattern node globally, i.e. the nodes are contained
            in different, but locally nested patterns (alternative cases, iterateds).</param>
            <param name="homomorphicEdgesGlobal">A two-dimensional array describing which pattern edge
            may be matched non-isomorphic to which pattern edge globally, i.e. the edges are contained
            in different, but locally nested patterns (alternative cases, iterateds).</param>
            <param name="totallyHomomorphicNodes"> An array telling which pattern node is to be matched non-isomorphic(/independent) against any other node.</param>
            <param name="totallyHomomorphicEdges"> An array telling which pattern edge is to be matched non-isomorphic(/independent) against any other edge.</param>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.maybeNullElementNames">
            <summary>
            Names of the elements which may be null
            The following members are ordered along it/generated along this order.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.schedules">
            <summary>
            The schedules for this pattern graph without any nested pattern graphs.
            Normally one, but each maybe null action preset causes doubling of schedules.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.schedulesIncludingNegativesAndIndependents">
            <summary>
            The schedules for this pattern graph including negatives and independents.
            Normally one, but each maybe null action preset causes doubling of schedules.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.branchingFactor">
            <summary>
            Larger than 1 if and only if this rule is to be parallelized, giving the branching factor to apply
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.parallelizedSchedule">
            <summary>
            Not-null in case of parallelization. Contains then exactly 2 entries.
            A parallelized matcher consists of a head (first, distributing and collecting work) and a body (following, doing real work).
            A pattern with maybe null action presets is not parallelized.
            The head and body schedules include negatives and independents, they are derived from
            schedulesIncludingNegativesAndIndependents by splitting at the first candidate-binding loop.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.parallelizedYieldings">
            <summary>
            The yielding assignments used in this pattern graph or it's nested graphs, after parallelization
            Not-null in case of parallelization.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.availabilityOfMaybeNullElements">
            <summary>
            For each schedule the availability of the maybe null presets - true if is available, false if not
            Empty dictionary if there are no maybe null action preset elements
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.nestedIndependents">
            <summary>
            The independents nested within this pattern graph,
            but only independents not nested within negatives.
            Map of pattern graphs to the fact whether they are contained in an iterated pattern with potentially more than 1 match.
            Then match building must occur on the call stack cause there are multiple matches living at a time, otherwise it can be limited to the matcher class (and done only as needed).
            Contains first the nested independents before inlinig, afterwards the ones after inlining.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.neededNodes">
            <summary>
            The nodes from the enclosing graph(s) used in this graph or one of it's subgraphs.
            Includes inlined elements after inlining.
            Set of names, with dummy bool due to lacking set class in c#
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.neededEdges">
            <summary>
            The edges from the enclosing graph(s) used in this graph or one of it's subgraphs.
            Includes inlined elements after inlining.
            Set of names, with dummy bool due to lacking set class in c#
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.neededVariables">
            <summary>
            The variables from the enclosing graph(s) used in this graph or one of it's subgraphs.
            Includes inlined elements after inlining.
            Map of names to types.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.usedSubpatterns">
            <summary>
            The subpatterns used by this pattern (directly as well as indirectly),
            only filled/valid if this is a top level pattern graph of a rule or subpattern.
            Set of matching patterns, with dummy null matching pattern due to lacking set class in c#
            Contains first the used subpatterns before inlinnig, afterwards the ones after inlining.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.patternGraphsOnPathToEnclosedPatternpath">
            <summary>
            The names of the pattern graphs which are on a path to some 
            enclosed negative/independent with patternpath modifier.
            Needed for patternpath processing setup (to write to patternpath matches stack).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.isPatternGraphOnPathFromEnclosingPatternpath">
            <summary>
            Tells whether the pattern graph is on a path from some 
            enclosing negative/independent with patternpath modifier.
            Needed for patternpath processing setup (to check patternpath matches stack).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraph.maxIsoSpace">
            <summary>
            Gives the maximum isoSpace number of the pattern reached by negative/independent nesting,
            clipped by LGSPElemFlags.MAX_ISO_SPACE which is the critical point of interest,
            this might happen by heavy nesting or by a subpattern call path with
            direct or indirect recursion on it including a negative/independent which gets passed.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern">
            <summary>
            A description of a GrGen matching pattern, that's a subpattern/subrule or the base for some rule.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.PatternGraph">
            <summary>
            The main pattern graph.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.Inputs">
            <summary>
            An array of GrGen types corresponding to rule parameters.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.InputNames">
            <summary>
            An array of the names corresponding to rule parameters.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.DefNames">
            <summary>
            An array of the names of the def elements yielded out of this pattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.Annotations">
            <summary>
            The annotations of the matching pattern (test/rule/subpattern)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.patternGraph">
            <summary>
            The main pattern graph.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.inputs">
            <summary>
            An array of GrGen types corresponding to rule parameters.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.inputNames">
            <summary>
            Names of the rule parameter elements
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.defs">
            <summary>
            An array of GrGen types corresponding to def elments yielded out of this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.defNames">
            <summary>
            Names of the def elements yielded out of this pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.annotations">
            <summary>
            The annotations of the matching pattern (test/rule/subpattern)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.name">
            <summary>
            Our name
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPMatchingPattern.uses">
            <summary>
            A count of using occurances of this subpattern
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPRulePattern">
            <summary>
            A description of a GrGen rule.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRulePattern.Outputs">
            <summary>
            An array of GrGen types corresponding to rule return values.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPRulePattern.outputs">
            <summary>
            An array of GrGen types corresponding to rule return values.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRulePattern.Filters">
            <summary>
            An array of the available filters
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPRulePattern.filters">
            <summary>
            An array of the available filters
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPFilter">
            <summary>
            A descprition of a filter of a rule
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPFilterAutoGenerated">
            <summary>
            A descprition of a filter of a rule
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPFilterFunction">
            <summary>
            A descprition of a filter of a rule
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPFilterFunction.Inputs">
            <summary>
            An array of GrGen types corresponding to filter parameters.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPFilterFunction.InputNames">
            <summary>
            An array of the names corresponding to filter parameters.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPFilterFunction.inputs">
            <summary>
            An array of GrGen types corresponding to filter parameters.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.LGSPFilterFunction.inputNames">
            <summary>
            Names of the filter parameter elements
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPRuleAndMatchingPatterns">
            <summary>
            Class which instantiates and stores all the rule and subpattern representations ready for iteration
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRuleAndMatchingPatterns.Rules">
            <summary>
            All the rule representations generated
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRuleAndMatchingPatterns.Subpatterns">
            <summary>
            All the subrule representations generated
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRuleAndMatchingPatterns.RulesAndSubpatterns">
            <summary>
            All the rule and subrule representations generated
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRuleAndMatchingPatterns.DefinedSequences">
            <summary>
            All the defined sequence representations generated
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRuleAndMatchingPatterns.Functions">
            <summary>
            All the function representations generated
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRuleAndMatchingPatterns.Procedures">
            <summary>
            All the procedure representations generated
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.LGSPRuleAndMatchingPatterns.Packages">
            <summary>
            All the packages defined
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternElement">
            <summary>
            An element of a rule pattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.Name">
            <summary>
            The name of the pattern element.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.UnprefixedName">
            <summary>
            The pure name of the pattern element as specified in the .grg without any prefixes.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.PointOfDefinition">
            <summary>
            The pattern where this element gets matched (null if rule parameter).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.DefToBeYieldedTo">
            <summary>
            Iff true the element is only defined in its PointOfDefinition pattern,
            it gets matched in another, nested or called pattern which yields it to the containing pattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.Initialization">
            <summary>
            The initialization expression for the element if some was defined, otherwise null.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.Annotations">
            <summary>
            The annotations of the pattern element
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternElement.de#unika#ipd#grGen#libGr#IPatternElement#Type">
            <summary>
            The GrGen type of the pattern element, fake implementation overriden in subclasses
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.TypeID">
            <summary>
            The type ID of the pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.typeName">
            <summary>
            The name of the type interface of the pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.name">
            <summary>
            The name of the pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.unprefixedName">
            <summary>
            Pure name of the pattern element as specified in the .grg file without any prefixes.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.pointOfDefinition">
            <summary>
            The pattern where this element gets matched (null if rule parameter).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.defToBeYieldedTo">
            <summary>
            Iff true the element is only defined in its PointOfDefinition pattern,
            it gets matched in another, nested or called pattern which yields it to the containing pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.initialization">
            <summary>
            The initialization expression for the element if some was defined, otherwise null.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.annotations">
            <summary>
            The annotations of the pattern element
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.AllowedTypes">
            <summary>
            An array of allowed types for this pattern element.
            If it is null, all subtypes of the type specified by typeID (including itself)
            are allowed for this pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.IsAllowedType">
            <summary>
            An array containing a bool for each node/edge type (order defined by the TypeIDs)
            which is true iff the corresponding type is allowed for this pattern element.
            It should be null if allowedTypes is null or empty or has only one element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.Cost">
            <summary>
            Default cost/priority from frontend, user priority if given.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.ParameterIndex">
            <summary>
            Specifies to which rule parameter this pattern element corresponds.
            Only valid if pattern element is handed in as rule parameter.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.MaybeNull">
            <summary>
            Tells whether this pattern element may be null.
            May only be true if pattern element is handed in as rule parameter.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.Storage">
            <summary>
            If not null this pattern element is to be bound by iterating the given storage
            (which may mean trying the single value if it is elementary).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.StorageIndex">
            <summary>
            If not null this pattern element is to be determined by a storage indexed lookup,
            with the accessor given here applied as index into the storage given in the Storage field.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.IndexAccess">
            <summary>
            If not null this pattern element is to be determined by an index lookup,
            with details specified by the concrete index access type contained in this field.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.NameLookup">
            <summary>
            If not null this pattern element is to be determined by a name map lookup
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.UniqueLookup">
            <summary>
            If not null this pattern element is to be determined by a unique index lookup
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.ElementBeforeCasting">
            <summary>
            If not null this pattern element is to be bound by casting the given ElementBeforeCasting to the pattern element type or causing matching to fail.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.AssignmentSource">
            <summary>
            If not null this pattern element is to be bound by assigning the given assignmentSource to the pattern element.
            This is needed to fill the pattern parameters of a pattern embedding which was inlined.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.originalElement">
            <summary>
            Links to the original pattern element in case this element was inlined, otherwise null;
            the point of definition of the original element references the original containing pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.originalSubpatternEmbedding">
            <summary>
            Links to the original subpattern embedding which was inlined in case this element was inlined, otherwise null.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.OriginalIndependentElement">
            <summary>
            Links to the original pattern element in case this element stems from inlining an independent
            (those elements exist only in search planning, they are not contained in any pattern).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.PresetBecauseOfIndependentInlining">
            <summary>
            This element was declared in an independent pattern, but is now to be matched as preset,
            because it was inlinded in the containing pattern to speed up matching
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.TempPlanMapping">
            <summary>
            plan graph node corresponding to this pattern element, used in plan graph generation, just hacked into this place
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternElement.visited">
            <summary>
            visited flag used to compute pattern connectedness for inlining, just hacked into this place
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternElement.#ctor(System.Int32,System.String,System.String,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],System.Single,System.Int32,System.Boolean,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.StorageAccessIndex,de.unika.ipd.grGen.lgsp.IndexAccess,de.unika.ipd.grGen.lgsp.NameLookup,de.unika.ipd.grGen.lgsp.UniqueLookup,de.unika.ipd.grGen.lgsp.PatternElement,System.Boolean,de.unika.ipd.grGen.expression.Expression)">
            <summary>
            Instantiates a new PatternElement object.
            </summary>
            <param name="typeID">The type ID of the pattern element.</param>
            <param name="typeName">The name of the type interface of the pattern element.</param>
            <param name="name">The name of the pattern element.</param>
            <param name="unprefixedName">Pure name of the pattern element as specified in the .grg without any prefixes</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each node/edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="cost">Default cost/priority from frontend, user priority if given.</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds.</param>
            <param name="maybeNull">Tells whether this pattern element may be null (is a parameter if true).</param>
            <param name="storage">If not null this pattern element is to be bound by iterating the given storage.</param>
            <param name="storageIndex">If not null this pattern element is to be determined by a storage lookup,
                with the accessor given here applied as index into the storage given in the storage parameter.</param>
            <param name="indexAccess">If not null this pattern element is to be determined by an index lookup, with details specified by the concrete index access type contained in this field.</param>
            <param name="nameLookup">If not null this pattern element is to be determined by a name map lookup.</param>
            <param name="uniqueLookup">If not null this pattern element is to be determined by a unique index lookup.</param>
            <param name="elementBeforeCasting">If not null this pattern node is to be bound by casting the given elementBeforeCasting to the pattern node type or causing matching to fail.</param>
            <param name="defToBeYieldedTo">Iff true the element is only defined in its PointOfDefinition pattern,
                it gets matched in another, nested or called pattern which yields it to the containing pattern.</param>
            <param name="initialization">The initialization expression for the element if some was defined, 
                only possible for defToBeYieldedTo elements, otherwise null.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternElement.#ctor(de.unika.ipd.grGen.lgsp.PatternElement,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraph,System.String)">
            <summary>
            Instantiates a new PatternElement object as a copy from an original element, used for subpattern inlining.
            </summary>
            <param name="original">The original pattern element to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="newHost">The pattern graph the new pattern element will be contained in.</param>
            <param name="nameSuffix">The suffix to be added to the name of the pattern element (to avoid name collisions).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternElement.#ctor(de.unika.ipd.grGen.lgsp.PatternElement,System.String)">
            <summary>
            Instantiates a new PatternElement object as a copy from an original element, used for independent inlining.
            </summary>
            <param name="original">The original pattern element to be copy constructed.</param>
            <param name="nameSuffix">The suffix to be added to the name of the pattern element (to avoid name collisions).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternElement.ToString">
            <summary>
            Converts this instance into a string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternElement.GetPatternElementThisElementDependsOnOutsideOfGraphConnectedness">
            <summary>
            Returns the pattern element we depend on,
            for a storage lookup, or an indexed storage lookup, or an index lookup
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternNode">
            <summary>
            A pattern node of a rule pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternNode.type">
            <summary>
            The GrGen type of the pattern node
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.#ctor(System.Int32,de.unika.ipd.grGen.libGr.NodeType,System.String,System.String,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],System.Single,System.Int32,System.Boolean,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.StorageAccessIndex,de.unika.ipd.grGen.lgsp.IndexAccess,de.unika.ipd.grGen.lgsp.NameLookup,de.unika.ipd.grGen.lgsp.UniqueLookup,de.unika.ipd.grGen.lgsp.PatternElement,System.Boolean,de.unika.ipd.grGen.expression.Expression)">
            <summary>
            Instantiates a new PatternNode object
            </summary>
            <param name="typeID">The type ID of the pattern node</param>
            <param name="type">The GrGen type of the pattern node.</param>
            <param name="typeName">The name of the type interface of the pattern element.</param>
            <param name="name">The name of the pattern node</param>
            <param name="unprefixedName">Pure name of the pattern element as specified in the .grg without any prefixes</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each node/edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="cost"> default cost/priority from frontend, user priority if given</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds</param>
            <param name="maybeNull">Tells whether this pattern node may be null (is a parameter if true).</param>
            <param name="storage">If not null this node is to be bound by iterating the given storage.</param>
            <param name="storageIndex">If not null this node is to be determined by a storage lookup,
                with the accessor given here applied as index into the storage given in the storage parameter.</param>
            <param name="indexAccess">If not null this pattern element is to be determined by an index lookup, with details specified by the concrete index access type contained in this field.</param>
            <param name="nameLookup">If not null this pattern element is to be determined by a name map lookup.</param>
            <param name="uniqueLookup">If not null this pattern element is to be determined by a unique index lookup.</param>
            <param name="elementBeforeCasting">If not null this pattern node is to be bound by casting the given elementBeforeCasting to the pattern node type or causing matching to fail.</param>
            <param name="defToBeYieldedTo">Iff true the element is only defined in its PointOfDefinition pattern,
                it gets matched in another, nested or called pattern which yields it to the containing pattern.</param>
            <param name="initialization">The initialization expression for the node if some was defined, 
                only possible for defToBeYieldedTo nodes, otherwise null.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.#ctor(de.unika.ipd.grGen.lgsp.PatternNode,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraph,System.String)">
            <summary>
            Instantiates a new PatternNode object as a copy from an original node, used for subpattern inlining.
            </summary>
            <param name="original">The original pattern node to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="newHost">The pattern graph the new pattern node will be contained in.</param>
            <param name="nameSuffix">The suffix to be added to the name of the pattern node (to avoid name collisions).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.#ctor(de.unika.ipd.grGen.lgsp.PatternNode,System.String)">
            <summary>
            Instantiates a new PatternNode object as a copy from an original node, used for independent inlining.
            </summary>
            <param name="original">The original pattern node to be copy constructed.</param>
            <param name="nameSuffix">The suffix to be added to the name of the pattern node (to avoid name collisions).</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternNode.Type">
            <summary>
            The GrGen type of the pattern node.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternNode.ToString">
            <summary>
            Converts this instance into a string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternNode.originalNode">
            <summary>
            Links to the original pattern node in case this node was inlined, otherwise null;
            the point of definition of the original node references the original containing pattern
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternEdge">
            <summary>
            A pattern edge of a rule pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternEdge.type">
            <summary>
            The GrGen type of the pattern edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternEdge.fixedDirection">
            <summary>
            Indicates, whether this pattern edge should be matched with a fixed direction or not.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.#ctor(System.Boolean,System.Int32,de.unika.ipd.grGen.libGr.EdgeType,System.String,System.String,System.String,de.unika.ipd.grGen.libGr.GrGenType[],System.Boolean[],System.Single,System.Int32,System.Boolean,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.StorageAccessIndex,de.unika.ipd.grGen.lgsp.IndexAccess,de.unika.ipd.grGen.lgsp.NameLookup,de.unika.ipd.grGen.lgsp.UniqueLookup,de.unika.ipd.grGen.lgsp.PatternElement,System.Boolean,de.unika.ipd.grGen.expression.Expression)">
            <summary>
            Instantiates a new PatternEdge object
            </summary>
            <param name="fixedDirection">Whether this pattern edge should be matched with a fixed direction or not.</param>
            <param name="typeID">The type ID of the pattern edge.</param>
            <param name="type">The GrGen type of the pattern edge.</param>
            <param name="typeName">The name of the type interface of the pattern element.</param>
            <param name="name">The name of the pattern edge.</param>
            <param name="unprefixedName">Pure name of the pattern element as specified in the .grg without any prefixes</param>
            <param name="allowedTypes">An array of allowed types for this pattern element.
                If it is null, all subtypes of the type specified by typeID (including itself)
                are allowed for this pattern element.</param>
            <param name="isAllowedType">An array containing a bool for each edge type (order defined by the TypeIDs)
                which is true iff the corresponding type is allowed for this pattern element.
                It should be null if allowedTypes is null or empty or has only one element.</param>
            <param name="cost"> default cost/priority from frontend, user priority if given</param>
            <param name="parameterIndex">Specifies to which rule parameter this pattern element corresponds</param>
            <param name="maybeNull">Tells whether this pattern edge may be null (is a parameter if true).</param>
            <param name="storage">If not null this edge is to be bound by iterating the given storage.</param>
            <param name="storageIndex">If not null this edge is to be determined by a storage lookup,
                with the accessor given here applied as index into the storage given in the storage parameter.</param>
            <param name="indexAccess">If not null this pattern element is to be determined by an index lookup, with details specified by the concrete index access type contained in this field.</param>
            <param name="nameLookup">If not null this pattern element is to be determined by a name map lookup.</param>
            <param name="uniqueLookup">If not null this pattern element is to be determined by a unique index lookup.</param>
            <param name="elementBeforeCasting">If not null this pattern node is to be bound by casting the given elementBeforeCasting to the pattern node type or causing matching to fail.</param>
            <param name="defToBeYieldedTo">Iff true the element is only defined in its PointOfDefinition pattern,
                it gets matched in another, nested or called pattern which yields it to the containing pattern.</param>
            <param name="initialization">The initialization expression for the edge if some was defined, 
                only possible for defToBeYieldedTo edges, otherwise null.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.#ctor(de.unika.ipd.grGen.lgsp.PatternEdge,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraph,System.String)">
            <summary>
            Instantiates a new PatternEdge object as a copy from an original edge, used for subpattern inlining.
            </summary>
            <param name="original">The original pattern edge to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="newHost">The pattern graph the new pattern element will be contained in.</param>
            <param name="nameSuffix">The suffix to be added to the name of the pattern edge (to avoid name collisions).</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.#ctor(de.unika.ipd.grGen.lgsp.PatternEdge,System.String)">
            <summary>
            Instantiates a new PatternEdge object as a copy from an original edge, used for independent inlining.
            </summary>
            <param name="original">The original pattern edge to be copy constructed.</param>
            <param name="nameSuffix">The suffix to be added to the name of the pattern edge (to avoid name collisions).</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternEdge.Type">
            <summary>
            The GrGen type of the pattern edge.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternEdge.ToString">
            <summary>
            Converts this instance into a string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternEdge.originalEdge">
            <summary>
            Links to the original pattern edge in case this edge was inlined, otherwise null;
            the point of definition of the original edge references the original containing pattern
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternVariable">
            <summary>
            A pattern variable of a rule pattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternVariable.Name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternVariable.UnprefixedName">
            <summary>
            The pure name of the pattern element as specified in the .grg without any prefixes.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternVariable.PointOfDefinition">
            <summary>
            The pattern where this element gets matched (null if rule parameter).
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternVariable.DefToBeYieldedTo">
            <summary>
            Iff true the element is only defined in its PointOfDefinition pattern,
            it gets matched in another, nested or called pattern which yields it to the containing pattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternVariable.Annotations">
            <summary>
            The annotations of the pattern element
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternVariable.Type">
            <summary>
            The GrGen type of the pattern variable.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.type">
            <summary>
            The GrGen type of the pattern variable.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.unprefixedName">
            <summary>
            Pure name of the variable as specified in the .grg without any prefixes.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.pointOfDefinition">
            <summary>
            The pattern where this element gets matched (null if rule parameter).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.defToBeYieldedTo">
            <summary>
            Iff true the element is only defined in its PointOfDefinition pattern,
            it gets matched in another, nested or called pattern which yields it to the containing pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.initialization">
            <summary>
            The initialization expression for the variable if some was defined, otherwise null.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.annotations">
            <summary>
            The annotations of the pattern element
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.ParameterIndex">
            <summary>
            Specifies to which rule parameter this variable corresponds.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.AssignmentSource">
            <summary>
            If not null this pattern element is to be bound by assigning the value of the given assignmentSource expression to the variable.
            This is needed to fill the pattern parameters of a pattern embedding which was inlined.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.AssignmentDependencies">
            <summary>
            If AssignmentSource is not null this gives the original embedding which was inlined.
            It is given as quick access to the needed nodes, edges, and variables for scheduling.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.originalVariable">
            <summary>
            Links to the original pattern variable in case this variable was inlined, otherwise null;
            the point of definition of the original variable references the original containing pattern
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternVariable.originalSubpatternEmbedding">
            <summary>
            Links to the original subpattern embedding which was inlined in case this variable was inlined, otherwise null.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternVariable.#ctor(de.unika.ipd.grGen.libGr.VarType,System.String,System.String,System.Int32,System.Boolean,de.unika.ipd.grGen.expression.Expression)">
            <summary>
            Instantiates a new PatternVariable object.
            </summary>
            <param name="type">The GrGen type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <param name="unprefixedName">Pure name of the variable as specified in the .grg without any prefixes.</param>
            <param name="parameterIndex">Specifies to which rule parameter this variable corresponds.</param>
            <param name="defToBeYieldedTo">Iff true the element is only defined in its PointOfDefinition pattern,
                it gets matched in another, nested or called pattern which yields it to the containing pattern.</param>
            <param name="initialization">The initialization expression for the variable if some was defined, otherwise null.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternVariable.#ctor(de.unika.ipd.grGen.lgsp.PatternVariable,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraph,System.String)">
            <summary>
            Instantiates a new PatternVariable object as a copy from an original variable, used for inlining.
            </summary>
            <param name="original">The original pattern variable to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="newHost">The pattern graph the new pattern element will be contained in.</param>
            <param name="nameSuffix">The suffix to be added to the name of the pattern variable (to avoid name collisions).</param>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.StorageAccess">
            <summary>
            Representation of a storage access, used to bind a pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.StorageAccess.Variable">
            <summary>
            The storage is a pattern variable if not null.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.StorageAccess.GlobalVariable">
            <summary>
            The storage is a global variable if not null.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.StorageAccess.Attribute">
            <summary>
            The storage is a graph element attribute (qualification) if not null.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.StorageAccessIndex">
            <summary>
            Representation of a storage access index, used to bind a pattern element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.StorageAccessIndex.GraphElement">
            <summary>
            The storage index is the given graph element if not null.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.StorageAccessIndex.Variable">
            <summary>
            The storage index is the given pattern variable if not null.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.StorageAccessIndex.GlobalVariable">
            <summary>
            The storage index is the given global variable if not null.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.StorageAccessIndex.Attribute">
            <summary>
            The storage index is the given graph element attribute (qualification) if not null.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IndexAccess">
            <summary>
            Base class for index accesses, used to bind a pattern element from an index.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IndexAccess.Index">
            <summary>
            The index accessed
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IndexAccess.NeededElement">
            <summary>
            The pattern element that must be bound before the index can be accessed.
            null if the index can be accessed straight from the beginning, does not depend on other nodes/edges.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IndexAccess.VariablesNeeded">
            <summary>
            Tells whether variables are needed for the expressions used in accessing the index.
            This defines a constraint on scheduling.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IndexAccessEquality">
            <summary>
            Representation of an index access, accessed by enumerating equal keys.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IndexAccessAscending">
            <summary>
            Representation of an index access, accessed by enumerating ascendingly.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IndexAccessDescending">
            <summary>
            Representation of an index access, accessed by enumerating descendingly.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NameLookup">
            <summary>
            Representation of a name map lookup.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.NameLookup.NeededElement">
            <summary>
            The pattern element that must be bound before the name map can be accessed.
            null if the name map can be accessed straight from the beginning, does not depend on other nodes/edges.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.NameLookup.VariablesNeeded">
            <summary>
            Tells whether variables are needed for the expressions used in accessing the index.
            This defines a constraint on scheduling.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.NameLookup.Expr">
            <summary>
            The expression for computing the key with which the name map will be accessed
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.UniqueLookup">
            <summary>
            Representation of a unique index lookup.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.UniqueLookup.NeededElement">
            <summary>
            The pattern element that must be bound before the unique index can be accessed.
            null if the unique index can be accessed straight from the beginning, does not depend on other nodes/edges.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.UniqueLookup.VariablesNeeded">
            <summary>
            Tells whether variables are needed for the expressions used in accessing the index.
            This defines a constraint on scheduling.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.UniqueLookup.Expr">
            <summary>
            The expression for computing the unique id with which the unique index will be accessed
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.QualificationAccess">
            <summary>
            Representation of an owner.attribute qualification
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.QualificationAccess.Owner">
            <summary>
            The graph element owning the attribute.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.QualificationAccess.Attribute">
            <summary>
            The attribute.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GlobalVariableAccess">
            <summary>
            Representation of a global variable accessed from within a pattern (match from storage constructs)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GlobalVariableAccess.Name">
            <summary>
            Name of the global variable
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.GlobalVariableAccess.Type">
            <summary>
            Statically declared type of the global variable.
            (The one given in the rule file declaration defining how it is to be interpreted,
            global variables as such are untyped.)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GlobalVariableAccess.#ctor(System.String,de.unika.ipd.grGen.libGr.VarType)">
            <summary>
            Instantiates a new global variable access to be used in a match from storage construct.
            </summary>
            <param name="name">The name of the global variable.</param>
            <param name="type">The type the values in the global variable must bear, as declared in the rules file.</param>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternCondition">
            <summary>
            Representation of some condition which must be true for the pattern containing it to be matched
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.ConditionExpression">
            <summary>
            The condition expression to evaluate
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.NeededNodes">
            <summary>
            An array of node names needed by this condition.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.NeededEdges">
            <summary>
            An array of edge names needed by this condition.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.NeededVariables">
            <summary>
            An array of variable names needed by this condition.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.NeededVariableTypes">
            <summary>
            An array of variable types (corresponding to the variable names) needed by this condition.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.originalCondition">
            <summary>
            Links to the original pattern condition in case this condition was inlined, otherwise null
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternCondition.originalSubpatternEmbedding">
            <summary>
            Links to the original subpattern embedding which was inlined in case this condition was inlined, otherwise null.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternCondition.#ctor(de.unika.ipd.grGen.expression.Expression,System.String[],System.String[],System.String[],de.unika.ipd.grGen.libGr.VarType[])">
            <summary>
            Constructs a PatternCondition object.
            </summary>
            <param name="conditionExpression">The condition expression to evaluate.</param>
            <param name="neededNodes">An array of node names needed by this condition.</param>
            <param name="neededEdges">An array of edge names needed by this condition.</param>
            <param name="neededVariables">An array of variable names needed by this condition.</param>
            <param name="neededVariableTypes">An array of variable types (corresponding to the variable names) needed by this condition.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternCondition.#ctor(de.unika.ipd.grGen.lgsp.PatternCondition,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,System.String)">
            <summary>
            Instantiates a new PatternCondition object as a copy from an original condition, used for inlining.
            </summary>
            <param name="original">The original condition to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="renameSuffix">The rename suffix to be applied to all the nodes, edges, and variables used.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternCondition.Clone">
            <summary>
            Instantiates a new PatternCondition object as a copy from the original condition; for parallelization.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternYielding">
            <summary>
            Representation of some yielding (a list of elementary yieldings, to be executed after matching completed)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternYielding.Name">
            <summary>
            The name of the pattern yielding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternYielding.ElementaryYieldings">
            <summary>
            An array of elementary yieldings to execute (e.g. assignments to def variables).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternYielding.NeededNodes">
            <summary>
            An array of node names needed by this yielding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternYielding.NeededEdges">
            <summary>
            An array of edge names needed by this yielding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternYielding.NeededVariables">
            <summary>
            An array of variable names needed by this yielding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternYielding.NeededVariableTypes">
            <summary>
            An array of variable types (corresponding to the variable names) needed by this yielding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternYielding.originalYielding">
            <summary>
            Links to the original pattern yielding in case this yielding was inlined, otherwise null
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternYielding.originalSubpatternEmbedding">
            <summary>
            Links to the original subpattern embedding which was inlined in case this yielding was inlined, otherwise null.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternYielding.#ctor(System.String,de.unika.ipd.grGen.expression.Yielding[],System.String[],System.String[],System.String[],de.unika.ipd.grGen.libGr.VarType[])">
            <summary>
            Constructs a PatternYielding object.
            </summary>
            <param name="name">The name of the yielding to execute.</param>
            <param name="elementaryYieldings">An array of elementary yieldings to execute.</param>
            <param name="neededNodes">An array of node names needed by this yielding.</param>
            <param name="neededEdges">An array of edge names needed by this yielding.</param>
            <param name="neededVariables">An array of variable names needed by this yielding.</param>
            <param name="neededVariableTypes">An array of variable types (corresponding to the variable names) needed by this yielding.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternYielding.#ctor(de.unika.ipd.grGen.lgsp.PatternYielding,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,System.String)">
            <summary>
            Instantiates a new PatternYielding object as a copy from an original yielding, used for inlining.
            </summary>
            <param name="original">The original yielding to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="renameSuffix">The rename suffix to be applied to all the nodes, edges, and variables used.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternYielding.Clone">
            <summary>
            Instantiates a new PatternYielding object as a copy from the original yielding; for parallelization.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding">
            <summary>
            Embedding of a subpattern into it's containing pattern
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.Name">
            <summary>
            The name of the usage of the subpattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.EmbeddedGraph">
            <summary>
            The embedded subpattern.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.Annotations">
            <summary>
            The annotations of the pattern element
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.PointOfDefinition">
            <summary>
            The pattern where this complex subpattern element gets matched.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.name">
            <summary>
            The name of the usage of the subpattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.matchingPatternOfEmbeddedGraph">
            <summary>
            The embedded subpattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.annotations">
            <summary>
            The annotations of the pattern element
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.connections">
            <summary>
            An array with the expressions giving the arguments to the subpattern,
            that are the pattern variables plus the pattern elements,
            with which the subpattern gets connected to the containing pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.yields">
            <summary>
            An array with the output arguments to the subpattern,
            that are the pattern variables plus the pattern elements
            which the subpattern yields to the containing pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.neededNodes">
            <summary>
            An array of names of nodes needed by this subpattern embedding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.neededEdges">
            <summary>
            An array of names of edges needed by this subpattern embedding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.neededVariables">
            <summary>
            An array of names of variable needed by this subpattern embedding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.neededVariableTypes">
            <summary>
            An array of variable types (corresponding to the variable names) needed by this embedding.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.inlined">
            <summary>
            Tells whether this pattern usage was inlined.
            In this case it is ignored in matcher generation, 
            as all elements of the pattern used were added to the elementAndInlined-members of the using pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.originalEmbedding">
            <summary>
            Links to the original embedding in case this embedding was inlined, otherwise null.
            This tells that this embedding was used in another subpattern which was inlined.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.originalSubpatternEmbedding">
            <summary>
            Links to the original subpattern embedding which was inlined in case this alternative was inlined, otherwise null.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.#ctor(System.String,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.expression.Expression[],System.String[],System.String[],System.String[],System.String[],de.unika.ipd.grGen.libGr.VarType[])">
            <summary>
            Constructs a PatternGraphEmbedding object.
            </summary>
            <param name="name">The name of the usage of the subpattern.</param>
            <param name="matchingPatternOfEmbeddedGraph">The embedded subpattern.</param>
            <param name="connections">An array with the expressions defining how the subpattern is connected
            to the containing pattern (graph elements and basic variables) .</param>
            <param name="yields">An array with the def elements and variables 
            from the containing pattern yielded to from the subpattern.</param>
            <param name="neededNodes">An array with names of nodes needed by this embedding.</param>
            <param name="neededEdges">An array with names of edges needed by this embedding.</param>
            <param name="neededVariables">An array with names of variables needed by this embedding.</param>
            <param name="neededVariableTypes">An array with types of variables needed by this embedding.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphEmbedding.#ctor(de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraph,System.String)">
            <summary>
            Instantiates a new pattern graph embedding object as a copy from an original embedding, used for inlining.
            </summary>
            <param name="original">The original embedding to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="newHost">The pattern graph the new embedding will be contained in.</param>
            <param name="nameSuffix">The suffix to be added to the name of the embedding (to avoid name collisions).</param>
            Elements were already copied in the containing pattern(s), their copies have to be reused here.
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Alternative">
            <summary>
            An alternative is a pattern graph element containing subpatterns
            of which one must get successfully matched so that the entire pattern gets matched successfully.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.Alternative.AlternativeCases">
            <summary>
            Array with the alternative cases.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Alternative.name">
            <summary>
            Name of the alternative.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Alternative.pathPrefix">
            <summary>
            Prefix for name from nesting path.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Alternative.alternativeCases">
            <summary>
            Array with the alternative cases.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Alternative.originalAlternative">
            <summary>
            Links to the original alternative in case this alternative was inlined, otherwise null
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Alternative.originalSubpatternEmbedding">
            <summary>
            Links to the original subpattern embedding which was inlined in case this alternative was inlined, otherwise null.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.Alternative.#ctor(System.String,System.String,de.unika.ipd.grGen.lgsp.PatternGraph[])">
            <summary>
            Constructs an Alternative object.
            </summary>
            <param name="name">Name of the alternative.</param>
            <param name="pathPrefix">Prefix for name from nesting path.</param>
            <param name="cases">Array with the alternative cases.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.Alternative.#ctor(de.unika.ipd.grGen.lgsp.Alternative,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraph,System.String,System.String,System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternNode,de.unika.ipd.grGen.lgsp.PatternNode},System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternEdge,de.unika.ipd.grGen.lgsp.PatternEdge},System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternVariable,de.unika.ipd.grGen.lgsp.PatternVariable})">
            <summary>
            Instantiates a new alternative object as a copy from an original alternative, used for inlining.
            </summary>
            <param name="original">The original alternative to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="newHost">The pattern graph the new alternative will be contained in.</param>
            <param name="nameSuffix">The suffix to be added to the name of the alternative and its elements (to avoid name collisions).</param>
            Elements might have been already copied in the containing pattern(s), their copies have to be reused in this case.
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.Iterated">
            <summary>
            An iterated is a pattern graph element containing the subpattern to be matched iteratively
            and the information how much matches are needed for success and how much matches to obtain at most
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.Iterated.IteratedPattern">
             <summary>
            The iterated pattern to be matched as often as possible within specified bounds.
             </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.Iterated.MinMatches">
            <summary>
            How many matches to find so the iterated succeeds.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.Iterated.MaxMatches">
            <summary>
            The upper bound to stop matching at, 0 means unlimited/as often as possible.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Iterated.iteratedPattern">
             <summary>
            The iterated pattern to be matched as often as possible within specified bounds.
             </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Iterated.minMatches">
            <summary>
            How many matches to find so the iterated succeeds.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Iterated.maxMatches">
            <summary>
            The upper bound to stop matching at, 0 means unlimited.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Iterated.originalIterated">
            <summary>
            Links to the original iterated in case this iterated was inlined, otherwise null
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.Iterated.originalSubpatternEmbedding">
            <summary>
            Links to the original subpattern embedding which was inlined in case this iterated was inlined, otherwise null.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.Iterated.#ctor(de.unika.ipd.grGen.lgsp.PatternGraph,System.Int32,System.Int32)">
            <summary>
            Constructs an Iterated object.
            </summary>
            <param name="iterated">PatternGraph of the iterated.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.Iterated.#ctor(de.unika.ipd.grGen.lgsp.Iterated,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,de.unika.ipd.grGen.lgsp.PatternGraph,System.String,System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternNode,de.unika.ipd.grGen.lgsp.PatternNode},System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternEdge,de.unika.ipd.grGen.lgsp.PatternEdge},System.Collections.Generic.Dictionary{de.unika.ipd.grGen.lgsp.PatternVariable,de.unika.ipd.grGen.lgsp.PatternVariable})">
            <summary>
            Instantiates a new iterated object as a copy from an original iterated, used for inlining.
            </summary>
            <param name="original">The original iterated to be copy constructed.</param>
            <param name="inlinedSubpatternEmbedding">The embedding which just gets inlined.</param>
            <param name="newHost">The pattern graph the new iterated will be contained in.</param>
            <param name="nameSuffix">The suffix to be added to the name of the iterated and its elements (to avoid name collisions).</param>
            Elements might have been already copied in the containing pattern(s), their copies have to be reused in this case.
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPEmbeddedSequenceClosure">
            <summary>
            A closure for an exec statement in an alternative, iterated or subpattern,
            containing the entities needed for the exec execution.
            These exec are executed at the end of the rule which directly or indirectly used them,
            long after the alternative/iterated/subpattern modification containing them has been applied.
            The real stuff depends on the xgrs and is generated, implementing this abstract class.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPEmbeddedSequenceClosure.exec(de.unika.ipd.grGen.lgsp.LGSPGraphProcessingEnvironment)">
            <summary>
            Executes the embedded sequence closure
            </summary>
            <param name="procEnv">the processing environment on which to apply the sequence, esp. containing the graph</param>
            <returns>the result of sequence execution</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator">
            <summary>
            The C#-part responsible for compiling the XGRSs of the exec statements.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.#ctor(de.unika.ipd.grGen.lgsp.LGSPGrGen,de.unika.ipd.grGen.libGr.IGraphModel,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{de.unika.ipd.grGen.libGr.IFilter}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Constructs the sequence generator
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.GetVar(de.unika.ipd.grGen.libGr.SequenceVariable)">
            <summary>
            Returns string containing a C# expression to get the value of the sequence-local variable / graph-global variable given
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.SetVar(de.unika.ipd.grGen.libGr.SequenceVariable,System.String)">
            <summary>
            Returns string containing a C# assignment to set the sequence-local variable / graph-global variable given
            to the value as computed by the C# expression in the string given
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.DeclareVar(de.unika.ipd.grGen.libGr.SequenceVariable)">
            <summary>
            Returns string containing a C# declaration of the variable given
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.GetResultVar(de.unika.ipd.grGen.libGr.SequenceBase)">
            <summary>
            Returns string containing a C# expression to get the value of the result variable of the sequence-like given
            (every sequence part writes a success-value which is read by other parts determining execution flow)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.SetResultVar(de.unika.ipd.grGen.libGr.SequenceBase,System.String)">
            <summary>
            Returns string containing a C# assignment to set the result variable of the sequence-like given
            to the value as computed by the C# expression in the string given
            (every sequence part writes a success-value which is read by other parts determining execution flow)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.DeclareResultVar(de.unika.ipd.grGen.libGr.SequenceBase)">
            <summary>
            Returns string containing C# declaration of the sequence-like result variable
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.EmitVarIfNew(de.unika.ipd.grGen.libGr.SequenceVariable,de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emit variable declarations needed (only once for every variable)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.EmitNeededVarAndRuleEntities(de.unika.ipd.grGen.libGr.Sequence,de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            pre-run for emitting the needed entities before emitting the real code
            - emits result variable declarations
            - emits sequence variable declarations (only once for every variable, declaration only possible at assignment targets)
            - collects used rules into knownRules, emit local rule declaration (only once for every rule)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.EmitNeededVarEntities(de.unika.ipd.grGen.libGr.SequenceComputation,de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            pre-run for emitting the needed entities before emitting the real code
            - emits sequence variable declarations (only once for every variable, declaration only possible at assignment targets)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.LGSPSequenceGenerator.EmitNeededVarEntities(de.unika.ipd.grGen.libGr.AssignmentTarget,de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            pre-run for emitting the needed entities before emitting the real code
            - emits sequence variable declarations (only once for every variable, declaration only possible at assignment targets)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPSubactionAndOutputAdditionEnvironment">
            <summary>
            An implementation of the ISubactionAndOutputAdditionEnvironment, to be used with LGSPGraphs.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPTransactionManager">
            <summary>
            A class for managing graph transactions.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPUniquenessEnsurer">
            <summary>
            A class ensuring unique ids for nodes and edges with a minimum amount of gaps.
            Gets instantiated in case support for unique nodes/edges was declared in the model.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LGSPUniquenessIndex">
            <summary>
            A class ensuring unique ids for nodes and edges with a minimum amount of gaps,
            and allowing to access them by their unique id, similar to an index (and esp. the name map).
            Gets instantiated in case support for unique nodes/edges was declared in the model,
            and support for accessing nodes/edges by a unique id.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NamesOfEntities">
            <summary>
            class determining names of entities in generated source code from pattern element entities
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.CandidateVariable(System.String)">
            <summary>
            Returns name of the candidate variable which will be created within the search program
            holding over time the candidates for the given pattern element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeForCandidateVariable(System.String)">
            <summary>
            Returns name of the type variable which will be created within the search program
            holding the type object which will be used for determining the candidates
            for the given pattern element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.Variable(System.String)">
            <summary>
            Returns name of non-graph-element variable
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeOfVariableContainingType(System.Boolean)">
            <summary>
            Returns name of the type of the type variable
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeIdForCandidateVariable(System.String)">
            <summary>
            Returns name of the type id variable which will be created within the search program
            holding the type id which will be used for determining the candidates
            for the given pattern element   (determined out of type object in iteration)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.CandidateIterationListHead(System.String)">
            <summary>
            Returns name of the list head variable which will be created within the search program
            holding the list head of the list accessed by type id with the graph elements of that type
            for finding out when iteration of the candidates for the given pattern element has finished
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.CandidateIterationContainerEntry(System.String)">
            <summary>
            Returns name of the container entry variable which will be created within the search program
            holding the dictionary entry (key-value-pair) or list/deque entry of the storage to pick an element from
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MapWithStorageTemporary(System.String)">
            <summary>
            Returns name of the temporary variable which will be created within the search program
            for retrieving the element via TryGet from the storage map; must be casted to the needed type afterwards
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MapByNameTemporary(System.String)">
            <summary>
            Returns name of the temporary variable which will be created within the search program
            for retrieving the element from the name map of the named graph; must be casted to the needed type afterwards
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MapByUniqueTemporary(System.String)">
            <summary>
            Returns name of the temporary variable which will be created within the search program
            for retrieving the element from the unique index of the graph; must be casted to the needed type afterwards
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.CandidateIterationIndexEntry(System.String)">
            <summary>
            Returns name of the entry variable which will be created within the search program
            holding the entry of the index to pick an element from
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MissingPresetHandlingMethod(System.String)">
            <summary>
            Returns name of the method called when a maybe preset element is not set
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.VariableWithBackupOfIsMatchedBit(System.String,System.String)">
            <summary>
            Returns name of the variable which will be created within the search program
            backing up the value of the isMatched-Bit of the graph element before assigning to it
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.VariableWithBackupOfIsMatchedGlobalBit(System.String,System.String)">
            <summary>
            Returns name of the variable which will be created within the search program
            backing up the value of the global isMatched-Bit of the graph element before assigning to it
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.VariableWithBackupOfIsMatchedGlobalInSomePatternBit(System.String,System.String)">
            <summary>
            Returns name of the variable which will be created within the search program
            backing up the value of the some global isMatched-Bit of the graph element before assigning to it
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TaskVariable(System.String,System.String)">
            <summary>
            Returns name of the task variable which will be created within the search program
            holding the task object whose connections need to be filled before being pushed on the open tasks stack
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.TypeOfTaskVariable(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns name of the type of the task variable
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.RulePatternClassName(System.String,System.String,System.Boolean)">
            <summary>
            Returns name of the rule pattern class
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.IndexSetType(System.String)">
            <summary>
            Returns name of the exact index set type
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchClassName(System.String)">
            <summary>
            Returns name of the match class
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchInterfaceName(System.String)">
            <summary>
            Returns name of the match interface
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchedIndependentVariable(System.String)">
            <summary>
            Returns name of the action member variable storing the matched independent
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.PatternpathMatch(System.String)">
            <summary>
            Returns name of the search program variable which will be filled
            if the pattern was matched and is needed in patternpath/global isomorphy checks
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchName(System.String,de.unika.ipd.grGen.lgsp.BuildMatchObjectType)">
            <summary>
            Returns name of the given element in the match class with correct match part prefix
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.MatchName(System.String,de.unika.ipd.grGen.lgsp.EntityType)">
            <summary>
            Returns name of the given element in the match class with correct match part prefix
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.DirectionRunCounterVariable(System.String)">
            <summary>
            Returns name of the state variable storing which direction run is currently underway
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.DuplicateMatchHashVariable">
            <summary>
            Returns the name of the variable that contains the hash of the current local match,
            better: the hash of the locally matched fields of the pattern modulo the inlined independent elements
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.DuplicateMatchCandidateVariable">
            <summary>
            Returns the name of the variable that contains the currently focused match with equal hash from the found local matches
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.FoundMatchesForFilteringVariable">
            <summary>
            Returns the name of the variable that contains the found local matches,
            accessible by the hash code of the locally matched fields of the pattern modulo the inlined independent elements
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.NamesOfEntities.ToString(de.unika.ipd.grGen.lgsp.EntityType)">
            <summary>
            Returns a string representation of the given entity type
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer">
            <summary>
            Class analyzing the pattern graphs of the matching patterns to generate code for,
            storing computed nesting and inter-pattern-relationships locally in the pattern graphs,
            ready to be used by the (local intra-pattern) code generator
            (to generate code more easily, to generate better code).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.AnalyzeNestingOfPatternGraph(de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Analyze the nesting structure of the pattern graph
            </summary>
            <param name="patternGraph"></param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.RememberMatchingPattern(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Remember matching pattern for computing of inter pattern relations later on
            </summary>
            <param name="matchingPattern"></param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.ComputeInterPatternRelations(System.Boolean)">
            <summary>
            Whole world known by now, computer relationships in between matching patterns
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.AnalyzeWithInterPatternRelationsKnown(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Analyze the pattern further on, know that the inter pattern relations are known
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.AnnotateIndependentsAtNestingPattern(de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Insert names of independents nested within the pattern graph
            to the matcher generation skeleton data structure pattern graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.CalculateNeededElements(de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Calculates the elements the given pattern graph and it's nested pattern graphs don't compute locally
            but expect to be preset from outwards; for pattern graph and all nested graphs
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.ComputePatternGraphsOnPathFromEnclosingPatternpath(de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Computes whether the pattern graphs are on a path from some enclosing
            negative/independent with a patternpath modifier.
            They need to check the patternpath stack filled with the already matched entities
            on the subpattern usage/derivation path to this pattern.
            It stores information to the pattern graph and its children.
            Returns whether a change occured, to be used for a fixpoint iteration.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.ComputePatternGraphsOnPathToEnclosedPatternpath(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Computes the pattern graphs which are on a path to some enclosed negative/independent
            with a patternpath modifier. They need to fill the patternpath check stack.
            It stores information to the pattern graph and its children.
            First pass, computes local information neglecting subpattern usage.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.AddSubpatternInformationToPatternpathInformation(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Computes the pattern graphs which are on a path to some enclosed negative/independent
            with a patternpath modifier; stores information to the pattern graph and its children.
            Second pass, adds global information from subpattern usage.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.AddNotContained``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Adds the elements from the list to be added to the target list in case they are not already contained there
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.AddNotContained``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.List{``0})">
            <summary>
            Adds the element to be added to the target list in case it is not already contained and the condition list is not empty
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.AddNotContained``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Adds the element to be added to the target list in case it is not already contained there
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.ComputeSubpatternsUsed(System.Boolean)">
            <summary>
            Computes for each matching pattern (of rule/subpattern)
            all directly/locally and indirectly/globally used matching patterns (of used subpatterns).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.ComputeSubpatternsUsedLocally(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,System.Boolean)">
            <summary>
            Computes for given pattern graph all locally used subpatterns;
            none of the globally used ones, but all of the nested ones.
            Writes them to the used subpatterns member of the pattern graph of the given top level matching pattern.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.AddSubpatternsOfSubpatternsUsed(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Adds all of the subpatterns used by one of the subpatterns used by the given matching pattern,
            returns whether the set of subpatterns of the given matching pattern changed thereby.
            Consider worklist algorithm in case of performance problems
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.ComputeMaxIsoSpace(de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean)">
            <summary>
            Computes the maximum isoSpace number of the pattern graph reached by negative/independent nesting,
            clipped by LGSPElemFlags.MAX_ISO_SPACE/LGSPElemFlagsParallel.MAX_ISO_SPACE which is the critical point of interest,
            this might happen by heavy nesting or by a subpattern call path with
            direct or indirect recursion on it including a negative/independent which gets passed.
            Returns true if the max isoSpace of a subpattern called was increased, causing a further run.
            Note: If you want to use a higher MAX_ISO_SPACE in either parallel or non-parallel matching, you must split the maxIsoSpace field and this computation into two parts.
            Currently the lower one of both is used, which causes insertion of superfluous runtime checks for the higher one. 
            (This is not an issue at the time of writing, because both values are set to the same value.)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PatternGraphAnalyzer.SetNeedForParallelizedVersion(de.unika.ipd.grGen.lgsp.LGSPMatchingPattern)">
            <summary>
            Sets branchingFactor to >1 for actions with a parallelize annotation,
            but especially for subpatterns used by them, and the nested patterns of both,
            they require an additional version with non- is-matched-flag-based isomorphy checking 
            the action needs furtheron a very different setup with a work distributing head and a parallelized body
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanPseudoNode">
            <summary>
            Common base class for the PlanNodes and PlanSuperNodes, 
            used for uniform access to the derived nodes within the minimum spanning arborescent computation.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanPseudoNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.TopSuperNode">
            <summary>
            outermost enclosing supernode, null if not contained within a supernode
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanPseudoNode.TopNode">
            <summary>
            outermost enclosing supernode, the node itself if not contained within a supernode
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanPseudoNode.PreferNewEdge(de.unika.ipd.grGen.lgsp.PlanEdge,System.Single,de.unika.ipd.grGen.lgsp.PlanEdge,System.Single)">
            <summary>
            Decides whether a new edge is better than a known best edge up to now.
            </summary>
            <returns>true if new edge should be chosen</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanNode">
            <summary>
            Element of the plan graph representing a node or edge within the pattern graph or a root node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanNode.PatternEdgeSource">
            <summary>
            Only valid if this plan node is representing a pattern edge, 
            then PatternEdgeSource gives us the plan node made out of the source node of the edge
            then PatternEdgeTarget gives us the plan node made out of the target node of the edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanNode.PatternEdgeTarget">
            <summary>
            Only valid if this plan node is representing a pattern edge, 
            then PatternEdgeSource gives us the plan node made out of the source node of the edge
            then PatternEdgeTarget gives us the plan node made out of the target node of the edge
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(System.String)">
            <summary>
            Instantiates a root plan node.
            </summary>
            <param name="rootName">The name for the root plan node.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(de.unika.ipd.grGen.lgsp.PatternNode,System.Int32,System.Boolean)">
            <summary>
            Instantiates a node plan node.
            </summary>
            <param name="patNode">The pattern node for this plan node.</param>
            <param name="elemID">The element ID for this plan node.</param>
            <param name="isPreset">True, if this element is a known element.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.#ctor(de.unika.ipd.grGen.lgsp.PatternEdge,System.Int32,System.Boolean,de.unika.ipd.grGen.lgsp.PlanNode,de.unika.ipd.grGen.lgsp.PlanNode)">
            <summary>
            Instantiates an edge plan node.
            </summary>
            <param name="patEdge">The pattern edge for this plan node.</param>
            <param name="elemID">The element ID for this plan node.</param>
            <param name="isPreset">True, if this element is a known element.</param>
            <param name="patternEdgeSource">The plan node corresponding to the source of the pattern edge.</param>
            <param name="patternEdgeTarget">The plan node corresponding to the target of the pattern edge.</param>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanSuperNode">
            <summary>
            Element of the plan graph representing a strongly connected component within the pattern graph.
            Hierachically nested.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanSuperNode.Child">
            <summary>
            Representative element of the cycle as entry point. Target of cheapest incoming edge.
            </summary>
        </member>
        <member name="P:de.unika.ipd.grGen.lgsp.PlanSuperNode.Incoming">
            <summary>
            Returns all incoming plan edges.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.PlanSuperNode.GetCheapestIncoming(de.unika.ipd.grGen.lgsp.PlanPseudoNode,System.Single@)">
            <summary>
            Returns the cheapest incoming plan edge and its cost,
            excluding nodes contained within the given top super node (if given)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanEdge">
            <summary>
            A plan edge represents a matching operation and its costs.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.PlanEdge.mstCost">
            <summary>
            Cost used by the operation selection.
            This represents max(log(Cost),1).
            This field is altered during the contraction algorithm.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PlanGraph">
            <summary>
            The plan graph data structure for the MSA-algorithm.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.CheckIsMatchedBit">
            <summary>
            if true, the graph element's is-matched-bit must be checked
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.SetIsMatchedBit">
            <summary>
            if true, the graph element's is-matched-bit must be set
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.PatternElementsToCheckAgainst">
            <summary>
            pattern elements the current element is not allowed to be homomorph to
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.GloballyHomomorphPatternElements">
            <summary>
            pattern elements the current element is allowed to be globally homomorph to
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.TotallyHomomorph">
            <summary>
            if true the element is not to be globally checked against anything, nor does it set any flags
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.LockForAllThreads">
            <summary>
            if true the candidate must be locked for all threads of a parallelized action,
            in addition to sequential locking, which is used for sequential checking in the header
            this is the case for candidates bound in the head of a parallized action
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.IsomorphyInformation.Parallel">
            <summary>
            if true parallelized isomorphy setting/checking code needs to be emitted, for the current thread
            this is the case for iso handling in the body of a parallelized action
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchOperation">
            <summary>
            Search operation with information about homomorphic mapping.
            Element of the scheduled search plan.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperation.Element">
            <summary>
            If Type is NegativePattern or IndependentPattern, Element is a ScheduledSearchPlan object.
            If Type is Condition, Element is a Condition object.
            If Type is AssignVar, Element is a PatternVariable object.
            If Type is DefToBeYieldedTo, Element is a Variable object in case of a variable, or a SearchPlanNode in case of a graph element.
            Otherwise Element is the target SearchPlanNode for this operation.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ScheduledSearchPlan">
            <summary>
            The scheduled search plan is a list of search operations,
            plus the information which nodes/edges are homomorph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchOperationType">
            <summary>
            Describes the type of a search operation.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Void">
            <summary>
            Void operation; retype to void to delete operation from ssp quickly.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ActionPreset">
            <summary>
            Preset handed in to action pattern, maybe null, 
            in this causing creation of two search plans, one with preset, one with lookup operation
            (might occur in enclosed negative pattern, too, but replaced by neg preset in schedule).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.NegIdptPreset">
            <summary>
            Preset handed in to negative/independent pattern, matched in enclosing pattern
            (normal preset is converted into this when reaching schedule, but not before).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SubPreset">
            <summary>
            Preset handed in to subpattern, never null
            (might occur in enclosed negative pattern, too, but replaced by neg preset in schedule).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.DefToBeYieldedTo">
            <summary>
            Def element to be yielded to, postset after matching with match parts of nested/called stuff.
            Has no meaning in search planning, but is easier to handle with fake preset pattern elements there.
            Is used afterwards in scheduling to insert the def-initialization after the real preset elements.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Lookup">
            <summary>
            Draw element from graph.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.PickFromStorage">
            <summary>
            Pick element from storage, independent from previously matched elements.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.PickFromStorageDependent">
            <summary>
            Pick element from storage, depending on a previously matched element (e.g. an attribute owner).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.MapWithStorage">
            <summary>
            Map some given input to an output graph element, independent from previously matched elements.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.MapWithStorageDependent">
            <summary>
            Map some given input to an output graph element, depending on a previously matched element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.PickFromIndex">
            <summary>
            Pick element from index, independent from previously matched elements.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.PickFromIndexDependent">
            <summary>
            Pick element from index, depending on a previously matched element (e.g. an attribute owner).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.PickByName">
            <summary>
            Pick element by name, independent from previously matched elements.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.PickByNameDependent">
            <summary>
            Pick element by name, depending on a previously matched element (e.g. an attribute owner).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.PickByUnique">
            <summary>
            Pick element by unique id, independent from previously matched elements.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.PickByUniqueDependent">
            <summary>
            Pick element by unique id, depending on a previously matched element (e.g. an attribute owner).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Cast">
            <summary>
            Cast to new type (i.e. check if type is correct and uncover attributes of that type), needs old element.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Assign">
            <summary>
            Assign element from old element, needs old element (used for former parameters of inlined subpatterns).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Identity">
            <summary>
            Check that element is identical to other element (used for former parameters of inlined subpatterns, which were scheduled without assignments).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.AssignVar">
            <summary>
            Assign var from expression (used for former var parameters of inlined subpatterns).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Outgoing">
            <summary>
            Follow outgoing edges of given node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Incoming">
            <summary>
            Follow incoming edges of given node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Incident">
            <summary>
            Follow outgoing and incoming edges of given node.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ImplicitSource">
            <summary>
            Get source node from given edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ImplicitTarget">
            <summary>
            Get target node from given edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Implicit">
            <summary>
            Get source and target node from given edge.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.Condition">
            <summary>
            Check matched pattern by condition.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.LockLocalElementsForPatternpath">
            <summary>
            All local elements mached, push them to the matches stack for patternpath checking,
            serves as a barrier for negative and independent pattern forward scheduling
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.NegativePattern">
            <summary>
            Try to match negative pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.IndependentPattern">
            <summary>
            Try to match independent pattern.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.InlinedIndependentCheckForDuplicateMatch">
            <summary>
            Check for a duplicate match arising from inlining an independent.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.WriteParallelPreset">
            <summary>
            Write the preset (node or edge) for the body of a parallelized action, in the head of the parallelized action.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelPreset">
            <summary>
            Preset (node or edge) handed in to the body of a parallelized action.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.WriteParallelPresetVar">
            <summary>
            Write the preset of variable type for the body of a parallelized action, in the head of the parallelized action.
            To forward var parameters normally only available as parameters outside schedule from head to body.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelPresetVar">
            <summary>
            Preset of variable type handed in to the body of a parallelized action.
            To forward var parameters normally only available as parameters outside schedule from head to body.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SetupParallelLookup">
            <summary>
            Setup a parallelized lookup element in graph operation, in the head of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelLookup">
            <summary>
            A parallelized lookup element in graph operation, in the body of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SetupParallelPickFromStorage">
            <summary>
            Setup a parallelized pick element from storage operation, in the head of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelPickFromStorage">
            <summary>
            A parallelized pick element from storage operation, in the body of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SetupParallelPickFromStorageDependent">
            <summary>
            Setup a parallelized pick element from storage operation, depending on a previously matched element (e.g. an attribute owner), in the head of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelPickFromStorageDependent">
            <summary>
            A parallelized pick element from storage operation, depending on a previously matched element (e.g. an attribute owner), in the body of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SetupParallelPickFromIndex">
            <summary>
            Setup a parallelized pick element from index operation, in the head of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelPickFromIndex">
            <summary>
            A parallelized pick element from index operation, in the body of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SetupParallelPickFromIndexDependent">
            <summary>
            Setup a parallelized pick element from index operation, depending on a previously matched element (e.g. an attribute owner).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelPickFromIndexDependent">
            <summary>
            A parallelized pick element from index operation, depending on a previously matched element (e.g. an attribute owner).
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SetupParallelOutgoing">
            <summary>
            Setup a parallelized follow outgoing edges of given node operation, in the head of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelOutgoing">
            <summary>
            A parallelized follow outgoing edges of given node operation, in the body of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SetupParallelIncoming">
            <summary>
            Setup a parallelized follow incoming edges of given node operation, in the head of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelIncoming">
            <summary>
            A parallelized follow incoming edges of given node operation, in the body of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.SetupParallelIncident">
            <summary>
            Setup a parallelized follow outgoing and incoming edges of given node operation, in the head of a parallelized action matcher.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchOperationType.ParallelIncident">
            <summary>
            A parallelized follow outgoing and incoming edges of given node operation, in the body of a parallelized action matcher.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanNode">
            <summary>
            Element of the search plan graph representing an element within the pattern graph or a root node.
            </summary>>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanNodeNode">
            <summary>
            Element of the search plan graph representing a node within the pattern graph.
            </summary>>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanNodeNode.IncomingPatternEdges">
            <summary>
            IncomingPatternEdges are the search plan nodes which originate from the incoming pattern edges of the pattern node this node represents
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanNodeNode.OutgoingPatternEdges">
            <summary>
            OutgoingPatternEdges are the search plan nodes which originate from the outgoing pattern edges of the pattern node this node represents
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanNodeNode.nodeMatcher">
            <summary>
            the node matcher interpretation plan operation created for this node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode">
            <summary>
            Element of the search plan graph representing an edge within the pattern graph.
            </summary>>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode.PatternEdgeSource">
            <summary>
            PatternEdgeSource gives us the search plan node which originated from the source of the pattern edge this node represents
            PatternEdgeTarget gives us the search plan node which originated from the target of the pattern edge this node represents
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode.PatternEdgeTarget">
            <summary>
            PatternEdgeSource gives us the search plan node which originated from the source of the pattern edge this node represents
            PatternEdgeTarget gives us the search plan node which originated from the target of the pattern edge this node represents
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode.edgeMatcher">
            <summary>
            the edge matcher interpretation plan operation created for this edge
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode.directionVariable">
            <summary>
            the direction variable interpretation plan operation created for this edge
            in case this is an edge to be matched bidirectionally in the graph
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanEdge">
            <summary>
            A search plan edge represents a matching operation and its costs.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchPlanGraph">
            <summary>
            The search plan graph data structure for scheduling.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOperation">
            <summary>
            Base class for all search program operations, containing concatenation fields,
            so that search program operations can form a linked search program list
            - double linked list; next points to the following list element or null;
            previous points to the preceding list element 
            or the enclosing search program operation within the list anchor element
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            dumps search program operation (as string) into source builder
            to be implemented by concrete subclasses
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            emits c# code implementing search program operation into source builder
            to be implemented by concrete subclasses
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Append(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Appends the given element to the search program operations list
            whose closing element until now was this element.
            Returns the new closing element - the given element.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.Insert(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Insert the given element into the search program operations list
            between this and the succeeding element.
            Returns the element after this - the given element.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.IsSearchNestingOperation">
            <summary>
            returns whether operation is a search nesting operation 
            containing other elements within some list inside
            bearing the search nesting/iteration structure.
            default: false (cause only few operations are search nesting operations)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.GetNestedSearchOperationsList">
            <summary>
            returns the nested search operations list anchor
            null if list not created or IsSearchNestingOperation == false.
            default: null (cause only few search operations are nesting operations)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOperation.GetEnclosingSearchOperation">
            <summary>
            returns operation enclosing this operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramList">
            <summary>
            Search program list anchor element,
            containing first list element within inherited Next member
            Inherited to be able to access the first element via Next
            Previous points to enclosing search program operation
            (starts list, but doesn't contain one)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgram">
            <summary>
            Abstract base class for search programs.
            A search program is a list of search program operations,
              some search program operations contain nested search program operations,
              yielding a search program operation tree in fact
            represents/assembling a backtracking search program,
            for finding a homomorphic mapping of the pattern graph within the host graph.
            A search program is itself the outermost enclosing operation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgram.GenerateIndependentsMatchObjects(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Generates match objects of independents
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfAction">
            <summary>
            Class representing the search program of a matching action, i.e. some test or rule
            The list forming concatenation field is used for adding missing preset search subprograms.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfAction.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program followed by missing preset search subprograms
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfAction.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for all search programs
            first head of matching function of the current search program
            then the search program operations list in depth first walk over search program operations list
            then tail of matching function of the current search program
            and finally continues in missing preset search program list by emitting following search program
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfActionParallelizationHead">
            <summary>
            Class representing the search program of the head of a parallelized matching action, i.e. some test or rule
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfActionParallelizationHead.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program followed by missing preset search subprograms
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfActionParallelizationHead.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for all search programs
            first head of matching function of the current search program
            then the search program operations list in depth first walk over search program operations list
            then tail of matching function of the current search program
            and finally continues in missing preset search program list by emitting following search program
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfActionParallelizationBody">
            <summary>
            Class representing the search program of the body of a parallelized matching action, i.e. some test or rule
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfActionParallelizationBody.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program followed by missing preset search subprograms
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfActionParallelizationBody.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for all search programs
            first head of matching function of the current search program
            then the search program operations list in depth first walk over search program operations list
            then tail of matching function of the current search program
            and finally continues in missing preset search program list by emitting following search program
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfSubpattern">
            <summary>
            Class representing the search program of a subpattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfSubpattern.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfSubpattern.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for the search program
            head, search program operations list in depth first walk over search program operations list, tail
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfAlternative">
            <summary>
            Class representing the search program of an alternative
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfAlternative.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfAlternative.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for the search program
            head, search program operations list in depth first walk over search program operations list, tail
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramOfIterated">
            <summary>
            Class representing the search program of an iterated pattern 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfIterated.Dump(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Dumps search program 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramOfIterated.Emit(de.unika.ipd.grGen.lgsp.SourceBuilder)">
            <summary>
            Emits the matcher source code for the search program
            head, search program operations list in depth first walk over search program operations list, tail
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetPartialMatchOfAlternative">
            <summary>
            Class representing "match the pattern of the alternative case" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ExtractVariable">
            <summary>
            Class representing "draw variable from input parameters array" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.EntityType">
            <summary>
            Available entity types 
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.DeclareDefElement">
            <summary>
            Class representing "declare a def to be yielded to variable" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckOperation">
            <summary>
            Base class for search program check operations
            contains list anchor for operations to execute when check failed
            (check is not a search operation, thus the check failed operations are not search nested operations)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetType">
            <summary>
            Base class for search program type determining operations,
            setting current type for following get candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByIterationType">
            <summary>
            Available types of GetTypeByIteration operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByIteration">
            <summary>
            Class representing "iterate over the allowed types" operation,
            setting type id to use in the following get candidate by element iteration
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetTypeByDrawing">
            <summary>
            Class representing "get the allowed type" operation,
            setting type id to use in the following get candidate by element iteration
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidate">
            <summary>
            Base class for search program candidate determining operations,
            setting current candidate for following check candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByIterationType">
            <summary>
            Available types of GetCandidateByIteration operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IncidentEdgeType">
            <summary>
            The different possibilites an edge might be incident to some node
            incoming; outgoing; incoming or outgoing if arbitrary directed, undirected, arbitrary
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IndexAccessType">
            <summary>
            The different possibilties an index might be accessed
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByIteration">
            <summary>
            Class representing "get candidate by iteration" operations,
            setting current candidate for following check candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByIterationParallel">
            <summary>
            Class representing parallelized "get candidate by iteration" operations,
            setting current candidate for following check candidate operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByIterationParallelSetup">
            <summary>
            Class representing setup of parallelized "get candidate by iteration" operations,
            distributing work to worker threads, collecting their results
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByDrawingType">
            <summary>
            Available types of GetCandidateByDrawing operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ImplicitNodeType">
            <summary>
            The different possibilites of drawing an implicit node from an edge
            if directed edge: source, target
            if arbitrary directed, undirected, arbitrary: source-or-target for first node, the-other for second node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GetCandidateByDrawing">
            <summary>
            Class representing "get node (or edge) by drawing" operation,
            setting current candidate for following check candidate operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.WriteParallelPreset">
            <summary>
            Class representing "get node or edge by drawing" operation,
            setting current candidate for following check candidate operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.WriteParallelPresetVar">
            <summary>
            Class representing "get variable by drawing" operation,
            setting current candidate for following check candidate operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BothDirectionsIteration">
            <summary>
            Class representing operation iterating both directions of an edge of unfixed direction 
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ReturnPreventingDummyIteration">
            <summary>
            Class representing nesting operation which executes the body once;
            needed for iterated, to prevent a return out of the matcher program
            circumventing the maxMatchesIterReached code which must get called if matching fails
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidate">
            <summary>
            Base class for search program candidate filtering operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForTypeType">
            <summary>
            Available types of CheckCandidateForType operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForType">
            <summary>
            Class representing "check whether candidate is of allowed type" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForIdentity">
            <summary>
            Class representing "check whether candidate is identical to another element" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateFailed">
            <summary>
            Class representing some check candidate operation,
            which was determined at generation time to always fail 
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForConnectednessType">
            <summary>
            The different positions of some edge to check the candidate node against
            if directed edge: source, target
            if arbitrary directed, undirected, arbitrary edge: source-or-target for first node, the-other for second node
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForConnectedness">
            <summary>
            Class representing "check whether candidate is connected to the elements
              it should be connected to, according to the pattern" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForIsomorphy">
            <summary>
            Class representing "check whether candidate is not already mapped 
              to some other local pattern element within this isomorphy space, to ensure required isomorphy" operation
            required graph element to pattern element mapping is written/removed by AcceptCandidate/AbandonCandidate
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForIsomorphyGlobal">
            <summary>
            Class representing "check whether candidate is not already mapped 
              to some other non-local pattern element within this isomorphy space, to ensure required isomorphy" operation
            required graph element to pattern element mapping is written by AcceptCandidateGlobal/AbandonCandidateGlobal
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateForIsomorphyPatternPath">
            <summary>
            Class representing "check whether candidate is not already mapped 
              to some other pattern element on the pattern derivation path, to ensure required isomorphy" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateMapWithStorage">
            <summary>
            Class representing "check whether candidate is contained in the storage map" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateMapByName">
            <summary>
            Class representing "check whether candidate is contained in the name map" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckCandidateMapByUnique">
            <summary>
            Class representing "check whether candidate is contained in the unique index" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatch">
            <summary>
            Base class for search program operations
            filtering partial match
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegativeOrIndependent">
            <summary>
            Base class for search program operations
            filtering partial match by searching further patterns based on found one
            i.e. by negative or independent patterns (nac/pac)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegative">
            <summary>
            Class representing "check whether the negative pattern applies" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByIndependent">
            <summary>
            Class representing "check whether the independent pattern applies" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchByCondition">
            <summary>
            Class representing "check whether the condition applies" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchForSubpatternsFound">
            <summary>
            Class representing "check whether the subpatterns of the pattern were found" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckPartialMatchForDuplicate">
            <summary>
            Class representing "check whether the current partial match is a duplicate" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.FillPartialMatchForDuplicateChecking">
            <summary>
            Class representing a fill operation of the current partial match into a set to prevent duplicates
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AcceptCandidate">
            <summary>
            Class representing operations to execute upon candidate checking succeded;
            writing isomorphy information to graph, for isomorphy checking later on
            (mapping graph element to pattern element)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AcceptCandidateGlobal">
            <summary>
            Class representing operations to execute upon candidate gets accepted 
            into a complete match of its subpattern, locking candidate for other subpatterns
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AcceptCandidatePatternpath">
            <summary>
            Class representing operations to execute upon candidate gets accepted 
            into a complete match of its subpattern, locking candidate for patternpath checks later on
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AcceptIterated">
            <summary>
            Class representing operations to execute upon iterated pattern was accepted (increase counter)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AbandonCandidate">
            <summary>
            Class representing operations undoing effects of candidate acceptance 
            when performing the backtracking step;
            (currently only) restoring isomorphy information in graph, as not needed any more
            (mapping graph element to pattern element)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AbandonCandidateGlobal">
            <summary>
            Class representing operations undoing effects of candidate acceptance 
            into complete match of it's subpattern when performing the backtracking step (unlocks candidate)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AbandonCandidatePatternpath">
            <summary>
            Class representing operations undoing effects of patternpath candidate acceptance 
            into complete match of it's subpattern when performing the backtracking step (unlocks candidate)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AbandonIterated">
            <summary>
            Class representing operations to execute upon iterated pattern was abandoned (decrease counter)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CreateInlinedSubpatternMatch">
            <summary>
            Class representing create inlined subpattern matches operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PositivePatternWithoutSubpatternsMatched">
            <summary>
            Class yielding operations to be executed 
            when a positive pattern without contained subpatterns was matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LeafSubpatternMatched">
            <summary>
            Class yielding operations to be executed 
            when a subpattern without contained subpatterns was matched (as the last element of the search)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternAndSubpatternsMatchedType">
            <summary>
            Available types of PatternAndSubpatternsMatched operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PatternAndSubpatternsMatched">
            <summary>
            Class yielding operations to be executed 
            when a positive pattern was matched and all of it's subpatterns were matched at least once
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NegativeIndependentPatternMatchedType">
            <summary>
            Available types of NegativeIndependentPatternMatched operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NegativePatternMatched">
            <summary>
            Class yielding operations to be executed 
            when a negative pattern was matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.IndependentPatternMatched">
            <summary>
            Class yielding operations to be executed 
            when a independent pattern was matched
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BuildMatchObjectType">
            <summary>
            Available types of BuildMatchObject operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BuildMatchObject">
            <summary>
            Class representing "pattern was matched, now build match object" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BubbleUpYieldAssignment">
            <summary>
            Class representing implicit yield assignment operations,
            to bubble up values from nested patterns and subpatterns to the containing pattern
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BubbleUpYieldIterated">
            <summary>
            Class representing a block around implicit yield bubble up assignments for nested iterateds
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AccumulateUpYieldIterated">
            <summary>
            Class representing a block around explicit yield accumulate up assignments for nested iterateds
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.BubbleUpYieldAlternativeCase">
            <summary>
            Class representing a block around implicit yield bubble up assignments for nested alternatives
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.LocalYielding">
            <summary>
            Class representing (explicit) local yielding operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.YieldingBlock">
            <summary>
            Class representing a yielding block
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AdjustListHeadsTypes">
            <summary>
            Available types of AdjustListHeads operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AdjustListHeads">
            <summary>
            Class representing "adjust list heads" operation ("listentrick")
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatching">
            <summary>
            Base class for search program operations
            to check whether to continue the matching process 
            (of the pattern part under construction)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingTasksLeft">
            <summary>
            Class representing "check if matching process is to be aborted because
            there are no tasks to execute left" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckMaximumMatchesType">
            <summary>
            available types of check continue matching maximum matches reached operations (at which level/where nested inside does the check occur?)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingMaximumMatchesReached">
            <summary>
            Class representing "check if matching process is to be aborted because
            the maximum number of matches has been reached" operation
            listHeadAdjustment==false prevents listentrick
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingOfNegativeFailed">
            <summary>
            Class representing check abort matching process operation
            which was determined at generation time to always succeed.
            Check of abort negative matching process always succeeds
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingOfIndependentFailed">
            <summary>
            Class representing check abort matching process operation
            which was determined at generation time to always succeed.
            Check of abort independent matching process always succeeds
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingOfIndependentSucceeded">
            <summary>
            Class representing check abort matching process operation
            which was determined at generation time to always fail.
            Check of abort independent matching process always fails
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.CheckContinueMatchingIteratedPatternNonNullMatchFound">
            <summary>
            Class representing "check if matching process is to be continued with iterated pattern null match" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ContinueOperationType">
            <summary>
            Available types of ContinueOperation operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.ContinueOperation">
            <summary>
            Class representing "continue matching there" control flow operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.GotoLabel">
            <summary>
            Class representing location within code named with label,
            potential target of goto operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.RandomizeListHeadsTypes">
            <summary>
            Available types of RandomizeListHeads operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.RandomizeListHeads">
            <summary>
            Class representing "adjust list heads" operation ("listentrick")
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PushAndPopSubpatternTaskTypes">
            <summary>
            Available types of PushSubpatternTask and PopSubpatternTask operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PushSubpatternTask">
            <summary>
            Class representing "push a subpattern tasks to the open tasks stack" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PopSubpatternTask">
            <summary>
            Class representing "pop a subpattern tasks from the open tasks stack" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.MatchSubpatterns">
            <summary>
            Class representing "execute open subpattern matching tasks" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.NewMatchesListForFollowingMatches">
            <summary>
            Class representing "create new matches list for following matches" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InitializeFinalizeSubpatternMatchingType">
            <summary>
            Available types of InitializeSubpatternMatching and the corresponding FinalizeSubpatternMatching operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InitializeSubpatternMatching">
            <summary>
            Class representing "initialize subpattern matching" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.FinalizeSubpatternMatching">
            <summary>
            Class representing "finalize subpattern matching" operation
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.InitializeNegativeIndependentMatching">
            <summary>
            Class representing "initialize negative/independent matching" operation
            it opens an isomorphy space at the next isoSpace number, finalizeXXX will close it
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.FinalizeNegativeIndependentMatching">
            <summary>
            Class representing "finalize negative/independent matching" operation
            it closes an isomorphy space opened by initializeXXX, returning to the previous isoSpace
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.PushMatchForPatternpath">
            <summary>
            Class representing "push match for patternpath" operation
            push match to the match objects stack used for patternpath checking
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.AssignVariableFromExpression">
            <summary>
            Class representing "assign variable from expression" operation,
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramType">
            <summary>
            says what kind of search program to build
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramBuilder">
            <summary>
            class for building search program data structure from scheduled search plan
            holds environment variables for this build process
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildSearchProgram(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPRulePattern,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Builds search program from scheduled search plan at given index in pattern graph of the action rule pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildSearchProgram(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,System.Boolean,System.Boolean)">
            <summary>
            Builds search program from scheduled search plan in pattern graph of the subpattern rule pattern
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildSearchProgram(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.Alternative,System.Boolean,System.Boolean)">
            <summary>
            Builds search program for alternative from scheduled search plans of the alternative cases
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildSearchProgram(de.unika.ipd.grGen.libGr.IGraphModel,de.unika.ipd.grGen.lgsp.LGSPMatchingPattern,de.unika.ipd.grGen.lgsp.PatternGraph,System.Boolean,System.Boolean)">
            <summary>
            Builds search program for iterated from scheduled search plan of iterated pattern graph
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertVariableDeclarations(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Inserts declarations for variables extracted from parameters
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.programType">
            <summary>
            type of the program which gets currently built
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.model">
            <summary>
            The model for which the matcher functions shall be generated.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.patternGraphWithNestingPatterns">
            <summary>
            the pattern graph to build with its nesting patterns
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.isNegative">
            <summary>
            is the pattern graph a negative pattern graph?
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.isNestedInNegative">
            <summary>
            is the current pattern graph nested within a negative pattern graph?
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.alternative">
            <summary>
            the alternative to build
            non-null if the builder constructs an alternative
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.rulePatternClassName">
            <summary>
            name of the rule pattern class of the pattern graph
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.parameterTypes">
            <summary>
            types of the parameters of the action (null if not an action)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.parameterNames">
            <summary>
            names of the parameters of the action (null if not an action)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.isoSpaceNeverAboveMaxIsoSpace">
            <summary>
            true if statically determined that the iso space number of the pattern getting constructed 
            is always below the maximum iso space number (the maximum nesting level of the isomorphy spaces)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.MAXIMUM_NUMBER_OF_TYPES_TO_CHECK_BY_TYPE_ID">
            <summary>
            name says everything
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.indexOfSchedule">
            <summary>
            The index of the currently built schedule
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.parallelized">
            <summary>
            whether to build the parallelized matcher from the parallelized schedule
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.emitProfiling">
            <summary>
            whether to emit code for gathering profiling information (about search steps executed)
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.packagePrefixedActionName">
            <summary>
            the package prefixed name of the action in case we're building a rule/test, otherwise null
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.firstLoopPassed">
            <summary>
            tells whether the first loop of the search programm was built, or not yet
            needed for the profile that does special statistics for the first loop,
            because this is the one that will get parallelized in case of action parallelization
            only of relevance if programType == SearchProgramType.Action, otherwise the type pinns it to true
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.BuildScheduledSearchPlanOperationIntoSearchProgram(System.Int32,de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Builds search program operations from scheduled search plan operation.
            Decides which specialized build procedure is to be called.
            The specialized build procedure then calls this procedure again, 
            in order to process the next search plan operation.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildActionPreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            ActionPreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildNegIdptPreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            NegIdptPreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildSubPreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            SubPreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildDefToBeYieldedTo(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,System.Object)">
            <summary>
            Search program operations implementing the
            DefElementToBeYieldedTo search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildLookup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            Lookup search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildPickFromStorage(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            PickFromStorage search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildPickFromStorageDependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            PickFromStorageDependent search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildPickFromIndex(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IndexAccess,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            PickFromIndex search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildPickByName(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.NameLookup,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            PickByName or PickByNameDependent search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildPickByUnique(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.UniqueLookup,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            PickByUnique or PickByUniqueDependent search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildCast(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            Cast search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildAssign(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            Assign search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildIdentity(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            Identity search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildAssignVar(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternVariable,de.unika.ipd.grGen.expression.Expression)">
            <summary>
            Search program operations implementing the
            AssignVar search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildMapWithStorage(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.StorageAccessIndex,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            MapWithStorage search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildMapWithStorageDependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.StorageAccessIndex,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            MapWithStorageDependent search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildImplicit(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation,de.unika.ipd.grGen.lgsp.ImplicitNodeType)">
            <summary>
            Search program operations implementing the
            Implicit Source|Target|SourceOrTarget search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildIncident(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation,de.unika.ipd.grGen.lgsp.IncidentEdgeType)">
            <summary>
            Search program operations implementing the
            Extend Incoming|Outgoing|IncomingOrOutgoing search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildNegative(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Search program operations implementing the
            Negative search plan operation (searching of negative application condition)
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildIndependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Search program operations implementing the
            Independent search plan operation (searching of positive application condition)
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildInlinedIndependentCheckForDuplicateMatch(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32)">
            <summary>
            Search program operations implementing the
            check for duplicate match search plan operation (needed in case an independent was inlined)
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildCondition(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternCondition)">
            <summary>
            Search program operations implementing the
            Condition search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildLockLocalElementsForPatternpath(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32)">
            <summary>
            Search program operations implementing the
            LockLocalElementsForPatternpath search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildWriteParallelPreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode)">
            <summary>
            Search program operations implementing the
            WriteParallelPreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildWriteParallelPresetVar(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternVariable)">
            <summary>
            Search program operations implementing the
            WriteParallelPresetVar search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelPreset(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode)">
            <summary>
            Search program operations implementing the
            ParallelPreset search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelPresetVar(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.PatternVariable)">
            <summary>
            Search program operations implementing the
            ParallelPresetVar search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelLookupSetup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode)">
            <summary>
            Search program operations implementing the
            setup parallelized Lookup search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelLookup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            parallelized Lookup search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelPickFromStorageSetup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.StorageAccess)">
            <summary>
            Search program operations implementing the
            setup parallelized PickFromStorage search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelPickFromStorage(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            parallelized PickFromStorage search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelPickFromStorageDependentSetup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.StorageAccess)">
            <summary>
            Search program operations implementing the
            setup parallelized PickFromStorageDependent search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelPickFromStorageDependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.StorageAccess,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            parallelized PickFromStorageDependent search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelPickFromIndexSetup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IndexAccess)">
            <summary>
            Search program operations implementing the
            setup parallelized PickFromIndex search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelPickFromIndex(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.IndexAccess,de.unika.ipd.grGen.lgsp.IsomorphyInformation)">
            <summary>
            Search program operations implementing the
            parallelized PickFromIndex search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelIncidentSetup(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.IncidentEdgeType)">
            <summary>
            Search program operations implementing the
            setup parallelized Extend Incoming|Outgoing|IncomingOrOutgoing search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildParallelIncident(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Int32,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.IsomorphyInformation,de.unika.ipd.grGen.lgsp.IncidentEdgeType)">
            <summary>
            Search program operations implementing the
            parallelized Extend Incoming|Outgoing|IncomingOrOutgoing search plan operation
            are created and inserted into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.buildMatchComplete(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Search program operations completing the matching process
            after all pattern elements have been found are created and inserted into the program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertImplicitNodeFromEdge(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.ImplicitNodeType,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Inserts code to get an implicit node from an edge
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertInlinedMatchObjectCreation(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.SearchProgramBuilder.MatchObjectType)">
            <summary>
            Inserts code to create the match objects of the inlined subpatterns
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.MatchObjectType">
            <summary>
            the types of match objects there are, to be filled by insertMatchObjectBuilding
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertMatchObjectBuilding(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.SearchProgramBuilder.MatchObjectType,System.Boolean)">
            <summary>
            Inserts code to build the match object
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertYields(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.PatternGraph,System.String,System.Boolean)">
            <summary>
            Inserts code to yield, bubbling effects of nested yields upwards and computing local yields 
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertYieldAssignments(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.PatternGraph,System.String,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Inserts code for bubbling yield assignments
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPushSubpatternTasks(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to push the subpattern tasks to the open tasks stack 
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPopSubpatternTasks(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to pop the subpattern tasks from the open tasks stack
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertCheckForTasksLeft(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to check whether there are open tasks to handle left and code for case there are none
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertFillForDuplicateMatchChecking(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to insert the local match into a set used for duplicate checking
            at the given position, returns position after inserted operations.
            Duplicates may arise after independent inlining, when the non-inlined part was already matched with exactly the same elements.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertGlobalAccept(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to accept the matched elements globally
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPatternpathAccept(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Inserts code to accept the matched elements for patternpath checks
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertGlobalAbandon(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to abandon the matched elements globally
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPatternpathAbandon(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            Inserts code to abandon the matched elements for patternpath check
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertCheckForSubpatternsFound(de.unika.ipd.grGen.lgsp.SearchProgramOperation,System.Boolean)">
            <summary>
            Inserts code to check whether the subpatterns were found and code for case there were some
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertCheckForSubpatternsFoundNegativeIndependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to check whether the subpatterns were found and code for case there were some
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPatternFound(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to handle case top level pattern of action was found
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertPatternFoundNegativeIndependent(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to handle case negative/independent pattern was found
            at the given position, returns position after inserted operations
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.insertEndOfIterationHandling(de.unika.ipd.grGen.lgsp.SearchProgramOperation)">
            <summary>
            Inserts code to check whether iteration came to an end (pattern not found (again))
            and code to handle that case 
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertGetType(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which get type operation to use and inserts it
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within type iteration was built
            if type drawing was sufficient, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckType(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNode)">
            <summary>
            Decides which check type operation to build and inserts it into search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfNodeFromLookupOrPickOrMap(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given node just determined by lookup
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            if no direction iteration was needed, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfImplicitNodeFromEdge(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given node just drawn from edge
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            if no direction iteration was needed, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfNodeFixedDirection(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.CheckCandidateForConnectednessType)">
            <summary>
            Decides which check connectedness operations are needed for the given node and edge of fixed direction
            and inserts them into the search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfNodeBothDirections(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given node and edge in both directions
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            if no direction iteration was needed, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfEdgeFromLookupOrPickOrMap(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given edge determined by lookup
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            if no direction iteration was needed, insertion point == continuation point
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfIncidentEdgeFromNode(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,System.Boolean,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given edge determined from incident node
            and inserts them into the search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfEdgeFixedDirection(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,de.unika.ipd.grGen.lgsp.CheckCandidateForConnectednessType)">
            <summary>
            Decides which check connectedness operations are needed for the given edge of fixed direction
            and inserts them into the search program
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.decideOnAndInsertCheckConnectednessOfEdgeBothDirections(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode,System.Boolean,de.unika.ipd.grGen.lgsp.SearchProgramOperation@)">
            <summary>
            Decides which check connectedness operations are needed for the given edge in both directions
            and inserts them into the search program
            returns new insertion point and continuation point
             for continuing buildup after the stuff nested within both directions iteration was built
            todo: if no direction iteration was needed, insertion point == continuation point ?
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.NegativeIndependentNamePrefix(de.unika.ipd.grGen.lgsp.PatternGraph)">
            <summary>
            returns name prefix for candidate variables of the given pattern graph
            computed from current negative/independent pattern nesting
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentNodeIsFirstIncidentNodeOfEdge(de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if the node which gets currently determined in the schedule
            is the first incident node of the edge which gets connected to it
            only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentNodeIsSecondIncidentNodeOfEdge(de.unika.ipd.grGen.lgsp.SearchPlanNodeNode,de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if the node which gets currently determined in the schedule
            is the second incident node of the edge which gets connected to it
            only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentEdgeConnectsOnlyToFirstIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if only one incident node of the edge which gets currently determined in the schedule
            was already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentEdgeConnectsToFirstIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if at least one incident node of the edge which gets currently determined in the schedule
            was already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.currentEdgeConnectsToSecondIncidentNode(de.unika.ipd.grGen.lgsp.SearchPlanEdgeNode)">
            <summary>
            returns true if both incident nodes of the edge which gets currently determined in the schedule
            were already computed; only of interest for edges of unfixed direction
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.getCurrentMatchOfNestingPattern">
            <summary>
            Returns the variable which will evaluate at runtime to the match of the nesting pattern.
            Dependent on currently processed pattern graph of static nesting as given by nesting stack.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.getCurrentLastMatchAtPreviousNestingLevel">
            <summary>
            Returns the variable which will evaluate at runtime to the last match at the previous nesting level.
            Dependent on currently processed pattern graph of static nesting as given by nesting stack.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramBuilder.getInlinedElementByOriginalUnprefixedName(de.unika.ipd.grGen.lgsp.PatternGraph,de.unika.ipd.grGen.lgsp.PatternGraphEmbedding,System.String)">
            <summary>
            Returns the element from the pattern graph which was inserted by inlining the patternEmbedding
            and which originally bears the unprefixed name given
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SearchProgramCompleter">
            <summary>
            Class completing search programs
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.CompleteCheckOperationsInAllSearchPrograms(de.unika.ipd.grGen.lgsp.SearchProgram)">
            <summary>
            Iterate all search programs to complete check operations within each one
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.CompleteCheckOperations(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.GetPartialMatchOfAlternative,de.unika.ipd.grGen.lgsp.CheckPartialMatchByNegativeOrIndependent,de.unika.ipd.grGen.lgsp.SearchProgram)">
            <summary>
            Completes check operations in search program from given currentOperation on
            (taking borderlines set by enclosing search program and check negative into account)
            Completion:
            - determine continuation point
            - insert remove isomorphy opertions needed for continuing there
            - insert continuing operation itself
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveOutwardsAppendingListHeadAdjustment(de.unika.ipd.grGen.lgsp.CheckContinueMatchingMaximumMatchesReached,System.Boolean)">
            <summary>
            "listentrick": append search program operations to adjust list heads
            i.e. set list entry point to element after last found,
            so that next searching starts there - performance optimization
            (leave graph in the state of our last visit (searching it))
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveOutwardsAppendingRemoveIsomorphyAndJump(de.unika.ipd.grGen.lgsp.CheckOperation,System.String[],de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchProgram)">
            <summary>
            move outwards from check operation until operation to continue at is found
            appending restore isomorphy for isomorphy written on the way
            and final jump to operation to continue at
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveRightAfterCorrespondingIndependentFailedAppendingRemoveIsomorphyAndJump(de.unika.ipd.grGen.lgsp.CheckContinueMatchingOfIndependentSucceeded,de.unika.ipd.grGen.lgsp.CheckPartialMatchByIndependent,de.unika.ipd.grGen.lgsp.SearchProgram)">
            <summary>
            move outwards from check succeeded operation until check partial match by independent is found
            appending restore isomorphy for isomorphy written on the way
            and final jump to operation right after the independent failed operation of the check partial match by independent
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SearchProgramCompleter.MoveOutwardsAppendingRemoveIsomorphy(de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchProgramOperation@,System.String[],de.unika.ipd.grGen.lgsp.SearchProgramOperation,de.unika.ipd.grGen.lgsp.SearchProgram)">
            <summary>
            move outwards from starting point on until operation to continue at is found
            appending restore isomorphy at insertion point for isomorphy written on the way
            returns operation to continue at
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.SourceBuilder">
            <summary>
            Pretty printing helper class for source code generation
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.lgsp.SourceBuilder.CommentSourceCode">
            <summary>
            If true, the source code should be generated with comments.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.GraphCanonizer.Canonize(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Canonize a graph
            </summary>
            <param name="graph">The graph to canonize.</param>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.SimpleGraphCanonizer.Canonize(de.unika.ipd.grGen.lgsp.LGSPGraph)">
            <summary>
            Canonize a graph
            </summary>
            <param name="graph">The graph to canonize.</param>
        </member>
        <member name="T:de.unika.ipd.grGen.lgsp.WorkerPool">
            <summary>
            A thread pool of workers for parallelized pattern matching
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.WorkerPool.EnsurePoolSize(System.Int32)">
            <summary>
            Tries to ensure the pool contains numThreads for doing work.
            Returns the number of threads ensured, which may be lower due to a lower number of processors available
            (but won't be higher, even if another caller requested and was granted more threads).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.WorkerPool.StartWork(System.Int32)">
            <summary>
            Executes the work inside task with numThreads
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.lgsp.WorkerPool.WaitForWorkDone">
            <summary>
            Waits until the tasks were executed
            </summary>
        </member>
    </members>
</doc>
