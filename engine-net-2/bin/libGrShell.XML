<?xml version="1.0"?>
<doc>
    <assembly>
        <name>libGrShell</name>
    </assembly>
    <members>
        <member name="T:de.unika.ipd.grGen.grShell.FromToReader">
            <summary>
            A wrapper for a TextReader,
            which ensures that reading starts from the line following a line consisting of a given from string,
            and ends at the line before the line consisting of a given to string.
            From or to might be null meaning start at file start or end at file end.
            Only the subset of the methods needed by the CSharpCC lexer is implemented.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.grShell.GrShellImpl">
            <summary>
            Implementation class containing application logic for generated GrShell parser class.
            Public methods are called by the GrShell command line parser (which is called by the GrShellDriver),
            other classes access this shell main-functionality class via dedicated/limited interfaces/views.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.GrShellImpl.debugLayoutOptions">
            <summary>
            Maps layouts to layout option names to their values.
            This only reflects the settings made by the user and may even contain illegal entries,
            if the options were set before yComp was attached.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.GrShellImpl.debugOptions">
            <summary>
            Maps debug option names to their values.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.GrShellImpl.ShowAvailableAttributes(System.Collections.Generic.IEnumerable{de.unika.ipd.grGen.libGr.AttributeType},de.unika.ipd.grGen.libGr.GrGenType)">
            <summary>
            Displays the attribute types and names for the given attrTypes.
            If onlyType is not null, it shows only the attributes of exactly the type.
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.GrShellImpl.ShowAvailableNodeAttributes(System.Boolean,de.unika.ipd.grGen.libGr.NodeType)">
            <summary>
            Displays the attributes from the given type or all types, if typeName is null.
            If showAll is false, inherited attributes are not shown (only applies to a given type)
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.GrShellImpl.ShowAvailableEdgeAttributes(System.Boolean,de.unika.ipd.grGen.libGr.EdgeType)">
            <summary>
            Displays the attributes from the given type or all types, if typeName is null.
            If showAll is false, inherited attributes are not shown (only applies to a given type)
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.grShell.GrShellSequenceApplierAndDebugger">
            <summary>
            GrShellImpl part that controls applying the sequences, optionally utilizing the debugger.
            Inherits from the DebuggerEnvironment, required by the debugger (adapting the base implementation meant for non-shell usage by overriding as needed).
            form TODO: check whether overriden behaviour of DebuggerEnvironement is really needed
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.GrShellSequenceApplierAndDebugger.SetDebugMode(System.Boolean)">
            <summary>
            Enables or disables debug mode.
            </summary>
            <param name="enable">Whether to enable or not.</param>
            <returns>True, if the mode has the desired value at the end of the function.</returns>
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.GrShellSequenceApplierAndDebugger.ReadKeyWithCancel">
            <summary>
            Reads a key from the keyboard using the workaround manager.
            If CTRL+C is pressed, grShellImpl.Cancel() is called.
            </summary>
            <returns>The ConsoleKeyInfo object for the pressed key.</returns>
        </member>
        <member name="T:de.unika.ipd.grGen.grShell.ParseException">
            <summary>
            This exception is thrown when parse errors are encountered.
            </summary>
            <remarks>
            You can explicitly create objects of this exception type by
            calling the method GenerateParseException in the generated
            parser.
            <para>
            You can modify this class to customize your error reporting
            mechanisms so long as you retain the public fields.
            </para>
            </remarks>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:de.unika.ipd.grGen.grShell.ParseException.#ctor(de.unika.ipd.grGen.grShell.Token,System.Int32[][],System.String[])" ignoriert -->
        <member name="M:de.unika.ipd.grGen.grShell.ParseException.#ctor">
            The following constructors are for use by you for whatever
            purpose you can think of.  Constructing the exception in this
            manner makes the exception behave in the normal way - i.e., as
            documented in the class "Throwable".  The fields "errorToken",
            "expectedTokenSequences", and "tokenImage" do not contain
            relevant information.  The JavaCC generated code does not use
            these constructors.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.ParseException.specialConstructor">
            This variable determines which constructor was used to create
            this object and thereby affects the semantics of the
            "getMessage" method (see below).
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.ParseException.currentToken">
            This is the last token that has been consumed successfully.  If
            this object has been created due to a parse error, the token
            followng this token will (therefore) be the first error token.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.ParseException.expectedTokenSequences">
            Each entry in this array is an array of integers.  Each array
            of integers represents a sequence of tokens (by their ordinal
            values) that is expected at this point of the parse.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.ParseException.tokenImage">
            This is a reference to the "tokenImage" array of the generated
            parser within which the parse error occurred.  This array is
            defined in the generated ...Constants interface.
        </member>
        <member name="P:de.unika.ipd.grGen.grShell.ParseException.Message">
            This method has the standard behavior when this object has been
            created using the standard constructors.  Otherwise, it uses
            "currentToken" and "expectedTokenSequences" to generate a parse
            error message and returns it.  If this object has been created
            due to a parse error, and you do not catch it (it gets thrown
            from the parser), then this method is called during the printing
            of the final stack trace, and hence the correct error message
            gets displayed.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.ParseException.eol">
            The end of line string for this machine.
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.ParseException.AddEscapes(System.String)">
            Used to convert raw characters to their escaped version
            when these raw version cannot be used as part of an ASCII
            string literal.
        </member>
        <member name="T:de.unika.ipd.grGen.grShell.SimpleCharStream">
            <summary>
            An implementation of interface CharStream, where the stream is assumed to
            contain only ASCII characters (without unicode processing).
            </summary>
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.SimpleCharStream.AdjustBeginLineColumn(System.Int32,System.Int32)">
            <summary>
            Method to adjust line and column numbers for the start of a token.
            </summary>
        </member>
        <member name="T:de.unika.ipd.grGen.grShell.Token">
            <summary>
            Describes the input token stream.
            </summary>
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.Token.kind">
            An integer that describes the kind of this token.  This numbering
            system is determined by JavaCCParser, and a table of these numbers is
            stored in the file ...Constants.cs.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.Token.beginLine">
            beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.Token.beginColumn">
            beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.Token.endLine">
            beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.Token.endColumn">
            beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.Token.image">
            The string image of the token.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.Token.next">
            A reference to the next regular (non-special) token from the input
            stream.  If this is the last token from the input stream, or if the
            token manager has not read tokens beyond this one, this field is
            set to null.  This is true only if this token is also a regular
            token.  Otherwise, see below for a description of the contents of
            this field.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.Token.specialToken">
            This field is used to access special tokens that occur prior to this
            token, but after the immediately preceding regular (non-special) token.
            If there are no such special tokens, this field is set to null.
            When there are more than one such special token, this field refers
            to the last of these special tokens, which in turn refers to the next
            previous special token through its specialToken field, and so on
            until the first special token (whose specialToken field is null).
            The next fields of special tokens refer to other special tokens that
            immediately follow it (without an intervening regular token).  If there
            is no such token, this field is null.
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.Token.ToString">
            Returns the image.
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.Token.NewToken(System.Int32)">
             Returns a new Token object, by default. However, if you want, you
             can create and return subclass objects based on the value of ofKind.
             Simply add the cases to the switch for all those special cases.
             For example, if you have a subclass of Token called IDToken that
             you want to create if ofKind is ID, simlpy add something like :
            
                case MyParserConstants.ID : return new IDToken();
            
             to the following switch statement. Then you can cast matchedToken
             variable to the appropriate type and use it in your lexical actions.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.TokenMgrError.LexicalError">
            Lexical error occured.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.TokenMgrError.StaticLexerError">
            An attempt wass made to create a second instance of a static token manager.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.TokenMgrError.InvalidLexicalState">
            Tried to change to an invalid lexical state.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.TokenMgrError.LoopDetected">
            Detected (and bailed out of) an infinite loop in the token manager.
        </member>
        <member name="F:de.unika.ipd.grGen.grShell.TokenMgrError.errorCode">
            Indicates the reason why the exception is thrown. It will have
            one of the above 4 values.
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.TokenMgrError.AddEscapes(System.String)">
            Replaces unprintable characters by their espaced (or unicode escaped)
            equivalents in the given string
        </member>
        <member name="M:de.unika.ipd.grGen.grShell.TokenMgrError.GetLexicalError(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Char)">
            Returns a detailed message for the Exception when it is thrown by the
            token manager to indicate a lexical error.
            Parameters : 
               EOFSeen     : indicates if EOF caused the lexicl error
               curLexState : lexical state in which this error occured
               errorLine   : line number when the error occured
               errorColumn : column number when the error occured
               errorAfter  : prefix that was seen before this error occured
               curchar     : the offending character
            Note: You can customize the lexical error message by modifying this method.
        </member>
        <member name="P:de.unika.ipd.grGen.grShell.TokenMgrError.Message">
             You can also modify the body of this method to customize your error messages.
             For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
             of end-users concern, so you can return something like : 
            
                 "Internal Error : Please file a bug report .... "
            
             from this method for such cases in the release version of your parser.
        </member>
    </members>
</doc>
