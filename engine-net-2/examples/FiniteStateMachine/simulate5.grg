// graph rewrite rule file, shows how a rule can emit text to stdout (or a file),
// how rules can execute rewrite sequences once they matched, here used for self recursion
// and how such embedded xgrs can yield values to the rule, to be returned out of the rule
// before was simulate4.grg

#using "NFAModel.gm"

#include "removeEpsilons3WithoutUsing.grg"

test getStartState : (StartState)
{
	start:StartState;
	return(start);
}

rule accept(state:State, var input:string) : (State)
{
	state -t:Transition-> successor:State;
	if { input.length()>0 && t.Trigger==input.substring(0, 1); }

	modify {
		def last:State;
		emit( "from " + state.id + " to " + successor.id + " with " + t.Trigger + " of " + input + "\n" );
		exec( (reduced:string)=eatChar(input) | (lastSuccess:State)=accept(successor, reduced) |
				if{ {{def(lastSuccess)}}; yield last=lastSuccess; yield last=successor } );
		return(last);
	}
}

test eatChar(var input:string) : (string)
{
	return(input.substring(1,input.length()-1));
}

test isFinalState(state:FinalState<State>)
{
}
