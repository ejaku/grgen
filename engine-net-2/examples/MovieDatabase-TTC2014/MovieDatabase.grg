#using "MovieDatabaseModel.gm"

#include "MovieDatabaseCreation.grg"
#include "MovieDatabaseIntermediateOpt.grg"
#include "MovieDatabaseCliques3.grg"
#include "MovieDatabaseCliques4.grg"
#include "MovieDatabaseCliques5.grg"

rule findCouples
{
	pn1:Person; pn2:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie <-:personToMovie- pn2;
		pn1 -:personToMovie-> m2:Movie <-:personToMovie- pn2;
		pn1 -:personToMovie-> m3:Movie <-:personToMovie- pn2;
	}
	
	modify {
		c:Couple;
		c -:p1-> pn1;
		c -:p2-> pn2;
	---
		exec(addCommonMoviesAndComputeAverageRanking(c, pn1, pn2));
	}
} \ auto

rule addCommonMoviesAndComputeAverageRanking(c:Couple, pn1:Person, pn2:Person)
{
	iterated it {
		pn1 -:personToMovie-> m:Movie <-:personToMovie- pn2;
		
		modify {
			c -:commonMovies-> m;
		---
			eval { yield sum = sum + m.rating; }
		}
	}	
	
	modify {
	---
		def var sum:double = 0.0;
		eval { c.avgRating = sum / count(it); }
	}
}

//----------------------------------------------------

rule findCouplesOpt[parallelize=16]
{
	pn1:Person; pn2:Person;
	hom(pn1,pn2);
	independent {
		pn1 -p2m1:personToMovie-> m1:Movie <-p2m2:personToMovie- pn2;
		hom(pn1,pn2); hom(p2m1,p2m2);
		if{ atLeastThreeCommonMovies(pn1, pn2); }
	}
	if{ uniqueof(pn1) < uniqueof(pn2); }
	if{ countFromIndex(countPersonToMovie, pn1) >= 3; }
	if{ countFromIndex(countPersonToMovie, pn2) >= 3; }
---	
	def ref common:set<Node>;
	yield {
		yield common = getCommonMovies(pn1, pn2);
	}
	
	modify {
		c:Couple;
		c -:p1-> pn1;
		c -:p2-> pn2;
	---
		eval { 
			for(movie:Node in common) { 
				add(commonMovies, c, movie); 
			} 
		}
	}
}

function atLeastThreeCommonMovies(pn1:Person, pn2:Person) : boolean
{
	if(countFromIndex(countPersonToMovie, pn1) <= countFromIndex(countPersonToMovie, pn2))
	{
		def var common:int = 0;
		def ref movies:set<Node> = adjacentOutgoing(pn1, personToMovie);
		for(movie:Node in adjacentOutgoing(pn2, personToMovie))
		{
			if(movie in movies) {
				common = common + 1;
				if(common >= 3) {
					return(true);
				}
			}
		}
	}
	else
	{
		def var common:int = 0;
		def ref movies:set<Node> = adjacentOutgoing(pn2, personToMovie);
		for(movie:Node in adjacentOutgoing(pn1, personToMovie))
		{
			if(movie in movies) {
				common = common + 1;
				if(common >= 3) {
					return(true);
				}
			}
		}
	}
	return(false);
}

function getCommonMovies(pn1:Person, pn2:Person) : set<Node>
{
	def ref common:set<Node> = set<Node>{};
	if(countFromIndex(countPersonToMovie, pn1) >= countFromIndex(countPersonToMovie, pn2))
	{
		def ref movies:set<Node> = adjacentOutgoing(pn2, personToMovie);
		for(movie:Node in adjacentOutgoing(pn1, personToMovie))
		{
			if(movie in movies) {
				common.add(movie);
			}
		}
	}
	else
	{
		def ref movies:set<Node> = adjacentOutgoing(pn1, personToMovie);
		for(movie:Node in adjacentOutgoing(pn2, personToMovie))
		{
			if(movie in movies) {
				common.add(movie);
			}
		}
	}
	return(common);
}

rule computeAverageRanking
{
	c:Couple;
	iterated it {
		c -:commonMovies-> m:Movie;
		
		modify {
		---
			eval { yield sum = sum + m.rating; }
		}
	}
	
	modify {
	---
		def var sum:double = 0.0;
		eval { c.avgRating = sum / count(it); }
	}
}

//----------------------------------------------------

rule couplesWithRating
{
	c:Couple;
	c -:p1-> pn1:Person;
	c -:p2-> pn2:Person;
---
	def var avgRating:double;
	def var numMovies:int;
	yield {
		yield avgRating = c.avgRating;
		yield numMovies = outgoing(c, commonMovies).size();
	}
	
	modify {
	---
		emit("avgRating: " + avgRating + " numMovies: " + numMovies + " by " + pn1.name + " and " + pn2.name + "\n");
	}
} \ orderDescendingBy<avgRating>, orderDescendingBy<numMovies>
