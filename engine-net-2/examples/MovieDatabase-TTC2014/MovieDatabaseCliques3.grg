rule findCliquesOf3
{
	pn1:Person; pn2:Person; pn3:Person;
	independent {
		pn1 -:personToMovie-> m1:Movie; pn2 -:personToMovie-> m1; pn3 -:personToMovie-> m1;
		pn1 -:personToMovie-> m2:Movie; pn2 -:personToMovie-> m2; pn3 -:personToMovie-> m2;
		pn1 -:personToMovie-> m3:Movie; pn2 -:personToMovie-> m3; pn3 -:personToMovie-> m3;
	}
	
	modify {
		c:Clique;
		c -:persons-> pn1;
		c -:persons-> pn2;
		c -:persons-> pn3;
	---
		exec(addCommonMoviesAndComputeAverageRankingOfClique3(c, pn1, pn2, pn3));
	}
} \ auto

rule addCommonMoviesAndComputeAverageRankingOfClique3(c:Clique, pn1:Person, pn2:Person, pn3:Person)
{
	iterated it {
		pn1 -:personToMovie-> m:Movie;
		pn2 -:personToMovie-> m;
		pn3 -:personToMovie-> m;
		
		modify {
			c -:commonMovies-> m;
		---
			eval { yield sum = sum + m.rating; }
		}
	}	
	
	modify {
	---
		def var sum:double = 0.0;	
		eval { c.avgRating = sum / count(it); }
	}
}

rule findCliquesOf3Opt[parallelize=16]
{
	pn1:Person; pn2:Person; pn3:Person;
	hom(pn1,pn2,pn3);
	independent {
		pn1 -p2m1:personToMovie-> m1:Movie; pn2 -p2m2:personToMovie-> m1; pn3 -p2m3:personToMovie-> m1;
		hom(pn1,pn2,pn3); hom(p2m1,p2m2,p2m3);
		if{ atLeastThreeCommonMoviesInArray(array<Person>[pn1, pn2, pn3]); }
	}
	if{ uniqueof(pn1) < uniqueof(pn2); }
	if{ uniqueof(pn2) < uniqueof(pn3); }
	if{ countFromIndex(countPersonToMovie, pn1) >= 3; }
	if{ countFromIndex(countPersonToMovie, pn2) >= 3; }
	if{ countFromIndex(countPersonToMovie, pn3) >= 3; }
	
	modify {
		c:Clique;
		c -:persons-> pn1;
		c -:persons-> pn2;
		c -:persons-> pn3;
	---
		exec([addCommonMoviesOf3(c, pn1, pn2, pn3)]);
	}
}

rule addCommonMoviesOf3(c:Clique, pn1:Person, pn2:Person, pn3:Person)
{
	pn1 -:personToMovie-> m:Movie;
	pn2 -:personToMovie-> m;
	pn3 -:personToMovie-> m;

	modify {
		c -:commonMovies-> m;
	}
}

rule computeAverageRankingCliques
{
	c:Clique;
	iterated it {
		c -:commonMovies-> m:Movie;
		
		modify {
		---
			eval { yield sum = sum + m.rating; }
		}
	}
	
	modify {
	---
		def var sum:double = 0.0;
		eval { c.avgRating = sum / count(it); }
	}
}

function atLeastThreeCommonMoviesInArray(ref persons:array<Person>) : boolean
{
	def var indexOfLeastConnectedPerson:int = getIndexOfLeastConnectedPerson(persons);
	def ref candidatesForCommonMovies:set<Node> = adjacentOutgoing(persons[indexOfLeastConnectedPerson], personToMovie);
	persons.rem(indexOfLeastConnectedPerson);

	while(persons.size() > 1)
	{
		def ref filteredCandidates:set<Node> = set<Node>{};
		indexOfLeastConnectedPerson = getIndexOfLeastConnectedPerson(persons);
		for(movie:Node in adjacentOutgoing(persons[indexOfLeastConnectedPerson], personToMovie))
		{
			if(movie in candidatesForCommonMovies) {
				filteredCandidates.add(movie);
			}
		}
		if(filteredCandidates.size() < 3) {
			return(false);
		} else {
			persons.rem(indexOfLeastConnectedPerson);
			candidatesForCommonMovies = filteredCandidates;
		}
	}

	def var common:int = 0;
	for(movie:Node in adjacentOutgoing(persons[0], personToMovie))
	{
		if(movie in candidatesForCommonMovies) {
			common = common + 1;
			if(common >= 3) {
				return(true);
			}
		}
	}
	return(false);
}

function getIndexOfLeastConnectedPerson(ref persons:array<Person>) : int
{
	def var idx:int = -1;
	def var value:int = 2147483647;
	for(i:int->p:Person in persons)
	{
		if(countFromIndex(countPersonToMovie, p) <= value) {
			value = countFromIndex(countPersonToMovie, p);
			idx = i;
		}
	}
	return(idx);
}

rule cliques3WithRating
{
	c:Clique;
	c -:persons-> pn1:Person;
	c -:persons-> pn2:Person;
	c -:persons-> pn3:Person;
	if{ uniqueof(pn1) < uniqueof(pn2) && uniqueof(pn2) < uniqueof(pn3); }
---
	def var avgRating:double;
	def var numMovies:int;
	yield {
		yield avgRating = c.avgRating;
		yield numMovies = outgoing(c, commonMovies).size();
	}
	
	modify {
	---
		emit("avgRating: " + avgRating + " numMovies: " + numMovies + " by " + pn1.name + " and " + pn2.name + " and " + pn3.name + "\n");
	}
} \ orderDescendingBy<avgRating>, orderDescendingBy<numMovies>
