// rule file containing rules and new: subpatterns, which allow to factor a common pattern/transformation
//  out into an entity, to prevent excessive nesting or allow re-using a pattern several times,
// to be distinguished: the subpattern type declaration defining the structure and the parameters/attachement points
//  from the subpattern entity declaration in the pattern using the subpattern, i.e. requesting it to match, from the nodes/edges given on
//  from the subpattern replacement usage by using call syntax on the subpattern entity in the rewrite part of the pattern containing the entity declaration
// if the subpattern entity name would not be used in the rewrite part, the subpattern would only get matched, but no rewrite would be applied
// before was ProgramGraphs2.grg, next is ProgramGraphs3b.grg

#using "ProgramGraphs.gm"

#include "ProgramGraphs0WithoutUsing.grg"

rule FirstStatementEx(mb:MethodBody)
{
	alternative
	{
		Assignment {
			mb -:next-> e:Expression;
			e -:writesTo->;
			e -:contains\next-> sub:Expression;
			cou:CallOrUse(sub, mb);

			modify {
				cou();
			}
		}
		Call {
			mb -:next-> e:Expression;
			e -ca:calls->;
			iterated
			{
				e -:contains\next-> arg:Expression;

				modify {
					delete(arg);
				}
			}

			modify {
				delete(ca);
				e -:uses-> :Constant <-:contains- mb;
			}
		}
		Return {
			mb -:next-> e:Expression;
			e -:uses->;

			modify { }
		}
		EndOfList {
			negative {
				mb -:next->;
			}

			modify { }
		}
	}

	modify {
	}
}

pattern CallOrUse(sub:Expression, mb:MethodBody)
{
	alternative
	{
		Call {
			sub -ca:calls->;
			iterated
			{
				sub -:contains\next-> arg:Expression;

				modify {
					delete(arg);
				}
			}

			modify {
				delete(ca);
				sub -:uses-> :Constant <-:contains- mb;
			}
		}
		Use {
			sub -:uses->;

			modify { }
		}
	}

	modify {
	}
}
