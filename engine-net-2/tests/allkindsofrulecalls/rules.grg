#using "model.gm"

rule init
{
	modify {
		:Node --> n1:N;
		:Node --> n2:N;
		:Node --> n3:N;
		
		m:M --> m;
		
		eval {
			n1.i = 1;
			n2.i = 2;
			n3.i = 3;
		}
	}
}

match class rs
{
	def var i:int;
} \ orderDescendingBy<i>

rule r implements rs
{
	n1:Node --> n2:N;
---
	def var i:int;
	yield {
		yield i = n2.i;
	}

	modify {
		delete(n1);
		n2b:M<n2>;
		:Node <-- n2b;
		eval {
			n2b.i = n2b.i + 1;
		}
	}
} \ orderDescendingBy<i>

rule s implements rs
{
	m:M --> m;
---
	def var i:int;
	yield {
		yield i = m.i;
	}

	modify {
		mb:N<m>;
		eval {
			mb.i = mb.i + 1;
		}
	}
}


sequence seqrule
{
	%r
}

sequence seqruleall
{
	[%r]
}

sequence seqruleallfilter
{
	[%r\orderDescendingBy<i>\keepFirst(2)]
}

sequence seqcountruleall
{
	count[%r] => ::c
}

sequence seqrandomruleall
{
	$%[%r]
}

sequence seqrandomruleallmax
{
	::v=2 ;> $%::v[%r]
}

sequence seqrandomruleallmaxmore
{
	::v=4 ;> $%::v[%r]
}

sequence seqrandomruleallminmax
{
	::v=2 ;> ::w=2 ;> $%::v,::w[%r]
}

sequence seqrandomruleallminmaxmore
{
	::v=4 ;> $%::v,::v[%r]
}

sequence seqrandomallof
{
	$%&([%r],%s)
}

sequence seqrandomallofrandomruleall
{
	$%&($%[%r],%s)
}

sequence seqweightedsome
{
	$%.(0.5%r, 0.5%s)
}

sequence seqsomefromset
{
	{<[%r],%s>}
}

sequence seqsomefromsetrandomruleall
{
	{<$[%r],%s>}
}

sequence seqonefromset
{
	$%{<[%r],%s>}
}

sequence seqonefromsetrandomruleall
{
	$%{<$[%r],%s>}
}


sequence seqformatches
{
	for{m:match<r> in [?r]; %s}
}

sequence seqtransaction
{
	<%r>
}

sequence seqmultiruleall
{
	[[%r,%s]]
}

sequence seqmultiruleallfilter
{
	[[%r,%s]\rs.orderDescendingBy<i>\rs.keepFirst(2)]
}

sequence seqbacktrack
{
	<<%r;; %s;>false>>
}

sequence seqmultibacktrack
{
	<<[[%r,%s]];; %s;>false>>
}

sequence seqquery
{
	{{[?%r].size()>0}}
}

sequence seqqueryfilter
{
	{{[?%r\orderDescendingBy<i>\keepFirst(2)].size()}}
}

sequence seqmultiquery
{
	{{[?[r,s]\<class rs>].size()>0}} // maybe todo: allow %
}

sequence seqmultiqueryfilter
{
	{{[?[r,s]\rs.orderDescendingBy<i>\rs.keepFirst(2)\<class rs>].size()>0}} // maybe todo: allow %
}

sequence seqmapping
{
	{{[:for{r;true}:].size()>0}}
}

sequence seqmultimapping
{
	{{[:for{r;true},for{s;true}:].size()>0}}
}

sequence seqforprefixed
{
	[for{r; s}]
}

sequence seqmultiforprefixed
{
	[[for{r; true}, for{s; false}]]
}

sequence seqmultiforprefixedbacktrack
{
	<<[[for{r; false}, for{s; true}]]>>
}

