#using "model.gm"

rule init
{
	modify {
		:Node --> n1:N;
		:Node --> n2:N;
		:Node --> n3:N;
		
		m1:M --> m1;
		m2:M --> m2;
		m3:M --> m3;
		
		eval {
			n1.i = 1;
			n2.i = 2;
			n3.i = 3;
		}
	}
}

rule init2
{
	modify {
		:Node --> n1:N;
		:Node --> n2:N;
		:Node --> n3:N;
		
		m1:M --> m1;
		m2:M --> m2;
		
		eval {
			n1.i = 1;
			n2.i = 2;
			n3.i = 3;
		}
	}
}

rule execstuff
{
	modify {
	---
		exec([r]);
	}
}

rule r
{
	:Node --> n:N;
	
	modify {
		n --> n;
	---
		exec((m:M)=s ;> t(m));
	}
}

rule s : (M)
{
	m:M -e:Edge-> m;
	
	modify {
		delete(e);
		return(m);
	}
}

rule t(m:M)
{	
	modify {
		delete(m);
	}
}

//////////////////////////////////////////////////////////

rule rexec
{
	n1:Node --> n2:N;
	
	modify {
		n1 --> n1;
	---
		//exec([?sexec]); executed as rule, should be test
		exec(sexec);
	}
}

rule sexec
{
	m:M --> m;
---
	def var i:int;
	yield {
		yield i = m.i;
	}

	modify {
		mb:N<m>;
		eval {
			mb.i = mb.i + 1;
		}
	}
}

//////////////////////////////////////////////////////////

rule rnoexec
{
	:Node --> n:N;
	
	modify {
		n --> n;
	}
}
