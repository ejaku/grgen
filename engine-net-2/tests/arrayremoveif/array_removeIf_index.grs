new graph arrayremoveif/array_removeIf_index

new :Node
new :Node
new :Node
new @("$1") - :Edge -> @("$1")
new @("$2") - :Edge -> @("$2")
new @("$2") - :Edge -> @("$2")

exec (::arr)=array_removeIf(array<int>[0,1,2], 42.0)
exec (::arr)=array_removeIf(array<int>[0,1,2], 1.0)
show var arr

exec (::arr)=array_removeIf_nested(array<int>[0,1,2], 7.0)
show var arr

exec { ::a = nodes().asArray().reverse() }
show var a

exec array_removeIf2(::a)
show var aa

eval [?array_removeIf3(::a, array<string>["$0","$1","$2"])]

eval [?array_removeIf3_nested(::a, array<string>["foo","bar","baz"])]

eval array_removeIf4(array<int>[0,1,2])

exec { (::arr) = array_removeIf5(::a, 42) }
show var arr

eval [?t\orderAscendingBy<attr>]
eval [?t\f\orderAscendingBy<attr>]

eval [?[t]\mc.orderAscendingBy<attr>\<class mc>]
eval [?[t]\mc.fmc\mc.orderAscendingBy<attr>\<class mc>]

eval [?t].map<int>{index_:int -> value:match<t> -> value.attr}
eval [?t].map<int>{index_:int -> value:match<t> -> value.attr}.removeIf{index_:int -> value:int -> value < 2}

exec (::x,::y) = rexec
show var x
show var y

exec { ::a37 = array<int>[3,7] }
eval ::a37.map<int>{index_:int -> value:int -> value * ::a37.removeIf{index_element:int -> element:int -> element < value}.sum()}
eval array<int>[3,7].removeIf{index_:int -> value:int -> value < array<int>[3,7].map<int>{index_element:int -> element:int -> value}.sum()}

exec (::x,::y) = rexec_nested(array<int>[3,7])
show var x
show var y

eval [?array_removeIf_index(array<string>["sack","ze","fix"])]
exec (::z)=array_removeIf_index(array<string>["ouuuh!","le","prophete"])
show var z

exec (::z)=rexec_index
show var z
eval [?t].removeIf{index_:int -> value:match<t> -> index_% 2 == 1}

quit
