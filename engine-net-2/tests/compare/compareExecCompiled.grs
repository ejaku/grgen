new graph "compare/compare"

exec { ::thisSet = new set<C>{ new C@(i=0), new C@(i=1), new C@(i=2) } }
exec { ::thatSet = new set<C>{ new C@(i=0), new C@(i=1), new C@(i=2) } }

exec { ::thisMap = new map<C,TC>{ new C@(i=0) -> new TC@(s="a"), new C@(i=1) -> new TC@(s="b"), new C@(i=2) -> new TC@(s="c") } }
exec { ::thatMap = new map<C,TC>{ new C@(i=0) -> new TC@(s="a"), new C@(i=1) -> new TC@(s="b"), new C@(i=2) -> new TC@(s="c") } }

exec { ::thisArray = new array<C>[ new C@(i=0), new C@(i=1), new C@(i=2) ] }
exec { ::thatArray = new array<C>[ new C@(i=0), new C@(i=1), new C@(i=2) ] }

exec { ::thisDeque = new deque<C>[ new C@(i=0), new C@(i=1), new C@(i=2) ] }
exec { ::thatDeque = new deque<C>[ new C@(i=0), new C@(i=1), new C@(i=2) ] }

exec (::res)=equalSetExec(::thisSet, ::thatSet)
show var res
exec (::res)=structuralEqualSetExec(::thisSet, ::thatSet)
show var res

exec (::res)=equalMapExec(::thisMap, ::thatMap)
show var res
exec (::res)=structuralEqualMapExec(::thisMap, ::thatMap)
show var res

exec (::res)=equalArrayExec(::thisArray, ::thatArray)
show var res
exec (::res)=structuralEqualArrayExec(::thisArray, ::thatArray)
show var res

exec (::res)=equalDequeExec(::thisDeque, ::thatDeque)
show var res
exec (::res)=structuralEqualDequeExec(::thisDeque, ::thatDeque)
show var res

quit
