new graph "compare/compare"

exec { ::thisSet = new set<C>{ new C@(i=0), new C@(i=1), new C@(i=2) } }
exec { ::thatSet = new set<C>{ new C@(i=0), new C@(i=1), new C@(i=2) } }

exec { ::thisMap = new map<C,TC>{ new C@(i=0) -> new TC@(s="a"), new C@(i=1) -> new TC@(s="b"), new C@(i=2) -> new TC@(s="c") } }
exec { ::thatMap = new map<C,TC>{ new C@(i=0) -> new TC@(s="a"), new C@(i=1) -> new TC@(s="b"), new C@(i=2) -> new TC@(s="c") } }

exec { ::thisArray = new array<C>[ new C@(i=0), new C@(i=1), new C@(i=2) ] }
exec { ::thatArray = new array<C>[ new C@(i=0), new C@(i=1), new C@(i=2) ] }

exec { ::thisDeque = new deque<C>[ new C@(i=0), new C@(i=1), new C@(i=2) ] }
exec { ::thatDeque = new deque<C>[ new C@(i=0), new C@(i=1), new C@(i=2) ] }

exec equalSetIf(::thisSet, ::thatSet)
exec structuralEqualSetIf(::thisSet, ::thatSet)

exec equalMapIf(::thisMap, ::thatMap)
exec structuralEqualMapIf(::thisMap, ::thatMap)

exec equalArrayIf(::thisArray, ::thatArray)
exec structuralEqualArrayIf(::thisArray, ::thatArray)

exec equalDequeIf(::thisDeque, ::thatDeque)
exec structuralEqualDequeIf(::thisDeque, ::thatDeque)

quit
