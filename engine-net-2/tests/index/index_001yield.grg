#using "index_model_001.gm"

rule r13 {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexSame(foo, 13)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule rascending {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexAscending(foo)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule rdescending {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexDescending(foo)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule rascendinglargerthan5lowerequal13 {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexFromExclusiveToAscending(foo, 5, 13)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule rascendinglargerequal5 {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexFromAscending(foo, 5)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule rascendinglowerthan13 {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexToExclusiveAscending(foo, 13)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule rdescendinglowerthan13largerequal5 {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexFromExclusiveToDescending(foo, 13, 5)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule rdescendinglowerequal13 {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexFromDescending(foo, 13)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule rdescendinglargerthan5 {
---
	def n:N;
	yield {
		for(m:N in nodesFromIndexToExclusiveDescending(foo, 5)) {
			yield n = m;
			break;
		}
	}
	
	modify {
	---
		emit("The value of attribute i is " + n.i + "\n");
	}
}

rule retypeNode(n:N) : (Node, int) {
	modify {
		m:Node<n>;
		return(m, n.i);
	}
}

rule retypeBack(n:Node, var i:int) {
	modify {
		m:N<n>;
		eval { m.i = i; }
	}
}
