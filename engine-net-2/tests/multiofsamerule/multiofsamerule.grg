rule init
{
	modify {
		n1:Node --> n1;
		n2:Node --> n2;
	}
}

match class mc
{
	n:Node;
}

rule r(n:Node):(Node) implements mc
{
	n -e:Edge-> n;
	
	modify {
		delete(e);
		return(n);
	}
}

rule t
{	
	modify {
		.;
	}
}

sequence multirulequery
{
	{ ::res = [?[r(::n1),r(::n2)]\<class mc>] }
}

sequence multiruleprefixedsequencequery
{
	{ ::res = [: for{r(::n1);false}, for{r(::n2);t} :] }
}

sequence multiruleall
{
	[[(::x)=r(::n1),(::y)=r(::n2)]]
}

sequence multiruleprefixedsequence
{
	[[ for{(::x)=r(::n1);false}, for{(::y)=r(::n2);t} ]]
}

sequence multibacktrack
{
	<<[[(::x)=r(::n1), (::y)=r(::n2)]];;false>>
}

sequence multiruleprefixedsequencebacktrack
{
	<<[[ for{(::x)=r(::n1);false}, for{(::y)=r(::n2);t} ]]>>
}
