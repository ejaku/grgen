node edge graph; // required by persistent graph when node/edge references are employed, to be relaxed in case there is always only the host graph available (and no other graphs) (TODO)

enum ENU { a, b, c }

node class N
{
	o:O = null;
	
	a_s:array<string> = [ "foo" ];
	a_by:array<byte> = [ 1y, 2y, 3y ];
	a_sh:array<short> = [ ];
	a_i:array<int> = [ ];
	a_l:array<long> = [ 42L ];
	a_f:array<float> = [ 3.141592654f, 2.718281828f ];
	a_d:array<double> = [ 44.0 ];
	a_b:array<boolean> = [ true ];
	a_e:array<ENU> = [ ENU::a, ENU::c ];
	
	a_N:array<N> = [ ];
	a_Ed:array<Edge> = [ ];
	a_O:array<O> = [ ];
}

edge class E
{
	o:O = null;
	
	a_s:array<string> = [ "bar" ];
	a_by:array<byte> = [ ];
	a_sh:array<short> = [ 1s, 2s, 3s ];
	a_i:array<int> = [ ];
	a_l:array<long> = [ 42L, 43L ];
	a_f:array<float> = [ 3.141592654f, 2.718281828f ];
	a_d:array<double> = [ 43.0, 44.0 ];
	a_b:array<boolean> = [ true, false ];
	a_e:array<ENU> = [ ENU::b ];
	
	a_N:array<N> = [ ];
	a_Ed:array<Edge> = [ ];
	a_O:array<O> = [ ];
}

class O
{
	a_s:array<string> = [ "baz" ];
	a_by:array<byte> = [ ];
	a_sh:array<short> = [ ];
	a_i:array<int> = [ 1, 2, 3 ];
	a_l:array<long> = [ 44L ];
	a_f:array<float> = [ 3.141592654f, 2.718281828f ];
	a_d:array<double> = [ 42.0 ];
	a_b:array<boolean> = [ false ];
	a_e:array<ENU> = [ ENU::b, ENU::c ];
	
	a_N:array<N> = [ ];
	a_Ed:array<Edge> = [ ];
	a_O:array<O> = [ ];
}
