node edge graph; // required by persistent graph when node/edge references are employed, to be relaxed in case there is always only the host graph available (and no other graphs) (TODO)

enum ENU { a, b, c }

node class N
{
	o:O = null;
	
	d_s:deque<string> = [ "foo" ];
	d_by:deque<byte> = [ 1y, 2y, 3y ];
	d_sh:deque<short> = [ ];
	d_i:deque<int> = [ ];
	d_l:deque<long> = [ 42L ];
	d_f:deque<float> = [ 3.141592654f, 2.718281828f ];
	d_d:deque<double> = [ 44.0 ];
	d_b:deque<boolean> = [ true ];
	d_e:deque<ENU> = [ ENU::a, ENU::c ];
	
	d_N:deque<N> = [ ];
	d_Ed:deque<Edge> = [ ];
	d_O:deque<O> = [ ];
}

edge class E
{
	o:O = null;
	
	d_s:deque<string> = [ "bar" ];
	d_by:deque<byte> = [ ];
	d_sh:deque<short> = [ 1s, 2s, 3s ];
	d_i:deque<int> = [ ];
	d_l:deque<long> = [ 42L, 43L ];
	d_f:deque<float> = [ 3.141592654f, 2.718281828f ];
	d_d:deque<double> = [ 43.0, 44.0 ];
	d_b:deque<boolean> = [ true, false ];
	d_e:deque<ENU> = [ ENU::b ];
	
	d_N:deque<N> = [ ];
	d_Ed:deque<Edge> = [ ];
	d_O:deque<O> = [ ];
}

class O
{
	d_s:deque<string> = [ "baz" ];
	d_by:deque<byte> = [ ];
	d_sh:deque<short> = [ ];
	d_i:deque<int> = [ 1, 2, 3 ];
	d_l:deque<long> = [ 44L ];
	d_f:deque<float> = [ 3.141592654f, 2.718281828f ];
	d_d:deque<double> = [ 42.0 ];
	d_b:deque<boolean> = [ false ];
	d_e:deque<ENU> = [ ENU::b, ENU::c ];
	
	d_N:deque<N> = [ ];
	d_Ed:deque<Edge> = [ ];
	d_O:deque<O> = [ ];
}
