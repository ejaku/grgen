node edge graph; // required by persistent graph when node/edge references are employed, to be relaxed in case there is always only the host graph available (and no other graphs) (TODO)

enum ENU { a, b, c }

node class N
{
	o:O = null;
	
	m_s:map<string, int> = { "foo"->0 };
	m_by:map<byte, byte> = { 1y->1Y, 2y->2Y, 3y->3Y };
	m_sh:map<short, short> = { };
	m_i:map<int, string> = { };
	m_l:map<long, long> = { 42L->42l };
	m_f:map<float, float> = { 3.141592654f->2.718281828f, 2.718281828f->3.141592654f };
	m_d:map<double, double> = { 44.0->44.0 };
	m_b:map<boolean, boolean> = { true->true };
	m_e:map<ENU, ENU> = { ENU::a->ENU::a, ENU::c->ENU::c };
	
	m_N:map<N, N> = { };
	m_Ed:map<Edge, Edge> = { };
	m_O:map<O, O> = { };
}

edge class E
{
	o:O = null;
	
	m_s:map<string, int> = { "bar"->1 };
	m_by:map<byte, byte> = { };
	m_sh:map<short, short> = { 1s->1S, 2s->2S, 3s->3S };
	m_i:map<int, string> = { };
	m_l:map<long, long> = { 42L->42l, 43L->43l };
	m_f:map<float, float> = { 3.141592654f->2.718281828f, 2.718281828f->3.141592654f };
	m_d:map<double, double> = { 43.0->43.0, 44.0->44.0 };
	m_b:map<boolean, boolean> = { true->true, false->false };
	m_e:map<ENU, ENU> = { ENU::b->ENU::b };
	
	m_N:map<N, N> = { };
	m_Ed:map<Edge, Edge> = { };
	m_O:map<O, O> = { };
}

class O
{
	m_s:map<string, int> = { "baz"->2 };
	m_by:map<byte, byte> = { };
	m_sh:map<short, short> = { };
	m_i:map<int, string> = { 1->"foo", 2->"bar", 3->"baz" };
	m_l:map<long, long> = { 44L->44l };
	m_f:map<float, float> = { 3.141592654f->2.718281828f, 2.718281828f->3.141592654f };
	m_d:map<double, double> = { 42.0->42.0 };
	m_b:map<boolean, boolean> = { false->false };
	m_e:map<ENU, ENU> = { ENU::b->ENU::b, ENU::c->ENU::c };
	
	m_N:map<N, N> = { };
	m_Ed:map<Edge, Edge> = { };
	m_O:map<O, O> = { };
}
