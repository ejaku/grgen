#using "persistentgraph_dangling_references.gm"

rule init
{
	modify {
		n:N -e:E-> n;
		eval {
			n.o = new O();
		}

		n2:N -e2:E-> n2;

		eval {
			n.n = n2;
			n.e = e2;

			n.m.add(42, n2);
			n.s.add(e2);
			n.s.add(e);
			
			e.n = n2;
			e.e = e2;
			e.nn = n;

			e.m.add(n2, 42);
			e.a.add(n2);
			e.a.add(n2);
			e.a.add(n);

			def ref o:O = n.o;
			o.n = n2;
			o.e = e2;

			o.m.add(n2, e2);
			o.d.add(e2);
		}
	}
}

rule deleteToCreateDanglingReferences
{
	n:N -e:E-> n;
	if{ n.o != null; }
	n2:N -e2:E-> n2;

	modify {
		delete(n2);
	}
}

rule retypeToCreateDanglingReferences
{
	n:N -e:E-> n;
	if{ n.o != null; }
	n2:N -e2:E-> n2;

	modify {
		new_n2:M<n2> -new_e2:D<e2>-> new_n2;
	}
}

test find : (N, E, O)
{
	n:N -e:E-> n;
	if{ n.o != null; }

	return(n,e,n.o);
}

rule initNested
{
	modify {
		n:N -e:E-> n;
		n2:N -e2:E-> n2;
		n3:N -e3:E-> n3;
		n --> n2 --> n3;

		eval {
			n.o = new O();
			
			n.n = n2;
			n.s.add(e2);
			
			e.e = e2;
			e.a.add(n2);
			
			n2.n = n3;
			n2.s.add(e3);
			
			e2.e = e3;
			e2.a.add(n3);
		}
	}
}

rule createDanglingReferencesNested
{
	n:N -e:E-> n;
	n2:N -e2:E-> n2;
	n3:N -e3:E-> n3;
	n --> n2 --> n3;
	
	modify {
		delete(n2);
		new_n3:M<n3> -new_e3:D<e3>-> new_n3;
	}
}
