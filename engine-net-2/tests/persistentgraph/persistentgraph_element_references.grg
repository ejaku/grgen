#using "persistentgraph_element_references.gm"

rule init
{
	modify {
		n:N -e:E-> n;
		eval {
			def ref o:O = new O();
			n.o = o; e.o = o;
			o.o = o; o.n = n; o.e = e;
		}
		eval { n.n = n; n.e = e; e.n = n; e.e = e; }
	}
}

rule patchObject
{
	n:N -e:E-> n;
		
	modify {
		eval {
			// object sharing would cause either the find in the nested graph or the find in the host graph to fail (because of node/edge references in the object not referencing the nodes/edges of the current graph)
			def ref o:O = new O();
			n.o = o; e.o = o;
			o.o = o; o.n = n; o.e = e;
			
			// clones of graph elements as created e.g. by inducedSubgraph/definedSubgraph contain references to original graph elements/objects - patch them to reference local elements, so find works
			n.n = n; n.e = e;
			e.n = n; e.e = e;
		}
	}
}

rule initNested
{
	n:N -e:E-> n;
	
	modify {
		---
		exec( { n.g = inducedSubgraph(set<Node>{ }) } ;>  in n.g { init } );
		exec( { e.g = definedSubgraph(set<Edge>{ e }) } ;>  in e.g { patchObject } );
		exec( o:O ;> { o = n.o; o.g = inducedSubgraph(set<Node>{ }) } ;>  in o.g { init } );
		exec( g:graph ;> ln:N ;> le:E ;> lo:O ;> { g = inducedSubgraph(set<Node>{ }) } ;>  in g { init ;> (ln,le,lo)=find } ;> { n.nodeFromOtherwiseUnreachableGraph = ln } );
	}
}

test find : (N, E, O)
{
	n:N -e:E-> n;
	if{ n.o != null; n.o == e.o; n.o == n.o.o; }
	
	if{ n.n == n && n.e == e; }
	if{ e.n == n && e.e == e; }
	if{ n.o.n == n && n.o.e == e; }
	
	return(n,e,n.o);
}
