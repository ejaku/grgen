! rm ../testgraphfilename6.db
#the test is typically started from the tests folder (has to be started from there due to the local path), so you will find the testgraphfilename.db there
new graph "persistentgraph/persistentgraph_objects" persist with "libGrPersistenceProviderSQLite.dll" to "Data Source=testgraphfilename6.db;Version=3;"

show num nodes

new graph "persistentgraph/persistentgraph_objects" "some non-persistent graph"

show num nodes

exec init

show num nodes

exec (::n)=find
show n.root
exec showAvailabilityOfNestedGraphs
exec in ::n.nested1 { find }
exec in ::n.nested2 { (::n)=findSimple <; showAvailabilityOfNestedGraphs }
show n.root
exec in ::n.nested1 { (::n)=findSimple <; showAvailabilityOfNestedGraphs }
show n.root

new graph "persistentgraph/persistentgraph_objects" persist with "libGrPersistenceProviderSQLite.dll" to "Data Source=testgraphfilename6.db;Version=3;"

show num nodes

exec init

show num nodes

exec (::n)=find
show n.root
exec showAvailabilityOfNestedGraphs
exec in ::n.nested1 { find }
exec in ::n.nested2 { (::n)=findSimple <; showAvailabilityOfNestedGraphs }
show n.root
exec in ::n.nested1 { (::n)=findSimple <; showAvailabilityOfNestedGraphs }
show n.root

new graph "persistentgraph/persistentgraph_objects" "some non-persistent graph"

show num nodes

new graph "persistentgraph/persistentgraph_objects" persist with "libGrPersistenceProviderSQLite.dll" to "Data Source=testgraphfilename6.db;Version=3;"

show num nodes

exec (::n)=find
show n.root
exec showAvailabilityOfNestedGraphs
exec in ::n.nested1 { find }
exec in ::n.nested2 { (::n)=findSimple <; showAvailabilityOfNestedGraphs }
show n.root
exec in ::n.nested1 { (::n)=findSimple <; showAvailabilityOfNestedGraphs }
show n.root

clear graph

show num nodes

quit
