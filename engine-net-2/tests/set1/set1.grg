using set1;

test aWithFoo
{
	na:A\B;

	if { "foo" in na.a; }
}

rule addFooNoEffect()
{
    na:A\B;
	
	modify {
		eval {
			na.a = na.a | set<string>{ "foo" };
		}
	}
}

rule addFoo()
{
    nb:B;
	modify {
		eval {
			nb.b = nb.b | set<string>{ "foo" };
		}
	}
}

test bWithBar
{
	nb:B;
	if { "bar" in nb.a; }
}

rule removeBar()
{
    nb:B;

	modify {
		eval {
			nb.a = nb.a \ set<string>{ "bar" };
		}
	}
}

rule removeBarNoEffect()
{
    nb:B;
	
	modify {
		eval {
			nb.a = nb.a \ set<string>{ "bar" };
		}
	}
}

test anonymousSet
{
	na:A;
	if { na.val in set<string>{ "foo", "argl" }; }
}

test anonymousSetNA
{
	nb:B;
	if { nb.val in set<string>{ "aha","oho","uh?"}; }
}

rule useSetVar(ref niceSet:set<string>)
{
    if { "Hallo" in niceSet; }
    
    modify {
        emit("1 value of attribute 5 6 " + ("Handtuch" in niceSet ? "yes" : "no") + "\n");
    }
}

rule byReference(ref storage:set<string>) // parameter passed by-reference
{
  n:A;
	
  modify {
    eval {
      def ref s:set<string> = storage; // by-reference
      s.add("baz"); // now s and storage are changed
      emit("1 value of attribute 5 6 ", s, "\n");
      emit("1 value of attribute 5 6 ", storage, "\n");
      emit("1 value of attribute 5 6 ", n.a, "\n");
      n.a = s; // by-value -- different containers
      n.a.rem("qux"); // only n.a changed
	  emit("1 value of attribute 5 6 ", s, "\n");
      emit("1 value of attribute 5 6 ", storage, "\n");
      emit("1 value of attribute 5 6 ", n.a, "\n");
      s.rem("baz"); // now s and storage are changed
	  emit("1 value of attribute 5 6 ", s, "\n");
      emit("1 value of attribute 5 6 ", storage, "\n");
      emit("1 value of attribute 5 6 ", n.a, "\n");
    }
  }
}
