#using "statespace.gm"

rule init
{
	modify {
		r:Red --> g:Green --> b:Blue --> r;
	}
}

rule insertRed
{
	alternative {
		GreenToBlue {
			g:Green -e:Edge-> b:Blue;

			modify {
				delete(e);
				g --> r:Red --> b;
			}
		}
		BlueToGreen {
			b:Blue -e:Edge-> g:Green;
		
			modify {
				delete(e);
				b --> r:Red --> g;
			}
		}
	}
}

rule insertGreen
{
	alternative {
		RedToBlue {
			r:Red -e:Edge-> b:Blue;

			modify {
				delete(e);
				r --> g:Green --> b;
			}
		}
		BlueToRed {
			b:Blue -e:Edge-> r:Red;

			modify {
				delete(e);
				b --> g:Green --> r;
			}
		}
	}
}

rule insertBlue
{
	alternative {
		RedToGreen {
			r:Red -e:Edge-> g:Green;

			modify {
				delete(e);
				r --> b:Blue --> g;
			}
		}
		GreenToRed {
			g:Green -e:Edge-> r:Red;

			modify {
				delete(e);
				g --> b:Blue --> r;
			}
		}
	}
}

sequence stateSpaceStaticMappingCompiled
{
	{ ::statestep = [: for{insertRed; {::statespace.add(this)} ;> true},
						for{insertGreen; {::statespace.add(this)} ;> true},
						for{insertBlue; {::statespace.add(this)} ;> true}
					:] }
}

sequence stateSpaceStaticTwiceMappingCompiled
{
	{ ::statestep =
		[: for{ insertRed; { ::statespace.add(this);
				{[: for{insertRed; {::statespace.add(this)} ;> true},
					for{insertGreen; {::statespace.add(this)} ;> true},
					for{insertBlue; {::statespace.add(this)} ;> true} :]} } },
			for{ insertGreen; { ::statespace.add(this);
					{[: for{insertRed; {::statespace.add(this)} ;> true},
						for{insertGreen; {::statespace.add(this)} ;> true},
						for{insertBlue; {::statespace.add(this)} ;> true} :]} } },
			for{ insertBlue; { ::statespace.add(this);
					{[: for{insertRed; {::statespace.add(this)} ;> true},
						for{insertGreen; {::statespace.add(this)} ;> true},
						for{insertBlue; {::statespace.add(this)} ;> true} :]} } }
		:]
	}
}

sequence addIfNotExistingCompiled()
{
	if { {{!equalsAny(this, ::statespace)}};
		{ ::statespace.add(this) }
	}
}

sequence stateSpaceStaticTwiceMappingIsoCheckCompiled
{
	{ ::statestep =
		[: for{ insertRed; { ::statespace.add(this);
				{[: for{insertRed; addIfNotExistingCompiled() ;> true},
					for{insertGreen; addIfNotExistingCompiled() ;> true},
					for{insertBlue; addIfNotExistingCompiled() ;> true} :]} } },
			for{ insertGreen; { ::statespace.add(this);
					{[: for{insertRed; addIfNotExistingCompiled() ;> true},
						for{insertGreen; addIfNotExistingCompiled() ;> true},
						for{insertBlue; addIfNotExistingCompiled() ;> true} :]} } },
			for{ insertBlue; { ::statespace.add(this);
					{[: for{insertRed; addIfNotExistingCompiled() ;> true},
						for{insertGreen; addIfNotExistingCompiled() ;> true},
						for{insertBlue; addIfNotExistingCompiled() ;> true} :]} } }
		:]
	}
}

sequence stateStepMappingCompiled(level:int)
{
	if { {{level < ::stopLevel}};
		{ ::statestep = [: for{insertRed; {::statespace.add(this)} ;> stateStepMappingCompiled(level + 1)},
							for{insertGreen; {::statespace.add(this)} ;> stateStepMappingCompiled(level + 1)},
							for{insertBlue; {::statespace.add(this)} ;> stateStepMappingCompiled(level + 1)}
						:] }
	}
}

sequence stateStepMappingIsoCheckCompiled(level:int)
{
	if { {{level < ::stopLevel}};
		{ ::statestep = [: for{insertRed; addIfNotExistingCompiled() ;> stateStepMappingIsoCheckCompiled(level + 1)},
							for{insertGreen; addIfNotExistingCompiled() ;> stateStepMappingIsoCheckCompiled(level + 1)},
							for{insertBlue; addIfNotExistingCompiled() ;> stateStepMappingIsoCheckCompiled(level + 1)}
						:] }
	}
}

sequence stateStepMappingTreeCompiled(level:int, parent:StatespaceObject)
{
	if { {{level < ::stopLevel}};
		{ ::statestep = [: for{insertRed; child:StatespaceObject ;> {::statespace.add(this); child = new StatespaceObject@(gr=this); parent.successors.add(child) } ;> stateStepMappingTreeCompiled(level + 1, child)},
							for{insertGreen; child:StatespaceObject ;> {::statespace.add(this); child = new StatespaceObject@(gr=this); parent.successors.add(child) } ;> stateStepMappingTreeCompiled(level + 1, child)},
							for{insertBlue; child:StatespaceObject ;> {::statespace.add(this); child = new StatespaceObject@(gr=this); parent.successors.add(child) } ;> stateStepMappingTreeCompiled(level + 1, child)}
						:] }
	}
}

sequence stateStepMappingTransientTreeCompiled(level:int, parent:TransientStatespaceObject)
{
	if { {{level < ::stopLevel}};
		{ ::statestep = [: for{insertRed; child:TransientStatespaceObject ;> {::statespace.add(this); child = new TransientStatespaceObject@(gr=this); parent.successors.add(child) } ;> stateStepMappingTransientTreeCompiled(level + 1, child)},
							for{insertGreen; child:TransientStatespaceObject ;> {::statespace.add(this); child = new TransientStatespaceObject@(gr=this); parent.successors.add(child) } ;> stateStepMappingTransientTreeCompiled(level + 1, child)},
							for{insertBlue; child:TransientStatespaceObject ;> {::statespace.add(this); child = new TransientStatespaceObject@(gr=this); parent.successors.add(child) } ;> stateStepMappingTransientTreeCompiled(level + 1, child)}
						:] }
	}
}

sequence linkAndAddIfNotExistingCompiled(parent:StatespaceObject) : (successor:StatespaceObject)
{
	equivalent:graph ;> { equivalent = getEquivalent(this, ::statespace) } ;>
	if { {{equivalent == null}};
		{
			::statespace.add(this);
			successor = new StatespaceObject@(gr=this);
			parent.successors.add(successor);
			::statespaceObjectToGraph.add(successor, this);
			::statespaceGraphToObject.add(this, successor);
			{ true }
		};
		{
			equivalentStatespaceObject:StatespaceObject = ::statespaceGraphToObject[equivalent];
			parent.successors.add(equivalentStatespaceObject);
			successor = null;
			{ false }
		}
	}
}

sequence stateStepMappingGraphCompiled(level:int, parent:StatespaceObject) {
	if { {{level < ::stopLevel}};
		{ ::statestep = [: for{insertRed; (successor:StatespaceObject)=linkAndAddIfNotExistingCompiled(parent) && stateStepMappingGraphCompiled(level + 1, successor)},
							for{insertGreen; (successor:StatespaceObject)=linkAndAddIfNotExistingCompiled(parent) && stateStepMappingGraphCompiled(level + 1, successor)},
							for{insertBlue; (successor:StatespaceObject)=linkAndAddIfNotExistingCompiled(parent) && stateStepMappingGraphCompiled(level + 1, successor)}
						:] }
	}
}

sequence linkAndAddIfNotExistingTransientCompiled(parent:TransientStatespaceObject) : (successor:TransientStatespaceObject)
{
	equivalent:graph ;> { equivalent = getEquivalent(this, ::statespace) } ;>
	if { {{equivalent == null}};
		{
			::statespace.add(this);
			successor = new TransientStatespaceObject@(gr=this);
			parent.successors.add(successor);
			::statespaceObjectToGraph.add(successor, this);
			::statespaceGraphToObject.add(this, successor);
			{ true }
		};
		{
			equivalentStatespaceObject:TransientStatespaceObject = ::statespaceGraphToObject[equivalent];
			parent.successors.add(equivalentStatespaceObject);
			successor = null;
			{ false }
		}
	}
}

sequence stateStepMappingTransientGraphCompiled(level:int, parent:TransientStatespaceObject) {
	if { {{level < ::stopLevel}};
		{ ::statestep = [: for{insertRed; (successor:TransientStatespaceObject)=linkAndAddIfNotExistingTransientCompiled(parent) && stateStepMappingTransientGraphCompiled(level + 1, successor)},
							for{insertGreen; (successor:TransientStatespaceObject)=linkAndAddIfNotExistingTransientCompiled(parent) && stateStepMappingTransientGraphCompiled(level + 1, successor)},
							for{insertBlue; (successor:TransientStatespaceObject)=linkAndAddIfNotExistingTransientCompiled(parent) && stateStepMappingTransientGraphCompiled(level + 1, successor)}
						:] }
	}
}
