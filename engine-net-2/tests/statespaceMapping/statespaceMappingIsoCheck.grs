new graph statespaceMapping/statespace

include statespaceMapping/statespacelayout.grsi

exec init

exec { ::statespace = new set<graph>{} }

def addIfNotExisting() { false }
def addIfNotExisting() {\
	if { {{!equalsAny(this, ::statespace)}};\
		{ ::statespace.add(this) }\
	}\
}

def stateStepMappingIsoCheck(level:int) { false }
def stateStepMappingIsoCheck(level:int) {\
	if { {{level < ::stopLevel}};\
		{ ::statestep = [: for{insertRed; addIfNotExisting() ;> stateStepMappingIsoCheck(level + 1)},\
							for{insertGreen; addIfNotExisting() ;> stateStepMappingIsoCheck(level + 1)},\
							for{insertBlue; addIfNotExisting() ;> stateStepMappingIsoCheck(level + 1)}\
						:] }\
	}\
}

exec ::stopLevel=2 ;> stateStepMappingIsoCheck(0)

show var statestep
show var statespace

show num nodes Red
show num nodes Green
show num nodes Blue

exec for{g:graph in ::statespace; in g { { emit("The value of variable \"redgreenblue\" of type foobar is: ", nodes(Red).size(), nodes(Green).size(), nodes(Blue).size(), "\n") } } } 

exit
