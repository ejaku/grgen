new graph statespaceMapping/statespace

include statespaceMapping/statespacelayout.grsi

# root points to statespace graph at statespace (meta) level, objectGraph points to the first of the graphs at object level
exec { ::root=this; ::objectGraph=copy(this); (::statespaceRoot)=add(StatespaceNode) } ;> in ::objectGraph { init }

# graphToStatespaceNode and the statespace graph root are only needed for visualization of the structure of the statespace, for unfolding the other variables would be sufficient
exec { ::statespace = new array<graph>[]; ::newlycreated = new set<graph>{};\
::graphToStatespaceNode = new map<graph, StatespaceNode>{}; ::graphToStatespaceNode.add(::objectGraph, ::statespaceRoot);\
::tobeprocessed = new array<graph>[::objectGraph]}

def processState(state:graph, parent:StatespaceNode, red:set<graph>, green:set<graph>, blue:set<graph>) { false }
def processState(state:graph, parent:StatespaceNode, red:set<graph>, green:set<graph>, blue:set<graph>) {\
	equivalent:graph ;> { (equivalent) = getEquivalentOrAdd(state, ::statespace) } ;>\
	if{ {{equivalent==null}} ;\
		child:StatespaceNode ;> lock(::newlycreated) { { ::newlycreated.add(state) } } ;>\
			lock(::root) { (child)=::root.createAndLinkStatespaceNodeColored(parent, state, red, green, blue) } ;>\
			lock(::graphToStatespaceNode) { { ::graphToStatespaceNode.add(state, child) } } ;\
		equivalentNode:StatespaceNode ;> ( if{ lock(::graphToStatespaceNode) { { { equivalent in ::graphToStatespaceNode } } }; lock(::graphToStatespaceNode) { { equivalentNode=::graphToStatespaceNode[equivalent] } } ;> false; true } )* ;>\
			lock(::root) { ::root.linkStatespaceNodeColored(parent, equivalentNode, state in red, state in green, state in blue) }\
	}\
}

# graphToStatespaceNodeLocal, red, green, blue are only needed for visualization of the structure of the statespace, for unfolding the other variables would be sufficient
def stateStep() { false }
def stateStep() {\
	statestep:array<graph> ;> red:set<graph> = new set<graph>{} ;> green:set<graph> = new set<graph>{} ;> blue:set<graph> = new set<graph>{} ;>\
	{ statestep = [: for{insertRed; {red.add(this)} }, for{insertGreen; {green.add(this)}}, for{insertBlue; {blue.add(this)}} :] } ;>\
	parent:StatespaceNode ;> lock(::graphToStatespaceNode) { { parent=::graphToStatespaceNode[this] } } ;>\
	for{state:graph in statestep; processState(state, parent, red, green, blue)}\
}

exec ::stopLevel=1 ;> for{step:int in [0 : ::stopLevel]; parallel array in ::tobeprocessed { stateStep() } ;> { ::tobeprocessed=::newlycreated.asArray(); ::newlycreated.clear() } }
#exec ::stopLevel=1 ;> for{step:int in [0 : ::stopLevel]; for{::tbp in ::tobeprocessed; in ::tbp { stateStep() } } ;> { ::tobeprocessed=::newlycreated.asArray(); ::newlycreated.clear() } }

exec { ::statespaceSize = ::statespace.size() }
show var statespaceSize

show var statespaceRoot

exec { ::statespaceRootChild0 = outgoing(::statespaceRoot).peek(0) }
exec { ::statespaceRootChild1 = outgoing(::statespaceRoot).peek(1) }
exec { ::statespaceRootChild2 = outgoing(::statespaceRoot).peek(2) }
show var statespaceRootChild0
show var statespaceRootChild1
show var statespaceRootChild2

exec { ::statespaceRootChild00 = outgoing(target(::statespaceRootChild0)).peek(0) }
exec { ::statespaceRootChild01 = outgoing(target(::statespaceRootChild0)).peek(1) }
exec { ::statespaceRootChild02 = outgoing(target(::statespaceRootChild0)).peek(2) }
exec { ::statespaceRootChild03 = outgoing(target(::statespaceRootChild0)).peek(3) }
show var statespaceRootChild00
show var statespaceRootChild01
show var statespaceRootChild02
show var statespaceRootChild03

show num nodes Red
show num nodes Green
show num nodes Blue

show num nodes StatespaceNode

show num edges StatespaceEdgeRed
show num edges StatespaceEdgeGreen
show num edges StatespaceEdgeBlue

exec for{g:graph in ::statespace; in g { { emit("The value of variable \"redgreenblue\" of type foobar is: ", nodes(Red).size(), nodes(Green).size(), nodes(Blue).size(), "\n") } } } 
#debug exec true

exit
