new graph statespaceMapping/statespace

include statespaceMapping/statespacelayout.grsi

exec init ;> ::statespaceRoot = new TransientStatespaceObject@(gr=this)

exec { ::statespace = new set<graph>{} }

exec ::stopLevel=2 ;> stateStepMappingTransientTreeCompiled(0, ::statespaceRoot)

show var statestep
show var statespace

show var statespaceRoot

exec { ::statespaceRootChild0 = ::statespaceRoot.successors.peek(0) }
exec { ::statespaceRootChild1 = ::statespaceRoot.successors.peek(1) }
exec { ::statespaceRootChild2 = ::statespaceRoot.successors.peek(2) }
show var statespaceRootChild0
show var statespaceRootChild1
show var statespaceRootChild2

exec { ::statespaceRootChild00 = ::statespaceRootChild0.successors.peek(0) }
exec { ::statespaceRootChild01 = ::statespaceRootChild0.successors.peek(1) }
exec { ::statespaceRootChild02 = ::statespaceRootChild0.successors.peek(2) }
exec { ::statespaceRootChild03 = ::statespaceRootChild0.successors.peek(3) }
show var statespaceRootChild00
show var statespaceRootChild01
show var statespaceRootChild02
show var statespaceRootChild03

#note: the TransientStatespaceObject are created outside of the graphs (in contrast to the StatespaceObject of the non-transient tests)

show num nodes Red
show num nodes Green
show num nodes Blue

exec for{g:graph in ::statespace; in g { { emit("The value of variable \"redgreenblue\" of type foobar is: ", nodes(Red).size(), nodes(Green).size(), nodes(Blue).size(), "\n") } } } 

exit
