using storages;

rule addNode : (Node)
{
	modify {
		n:Node;
		return(n);
	}
}

test pickNode : (Node)
{
	 n:Node;
	 return(n);
}

test getReflexiveEdge(n:Node) : (Edge)
{
	n -e:Edge-> n;
	return(e);
}

rule addReflexiveEdge(n:Node) : (Edge)
{
	modify {
		n -e:Edge-> n;
		return(e);
	}
}

rule addNodeNN : (NN)
{
	modify {
		n:NN;
		return(n);
	}
}

rule addReflexiveEdgeEE(n:Node) : (EE)
{
	modify {
		n -e:EE-> n;
		return(e);
	}
}

exact test exactlyOneReflexiveEdge(n:Node)
{
	n --> n;
}

test isReflexiveEdge(-e:Edge->)
{
	n:Node -e-> n;
}

rule remNode(n:Node)
{
	replace {
	}
}

rule remEdge(-e:Edge->)
{
	replace {
	}
}

test getIndexArray(ref a:array<Node>, item:Node) : (int)
{
	return(a.indexOf(item));
}

test getIndexArrayNN(ref a:array<NN>, item:NN) : (int)
{
	return(a.indexOf(item));
}

test getIndexArrayEdge(ref a:array<Edge>, -item:Edge->) : (int)
{
	return(a.indexOf(item));
}

test getIndexArrayEdgeEE(ref a:array<EE>, -item:EE->) : (int)
{
	return(a.indexOf(item));
}

test getIndexDeque(ref d:deque<Node>, item:Node) : (int)
{
	return(d.indexOf(item));
}

test getIndexDequeNN(ref d:deque<NN>, item:NN) : (int)
{
	return(d.indexOf(item));
}

test getIndexDequeEdge(ref a:deque<Edge>, -item:Edge->) : (int)
{
	return(a.indexOf(item));
}

test getIndexDequeEdgeEE(ref a:deque<EE>, -item:EE->) : (int)
{
	return(a.indexOf(item));
}
