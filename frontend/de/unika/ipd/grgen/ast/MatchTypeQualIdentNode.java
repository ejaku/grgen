/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET 6.0
 * Copyright (C) 2003-2021 Universitaet Karlsruhe, Institut fuer Programmstrukturen und Datenorganisation, LS Goos; and free programmers
 * licensed under LGPL v3 (see LICENSE.txt included in the packaging of this file)
 * www.grgen.net
 */

/**
 * @author Edgar Jakumeit
 */
package de.unika.ipd.grgen.ast;

import java.util.Collection;
import java.util.Vector;

import de.unika.ipd.grgen.ast.decl.executable.MatchClassFilterAutoGeneratedDeclNode;
import de.unika.ipd.grgen.ast.decl.executable.MatchClassFilterFunctionDeclNode;
import de.unika.ipd.grgen.ast.type.DefinedMatchTypeNode;
import de.unika.ipd.grgen.ast.util.DeclarationPairResolver;
import de.unika.ipd.grgen.ast.util.DeclarationTypeResolver;
import de.unika.ipd.grgen.ast.util.Pair;
import de.unika.ipd.grgen.ir.Bad;
import de.unika.ipd.grgen.ir.IR;
import de.unika.ipd.grgen.parser.Coords;

/**
 * AST node that represents a reference of a match class filter function to a match class
 */
public class MatchTypeQualIdentNode extends BaseNode /*implements DeclaredCharacter*/
{
	static {
		setName(MatchTypeQualIdentNode.class, "match type qualified identifier");
	}

	protected IdentNode ownerUnresolved;
	private DefinedMatchTypeNode owner;

	protected IdentNode memberUnresolved;
	private MatchClassFilterCharacter member;

	public MatchTypeQualIdentNode(Coords coords, IdentNode owner, IdentNode member)
	{
		super(coords);
		this.ownerUnresolved = owner;
		this.memberUnresolved = member;
	}

	/** returns children of this node */
	@Override
	public Collection<BaseNode> getChildren()
	{
		Vector<BaseNode> children = new Vector<BaseNode>();
		children.add(getValidVersion(ownerUnresolved, owner));
		children.add(getValidVersion(memberUnresolved, (BaseNode)member));
		return children;
	}

	/** returns names of the children, same order as in getChildren */
	@Override
	public Collection<String> getChildrenNames()
	{
		Vector<String> childrenNames = new Vector<String>();
		childrenNames.add("owner");
		childrenNames.add("member");
		return childrenNames;
	}

	@Override
	public String toString()
	{
		return owner.getIdentNode().toString() + "." + member.getFilterName();
	}

	private static final DeclarationTypeResolver<DefinedMatchTypeNode> ownerResolver =
			new DeclarationTypeResolver<DefinedMatchTypeNode>(DefinedMatchTypeNode.class);
	private static final DeclarationPairResolver<MatchClassFilterFunctionDeclNode, MatchClassFilterAutoGeneratedDeclNode> memberResolver =
			new DeclarationPairResolver<MatchClassFilterFunctionDeclNode, MatchClassFilterAutoGeneratedDeclNode>(
					MatchClassFilterFunctionDeclNode.class, MatchClassFilterAutoGeneratedDeclNode.class);

	/** @see de.unika.ipd.grgen.ast.BaseNode#resolveLocal() */
	@Override
	protected boolean resolveLocal()
	{
		if(!(ownerUnresolved instanceof PackageIdentNode)) {
			fixupDefinition(ownerUnresolved, ownerUnresolved.getScope());
		}

		boolean successfullyResolved = true;
		owner = ownerResolver.resolve(ownerUnresolved, this);
		successfullyResolved = owner != null && successfullyResolved;
		boolean ownerResolveResult = owner != null && owner.resolve();

		if(!ownerResolveResult) {
			// "member" can not be resolved due to inaccessible owner
			reportError("Left hand side " + ownerUnresolved.toString() + " of '.' is not a match class");
			return false;
		}

		if(!(memberUnresolved instanceof PackageIdentNode)) {
			if(!tryFixupDefinition(memberUnresolved, owner.getScope().getParent())) {
				fixupDefinition(memberUnresolved, memberUnresolved.getScope());
			}
		}
		Pair<MatchClassFilterFunctionDeclNode, MatchClassFilterAutoGeneratedDeclNode> resolved =
				memberResolver.resolve(memberUnresolved, this);
		if(resolved == null) {
			memberUnresolved.reportError("Unknown match class filter function "
					+ memberUnresolved.toString() + " called.");
			return false;
		}
		if(resolved.fst != null)
			member = resolved.fst;
		else
			member = resolved.snd;

		return successfullyResolved;
	}

	/** @see de.unika.ipd.grgen.ast.BaseNode#checkLocal() */
	@Override
	protected boolean checkLocal()
	{
		return true;
	}

	public DefinedMatchTypeNode getOwner()
	{
		assert isResolved();
		return owner;
	}

	public MatchClassFilterCharacter getMember()
	{
		assert isResolved();
		return member;
	}

	@Override
	protected IR constructIR()
	{
		assert false;
		return Bad.getBad();
	}

	public static String getKindStr()
	{
		return "match class prefixed filter";
	}
}
