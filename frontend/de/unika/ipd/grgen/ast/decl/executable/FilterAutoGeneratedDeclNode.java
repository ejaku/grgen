/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET 6.6
 * Copyright (C) 2003-2022 Universitaet Karlsruhe, Institut fuer Programmstrukturen und Datenorganisation, LS Goos; and free programmers
 * licensed under LGPL v3 (see LICENSE.txt included in the packaging of this file)
 * www.grgen.net
 */

/**
 * @author Edgar Jakumeit
 */

package de.unika.ipd.grgen.ast.decl.executable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;

import de.unika.ipd.grgen.ast.BaseNode;
import de.unika.ipd.grgen.ast.FilterCharacter;
import de.unika.ipd.grgen.ast.IdentNode;
import de.unika.ipd.grgen.ast.decl.DeclNode;
import de.unika.ipd.grgen.ast.decl.pattern.IteratedDeclNode;
import de.unika.ipd.grgen.ast.type.TypeNode;
import de.unika.ipd.grgen.ast.util.DeclarationPairResolver;
import de.unika.ipd.grgen.ast.util.Pair;
import de.unika.ipd.grgen.ir.IR;
import de.unika.ipd.grgen.ir.executable.FilterAutoGenerated;
import de.unika.ipd.grgen.ir.executable.Rule;

/**
 * AST node class representing auto-generated filters (generated upon declaration)
 */
public class FilterAutoGeneratedDeclNode extends FilterAutoDeclNode implements FilterCharacter
{
	static {
		setName(FilterAutoGeneratedDeclNode.class, "auto generated filter");
	}

	protected String name;
	protected ArrayList<String> entities; // null for auto, otherwise list with at least one element
	protected ArrayList<TypeNode> entityTypes;

	protected IdentNode actionUnresolved;
	protected ActionDeclNode action;
	protected IteratedDeclNode iterated;

	public FilterAutoGeneratedDeclNode(IdentNode ident, String name, ArrayList<String> entities, IdentNode action)
	{
		super(ident);
		this.name = name;
		this.entities = entities;
		this.actionUnresolved = action;
	}

	/** returns children of this node */
	@Override
	public Collection<BaseNode> getChildren()
	{
		Vector<BaseNode> children = new Vector<BaseNode>();
		children.add(getValidVersion(actionUnresolved, action, iterated));
		return children;
	}

	/** returns names of the children, same order as in getChildren */
	@Override
	public Collection<String> getChildrenNames()
	{
		Vector<String> childrenNames = new Vector<String>();
		childrenNames.add("actionOrIterated");
		return childrenNames;
	}

	private static final DeclarationPairResolver<ActionDeclNode, IteratedDeclNode> actionOrIteratedResolver =
			new DeclarationPairResolver<ActionDeclNode, IteratedDeclNode>(ActionDeclNode.class, IteratedDeclNode.class);

	/** @see de.unika.ipd.grgen.ast.BaseNode#resolveLocal() */
	@Override
	protected boolean resolveLocal()
	{
		Pair<ActionDeclNode, IteratedDeclNode> actionOrIterated = actionOrIteratedResolver.resolve(actionUnresolved, this);
		if(actionOrIterated == null)
			return false;
		action = actionOrIterated.fst;
		iterated = actionOrIterated.snd;
		return action != null || iterated != null;
	}

	/** @see de.unika.ipd.grgen.ast.BaseNode#resolveLocal() */
	@Override
	protected boolean checkLocal()
	{
		if(entities == null) {
			if(!name.equals("auto")) {
				reportError("Unknown auto-generated filter " + name);
				return false;
			}
			if(iterated != null) {
				reportError("The auto filter is only available for test and rule.");
				return false;
			}
			return true;
		} else {
			entityTypes = new ArrayList<TypeNode>();
			for(int i = 0; i < entities.size(); ++i) {
				if(name.equals("keepOneForEachAccumulateBy") && i == entities.size() - 1)
					continue;

				String entity = entities.get(i);
				DeclNode resolvedEntity = action != null
						? action.pattern.tryGetMember(entity)
						: iterated.pattern.tryGetMember(entity);
				if(resolvedEntity == null) {
					reportError("Unknown entity " + entity + " in "
							+ (action != null ? action.getIdentNode() : iterated.getIdentNode()));
					return false;
				}
				entityTypes.add(resolvedEntity.getDeclType());
			}
		}
		return true;
	}

	@Override
	public String getFilterName()
	{
		return name;
	}

	public String getFilterNameWithEntitySuffix()
	{
		StringBuilder sb = new StringBuilder();
		sb.append(name);
		if(entities != null && !entities.isEmpty()) {
			sb.append("<");
			boolean first = true;
			for(String entity : entities) {
				if(first)
					first = false;
				else
					sb.append(",");
				sb.append(entity);
			}
			sb.append(">");
		}
		return sb.toString();
	}

	@Override
	public ActionDeclNode getActionNode()
	{
		return action;
	}

	public IteratedDeclNode getIteratedNode()
	{
		return iterated;
	}

	/** Returns the IR object for this autogen filter node. */
	public FilterAutoGenerated getFilterAutoGenerated()
	{
		return checkIR(FilterAutoGenerated.class);
	}

	@Override
	protected IR constructIR()
	{
		// return if the IR object was already constructed
		// that may happen in recursive calls
		if(isIRAlreadySet()) {
			return getIR();
		}

		FilterAutoGenerated filterAutoGen = new FilterAutoGenerated(name, entities);

		// mark this node as already visited
		setIR(filterAutoGen);

		Rule actionOrIterated = action != null ? action.getMatcher() : iterated.getMatcher();
		filterAutoGen.setAction(actionOrIterated);
		actionOrIterated.addFilter(filterAutoGen);

		if(entityTypes != null) {
			for(TypeNode entityType : entityTypes) {
				filterAutoGen.addEntityType(entityType.getType());
			}
		}

		return filterAutoGen;
	}

	public static String getKindStr()
	{
		return "auto generated filter";
	}
}
