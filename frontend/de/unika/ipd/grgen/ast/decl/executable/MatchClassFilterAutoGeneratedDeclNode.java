/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET 7.1
 * Copyright (C) 2003-2025 Universitaet Karlsruhe, Institut fuer Programmstrukturen und Datenorganisation, LS Goos; and free programmers
 * licensed under LGPL v3 (see LICENSE.txt included in the packaging of this file)
 * www.grgen.net
 */

/**
 * @author Edgar Jakumeit
 */

package de.unika.ipd.grgen.ast.decl.executable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;

import de.unika.ipd.grgen.ast.BaseNode;
import de.unika.ipd.grgen.ast.IdentNode;
import de.unika.ipd.grgen.ast.MatchClassFilterCharacter;
import de.unika.ipd.grgen.ast.PackageIdentNode;
import de.unika.ipd.grgen.ast.decl.DeclNode;
import de.unika.ipd.grgen.ast.type.DefinedMatchTypeNode;
import de.unika.ipd.grgen.ast.type.TypeNode;
import de.unika.ipd.grgen.ast.util.DeclarationTypeResolver;
import de.unika.ipd.grgen.ir.IR;
import de.unika.ipd.grgen.ir.executable.MatchClassFilterAutoGenerated;
import de.unika.ipd.grgen.ir.type.DefinedMatchType;

/**
 * AST node class representing declarations of auto-generated match class filter functions
 */
public class MatchClassFilterAutoGeneratedDeclNode extends FilterAutoDeclNode implements MatchClassFilterCharacter
{
	static {
		setName(MatchClassFilterAutoGeneratedDeclNode.class, "match filter function declaration");
	}

	public String name;
	public ArrayList<String> entities; // null for auto, otherwise list with at least one element
	protected ArrayList<TypeNode> entityTypes;

	protected IdentNode matchTypeUnresolved;
	protected DefinedMatchTypeNode matchType;

	public MatchClassFilterAutoGeneratedDeclNode(IdentNode ident, String name, ArrayList<String> entities,
			IdentNode matchType)
	{
		super(ident);
		this.name = name;
		this.entities = entities;
		this.matchTypeUnresolved = matchType;
	}

	/** returns children of this node */
	@Override
	public Collection<BaseNode> getChildren()
	{
		Vector<BaseNode> children = new Vector<BaseNode>();
		children.add(matchTypeUnresolved);
		return children;
	}

	/** returns names of the children, same order as in getChildren */
	@Override
	public Collection<String> getChildrenNames()
	{
		Vector<String> childrenNames = new Vector<String>();
		childrenNames.add("matchType");
		return childrenNames;
	}

	private static final DeclarationTypeResolver<DefinedMatchTypeNode> matchTypeResolver =
			new DeclarationTypeResolver<DefinedMatchTypeNode>(DefinedMatchTypeNode.class);

	/** @see de.unika.ipd.grgen.ast.BaseNode#resolveLocal() */
	@Override
	protected boolean resolveLocal()
	{
		if(!(matchTypeUnresolved instanceof PackageIdentNode)) {
			fixupDefinition(matchTypeUnresolved, matchTypeUnresolved.getScope());
		}
		matchType = matchTypeResolver.resolve(matchTypeUnresolved, this);
		return matchType != null;
	}

	/** @see de.unika.ipd.grgen.ast.BaseNode#resolveLocal() */
	@Override
	protected boolean checkLocal()
	{
		if(entities == null) {
			if(!name.equals("auto")) {
				reportError("Unknown auto-generated filter " + name + " (only auto comes without parameters).");
				return false;
			}
			return true;
		} else {
			entityTypes = new ArrayList<TypeNode>();
			for(int i = 0; i < entities.size(); ++i) {
				if(name.equals("keepOneForEachAccumulateBy") && i == entities.size() - 1)
					continue;

				String entity = entities.get(i);
				DeclNode resolvedEntity = matchType.tryGetMember(entity);
				if(resolvedEntity == null) {
					reportError("The entity " + entity
							+ " referenced in the filter declaration " + getFilterNameWithEntitySuffix()
							+ " is not known in the "
							+ "match class " + matchType.getIdentNode() + ".");
					return false;
				}
				entityTypes.add(resolvedEntity.getDeclType());
			}
		}
		return true;
	}

	@Override
	public String getFilterName()
	{
		return name;
	}

	public String getFilterNameWithEntitySuffix()
	{
		StringBuilder sb = new StringBuilder();
		sb.append(name);
		if(entities != null && !entities.isEmpty()) {
			sb.append("<");
			boolean first = true;
			for(String entity : entities) {
				if(first)
					first = false;
				else
					sb.append(",");
				sb.append(entity);
			}
			sb.append(">");
		}
		return sb.toString();
	}

	@Override
	public DefinedMatchTypeNode getMatchTypeNode()
	{
		return matchType;
	}

	/** Returns the IR object for this autogen filter node. */
	public MatchClassFilterAutoGenerated getMatchClassFilterAutoGenerated()
	{
		return checkIR(MatchClassFilterAutoGenerated.class);
	}

	@Override
	protected IR constructIR()
	{
		// return if the IR object was already constructed
		// that may happen in recursive calls
		if(isIRAlreadySet()) {
			return getIR();
		}

		MatchClassFilterAutoGenerated filterAutoGen = new MatchClassFilterAutoGenerated(name, entities);

		// mark this node as already visited
		setIR(filterAutoGen);

		DefinedMatchType definedMatchType = matchType.checkIR(DefinedMatchType.class);
		filterAutoGen.setMatchClass(definedMatchType);
		definedMatchType.addMatchClassFilter(filterAutoGen);

		if(entityTypes != null) {
			for(TypeNode entityType : entityTypes) {
				filterAutoGen.addEntityType(entityType.getType());
			}
		}

		return filterAutoGen;
	}
}
