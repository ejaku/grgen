/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET 7.1
 * Copyright (C) 2003-2025 Universitaet Karlsruhe, Institut fuer Programmstrukturen und Datenorganisation, LS Goos; and free programmers
 * licensed under LGPL v3 (see LICENSE.txt included in the packaging of this file)
 * www.grgen.net
 */

/**
 * @author Edgar Jakumeit
 */

package de.unika.ipd.grgen.ast.decl.pattern;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;

import de.unika.ipd.grgen.ast.BaseNode;
import de.unika.ipd.grgen.ast.IdentNode;
import de.unika.ipd.grgen.ast.decl.executable.NestedMatcherDeclNode;
import de.unika.ipd.grgen.ast.decl.executable.FilterAutoGeneratedDeclNode;
import de.unika.ipd.grgen.ast.decl.executable.FilterAutoDeclNode;
import de.unika.ipd.grgen.ast.decl.executable.FilterAutoSuppliedDeclNode;
import de.unika.ipd.grgen.ast.pattern.PatternGraphLhsNode;
import de.unika.ipd.grgen.ast.type.IteratedTypeNode;
import de.unika.ipd.grgen.ast.util.DeclarationTypeResolver;
import de.unika.ipd.grgen.ir.IR;
import de.unika.ipd.grgen.ir.executable.FilterAutoGenerated;
import de.unika.ipd.grgen.ir.executable.FilterAutoSupplied;
import de.unika.ipd.grgen.ir.executable.Rule;
import de.unika.ipd.grgen.ir.pattern.PatternGraphLhs;
import de.unika.ipd.grgen.ir.pattern.PatternGraphRhs;
import de.unika.ipd.grgen.ir.stmt.EvalStatements;

/**
 * AST node for an iterated-like pattern (iterated, optional, multiple, iterated-minmax), maybe including replacements.
 */
public abstract class IteratedDeclNode extends NestedMatcherDeclNode
{
	static {
		setName(IteratedDeclNode.class, "iterated-cardinality");
	}

	protected IteratedTypeNode type;
	protected ArrayList<FilterAutoDeclNode> filters;

	/** Type for this declaration. */
	protected static IteratedTypeNode iteratedType = new IteratedTypeNode();

	/**
	 * Make a new iterated-like rule.
	 * @param left The left hand side (The pattern to match).
	 * @param right The right hand side.
	 */
	protected IteratedDeclNode(IdentNode id, PatternGraphLhsNode left, RhsDeclNode right)
	{
		super(id, iteratedType, left, right);
		this.filters = new ArrayList<FilterAutoDeclNode>();
	}

	public void addFilters(ArrayList<FilterAutoDeclNode> filters)
	{
		this.filters.addAll(filters);
	}

	/** returns children of this node */
	@Override
	public Collection<BaseNode> getChildren()
	{
		Vector<BaseNode> children = new Vector<BaseNode>();
		children.add(ident);
		children.add(getValidVersion(typeUnresolved, type));
		children.add(pattern);
		if(right != null)
			children.add(right);
		return children;
	}

	/** returns names of the children, same order as in getChildren */
	@Override
	public Collection<String> getChildrenNames()
	{
		Vector<String> childrenNames = new Vector<String>();
		childrenNames.add("ident");
		childrenNames.add("type");
		childrenNames.add("pattern");
		if(right != null)
			childrenNames.add("right");
		return childrenNames;
	}

	private static final DeclarationTypeResolver<IteratedTypeNode> typeResolver =
			new DeclarationTypeResolver<IteratedTypeNode>(IteratedTypeNode.class);

	/** @see de.unika.ipd.grgen.ast.BaseNode#resolveLocal() */
	@Override
	protected boolean resolveLocal()
	{
		type = typeResolver.resolve(typeUnresolved, this);

		return type != null
				& resolveFilters(filters);
	}

	@Override
	protected boolean checkLocal()
	{
		return super.checkLocal()
				& checkFilters(pattern, filters);
	}

	protected abstract int getMinMatches();
	protected abstract int getMaxMatches();
		
	/**
	 * @see de.unika.ipd.grgen.ast.BaseNode#constructIR()
	 */
	@Override
	protected IR constructIR()
	{
		// return if the pattern graph already constructed the IR object
		// that may happen in recursive patterns (and other usages/references)
		if(isIRAlreadySet()) {
			return getIR();
		}

		Rule iteratedRule = new Rule(getIdentNode().getIdent(), getMinMatches(), getMaxMatches());

		// mark this node as already visited
		setIR(iteratedRule);

		PatternGraphLhs left = pattern.getPatternGraph();

		PatternGraphRhs rightPattern = null;
		if(this.right != null) {
			rightPattern = this.right.getPatternGraph(left);
		}

		iteratedRule.initialize(left, rightPattern);

		constructImplicitNegs(left);
		constructIRaux(iteratedRule, right);

		// filters add themselves to the iterated rule when their IR is constructed
		for(FilterAutoDeclNode filter : filters) {
			if(filter instanceof FilterAutoSuppliedDeclNode) {
				((FilterAutoSuppliedDeclNode)filter).checkIR(FilterAutoSupplied.class);
			} else {
				((FilterAutoGeneratedDeclNode)filter).checkIR(FilterAutoGenerated.class);
			}
		}

		// add Eval statements to the IR
		if(this.right != null) {
			for(EvalStatements evalStatements : this.right.getRhsGraph().getEvalStatements()) {
				iteratedRule.addEval(evalStatements);
			}
		}

		return iteratedRule;
	}

	@Override
	public IteratedTypeNode getDeclType()
	{
		assert isResolved();

		return iteratedType;
	}

	public static String getKindStr()
	{
		return "iterated-cardinality";
	}
}
