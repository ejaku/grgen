using model_init;

::g_n:Node;
-::g_e:Edge->;
::g_a:A;
var ::g_s:string;
var ::g_i:int;
ref ::g_m:map<string,CC>;
ref ::g_m2:map<CC,string>;
ref ::g_st:set<CC>;
ref ::g_ar:array<Node>;
ref ::g_de:deque<Node>;

test t
{
	if { incident(::g_n).size()!=0; }
	if { ::g_e in incoming(::g_n); }
	if { ::g_a.f + 1.0 < 2.0; }
	if { ::g_s + "o" !="Foo"; }
	if { ::g_i!=42; }
	if { ::g_m["Foo"]==::g_a; }
	if { ::g_ar[::g_i]==::g_n; }
	if { ::g_de[::g_i]==::g_n; }
	if { ::g_m["Foo"]==::g_a.m["Foo"]; }
//	if { ::g_m["Foo"].i1==::g_m["Foo"].i2; } not implemented yet, maybe never will be
	if { ::g_ar[::g_i]==::g_a.ar[::g_i]; }
	if { ::g_de[::g_i]==::g_a.de[::g_i]; }
}

rule r
{
	cc:CC -ed:Edge->;

	modify {
	---
		eval { ::g_n = cc; }
		eval { ::g_e = ed; }
		eval { ::g_a.f = 1.0f; }
		eval { ::g_s = "muh"; }
		eval { ::g_i = 42; }
		eval { ::g_m["foo"] = cc; }
		eval { ::g_ar[::g_i] = cc; }
		eval { ::g_de[::g_i] = cc; }
		eval { ::g_a.m["Foo"] = cc; }
//		eval { ::g_m["Foo"].i1 = 42; } not supported, implementing it is not a high-prio goal, the rules should allow to change containers, but elements referenced from containers in an eval is quite unimportant
		eval { ::g_a.ar[::g_i] = cc; }
		eval { ::g_a.de[::g_i] = cc; }
	}
}

rule rt
{
	cc:CC -ed:Edge->;

	modify {
	---
		eval { ::g_a.b = ::g_e in incoming(::g_n); }
		eval { ::g_a.f = ::g_a.f + 1.0f; }
		eval { ::g_s = ::g_s + "muh"; }
		eval { ::g_i = ::g_i - 42; }
		eval { ::g_m["foo"] = cc; }
		eval { ::g_ar[::g_i] = cc; }
		eval { ::g_de[::g_i] = ::g_ar[::g_i]; }
		eval { ::g_m["Foo"] = (CC)::g_a.m["Foo"]; }
		eval { ::g_ar[::g_i] = ::g_a.ar[::g_i]; }
		eval { ::g_de[::g_i] = ::g_a.de[::g_i]; }
		eval { ::g_a.m["Foo"] = ::g_m["Foo"]; }
//		eval { ::g_m["Foo"].i1 = ::g_m["Foo"].i2; } not supported
		eval { ::g_a.ar[::g_i] = ::g_ar[::g_i]; }
		eval { ::g_a.de[::g_i] = ::g_de[::g_i]; }
	}
}

rule re
{
	cc:CC -ed:Edge->;

	modify {
	---
//		exec ( {{ incident(::g_n).size()!=0 }} ); function calls can't be nested yet in the sequences
		exec ( {{ ::g_e in incoming(::g_n) }} );
		exec ( {{ ::g_a.f + 1.0 < 2.0 }} );
		exec ( {{ ::g_s + "o" != "Foo" }} );
		exec ( {{ ::g_i!=42 }} );
		exec ( {{ ::g_m["Foo"]==::g_a }} );
		exec ( {{ ::g_ar[::g_i]==::g_n }} );
		exec ( {{ ::g_de[::g_i]==::g_n }} );
		exec ( {{ ::g_m["Foo"]==::g_a.m["Foo"] }} );
//		exec ( {{ ::g_m["Foo"].i1==::g_m["Foo"].i2 }} ); not supported
		exec ( {{ ::g_ar[::g_i]==::g_a.ar[::g_i] }} );
		exec ( {{ ::g_de[::g_i]==::g_a.de[::g_i] }} );

		exec ( { ::g_n = cc } );
		exec ( { ::g_e = ed } );
		exec ( { ::g_a.f = 1.0f } );
		exec ( { ::g_s = "muh" } );
		exec ( { ::g_i = 42 } );
		exec ( { ::g_m["foo"] = cc } );
		exec ( { ::g_ar[::g_i] = cc } );
		exec ( { ::g_de[::g_i] = cc } );
		exec ( { ::g_a.m["Foo"] = cc } );
//		exec ( { ::g_m["Foo"].i1 = 42 } ); not supported
		exec ( { ::g_a.ar[::g_i] = cc } );
		exec ( { ::g_a.de[::g_i] = cc } );

		exec ( { ::g_a.b = ::g_e in incoming(::g_n) } );
		exec ( { ::g_a.f = ::g_a.f + 1.0 } );
		exec ( { ::g_s = ::g_s + "muh" } );
		exec ( { ::g_i = ::g_i - 42 } );
		exec ( { ::g_m["foo"] = cc } );
		exec ( { ::g_ar[::g_i] = cc } );
		exec ( { ::g_de[::g_i] = ::g_ar[::g_i] } );
		exec ( { ::g_m["Foo"] = ::g_a.m["Foo"] } );
		exec ( { ::g_ar[::g_i] = ::g_a.ar[::g_i] } );
		exec ( { ::g_de[::g_i] = ::g_a.de[::g_i] } );
		exec ( { ::g_a.m["Foo"] = ::g_m["Foo"] } );
//		exec ( { ::g_m["Foo"].i1 = ::g_m["Foo"].i2 } ); not supported
		exec ( { ::g_a.ar[::g_i] = ::g_ar[::g_i] } );
		exec ( { ::g_a.de[::g_i] = ::g_de[::g_i] } );
	}
}

rule fromStorage(var s:string, var i:int, ref m:map<string,CC>, ref ar:array<Node>, ref de:deque<Node>)
{
/*
	:CC{::g_m2};
	:CC{::g_st};
	:Node{::g_ar};
	:Node{::g_de};
	
	:Node{::g_n};
	-:Edge{::g_e}->;
	:A{::g_a};
*/
//	:CC{::g_m[::g_s]};
//	:Node{::g_ar[::g_i]};
//	:Node{::g_de[::g_i]};

//	:CC{::g_m[s]};
//	:Node{::g_ar[i]};
//	:Node{::g_de[i]};

//	:CC{m[::g_s]};
//	:Node{ar[::g_i]};
//	:Node{de[::g_i]};
	
//	:Node{::g_a.n};
//	-:Edge{::g_a.e}->;
	
	modify {
	}
}
