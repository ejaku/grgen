#using "index_model_001.gm"

rule r(x:N, var i:int)
{
	modify {
	---
		def ref res:set<Node> = set<Node>{};
		def ref resi:set<Edge> = set<Edge>{};
		exec(
			for{n:N in nodesFromIndexSame(foo, x.i+i+42); { res.add(n) } } ;>
			for{e:E in edgesFromIndexSame(bar, x.i+i+42); { resi.add(e) } } ;>
			for{n:N in nodesFromIndexFromAscending(foo, x.i+i+42); { res.add(n) } } ;>
			for{e:E in edgesFromIndexToExclusiveAscending(bar, x.i-i-42); { resi.add(e) } } ;>
			for{n:N in nodesFromIndexFromToExclusiveAscending(foo, x.i+i+42, x.i-i-42); { res.add(n) } } ;>
			for{e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bar, x.i-x.i+i+42, x.i+x.i-i-42); { resi.add(e) } }
		);
	}
}

procedure r(x:N, var i:int) : (set<Node>, set<Edge>)
{
	def ref res:set<Node> = set<Node>{};
	def ref resi:set<Edge> = set<Edge>{};
	exec(
		for{n:N in nodesFromIndexSame(foo, x.i+i+42); { res.add(n) } } ;>
		for{e:E in edgesFromIndexSame(bar, x.i+i+42); { resi.add(e) } } ;>
		for{n:N in nodesFromIndexFromAscending(foo, x.i+i+42); { res.add(n) } } ;>
		for{e:E in edgesFromIndexToExclusiveAscending(bar, x.i-i-42); { resi.add(e) } } ;>
		for{n:N in nodesFromIndexFromToExclusiveAscending(foo, x.i+i+42, x.i-i-42); { res.add(n) } } ;>
		for{e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bar, x.i-x.i+i+42, x.i+x.i-i-42); { resi.add(e) } }
	);
	return(res, resi);
}
