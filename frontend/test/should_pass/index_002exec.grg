#using "index_model_002.gm"

rule i {
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		exec(
			for{n:N in nodesFromIndexFromToExclusiveAscending(fooi, 42, 1000); {res_.add(n)} } ;>
			for{e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bari, 42, 0); {resi_.add(e)} } ;>
			for{m:N in nodesFromIndexSame(fooi, 42); {res_.add(m)} }
		);
	}
}

//////////////////////////////////////////////////////////////////

rule d {
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		exec(
			for{n:N in nodesFromIndexFromToExclusiveAscending(food, 42.0, 1000.0); {res_.add(n)} } ;>
			for{e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bard, 42.0, 0.0); {resi_.add(e)} } ;>
			for{m:N in nodesFromIndexSame(food, 42.0); {res_.add(m)} }
		);
	}
}

//////////////////////////////////////////////////////////////////

rule b {
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		exec(
			for{n:N in nodesFromIndexFromToExclusiveAscending(foob, false, true); {res_.add(n)} } ;>
			for{e:E in edgesFromIndexFromExclusiveToExclusiveDescending(barb, true, false); {resi_.add(e)} } ;>
			for{m:N in nodesFromIndexSame(foob, true); {res_.add(m)} }
		);
	}
}

//////////////////////////////////////////////////////////////////

rule s {
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		exec
		(
			for{n:N in nodesFromIndexFromToExclusiveAscending(foos, "42", "zzz"); {res_.add(n)} } ;>
			for{e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bars, "42", "a"); {resi_.add(e)} } ;>
			for{m:N in nodesFromIndexSame(foos, "abba"); {res_.add(m)} }
		);
	}
}

//////////////////////////////////////////////////////////////////

rule re {
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		exec
		(
			for{n:N in nodesFromIndexFromToExclusiveAscending(fooe, ENU::bar, ENU::qux); {res_.add(n)} } ;>
			for{e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bare, ENU::baz, ENU::foo); {resi_.add(e)} } ;>
			for{m:N in nodesFromIndexSame(fooe, ENU::bar); {res_.add(m)} }
		);
	}
}
