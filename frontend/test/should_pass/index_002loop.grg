#using "index_model_002.gm"

rule i {
---
	def ref res:set<Node> = set<Node>{};
	def ref resi:set<Edge> = set<Edge>{};
	yield
	{
		for(n:N in nodesFromIndexFromToExclusiveAscending(fooi, 42, 1000))
		{
			res.add(n);
		}
		for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bari, 42, 0))
		{
			resi.add(e);
		}
		for(m:N in nodesFromIndexSame(fooi, 42))
		{
			res.add(m);
		}
	}
	
	modify {
	---
		eval {
			def ref res_:set<Node> = set<Node>{};
			def ref resi_:set<Edge> = set<Edge>{};
			for(n:N in nodesFromIndexFromToExclusiveAscending(fooi, 42, 1000))
			{
				res_.add(n);
			}
			for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bari, 42, 0))
			{
				resi_.add(e);
			}
			for(m:N in nodesFromIndexSame(fooi, 42))
			{
				res_.add(m);
			}
		}
	}
}

//////////////////////////////////////////////////////////////////

rule d {
---
	def ref res:set<Node> = set<Node>{};
	def ref resi:set<Edge> = set<Edge>{};
	yield
	{
		for(n:N in nodesFromIndexFromToExclusiveAscending(food, 42.0, 1000.0))
		{
			res.add(n);
		}
		for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bard, 42, 0))
		{
			resi.add(e);
		}
		for(m:N in nodesFromIndexSame(food, 42))
		{
			res.add(m);
		}
	}
	
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		eval
		{
			for(n:N in nodesFromIndexFromToExclusiveAscending(food, 42.0, 1000.0))
			{
				res_.add(n);
			}
			for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bard, 42, 0))
			{
				resi_.add(e);
			}
			for(m:N in nodesFromIndexSame(food, 42))
			{
				res_.add(m);
			}
		}
	}
}

//////////////////////////////////////////////////////////////////

rule b {
---
	def ref res:set<Node> = set<Node>{};
	def ref resi:set<Edge> = set<Edge>{};
	yield
	{
		for(n:N in nodesFromIndexFromToExclusiveAscending(foob, false, true))
		{
			res.add(n);
		}
		for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(barb, true, false))
		{
			resi.add(e);
		}
		for(m:N in nodesFromIndexSame(foob, true))
		{
			res.add(m);
		}
	}
	
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		eval
		{
			for(n:N in nodesFromIndexFromToExclusiveAscending(foob, false, true))
			{
				res_.add(n);
			}
			for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(barb, true, false))
			{
				resi_.add(e);
			}
			for(m:N in nodesFromIndexSame(foob, true))
			{
				res_.add(m);
			}
		}
	}
}

//////////////////////////////////////////////////////////////////

rule s {
---
	def ref res:set<Node> = set<Node>{};
	def ref resi:set<Edge> = set<Edge>{};
	yield
	{
		for(n:N in nodesFromIndexFromToExclusiveAscending(foos, "42", "zzz"))
		{
			res.add(n);
		}
		for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bars, "42", "a"))
		{
			resi.add(e);
		}
		for(m:N in nodesFromIndexSame(foos, "abba"))
		{
			res.add(m);
		}
	}
	
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		eval
		{
			for(n:N in nodesFromIndexFromToExclusiveAscending(foos, "42", "zzz"))
			{
				res_.add(n);
			}
			for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bars, "42", "a"))
			{
				resi_.add(e);
			}
			for(m:N in nodesFromIndexSame(foos, "abba"))
			{
				res_.add(m);
			}
		}
	}
}

//////////////////////////////////////////////////////////////////

rule re {
---
	def ref res:set<Node> = set<Node>{};
	def ref resi:set<Edge> = set<Edge>{};
	yield
	{
		for(n:N in nodesFromIndexFromToExclusiveAscending(fooe, ENU::bar, ENU::qux))
		{
			res.add(n);
		}
		for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bare, ENU::baz, ENU::foo))
		{
			resi.add(e);
		}
		for(m:N in nodesFromIndexSame(fooe, ENU::bar))
		{
			res.add(m);
		}
	}
	
	modify {
	---
		def ref res_:set<Node> = set<Node>{};
		def ref resi_:set<Edge> = set<Edge>{};
		eval
		{
			for(n:N in nodesFromIndexFromToExclusiveAscending(fooe, ENU::bar, ENU::qux))
			{
				res_.add(n);
			}
			for(e:E in edgesFromIndexFromExclusiveToExclusiveDescending(bare, ENU::baz, ENU::foo))
			{
				resi_.add(e);
			}
			for(m:N in nodesFromIndexSame(fooe, ENU::bar))
			{
				res_.add(m);
			}
		}
	}
}
